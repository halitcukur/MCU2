
WFI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ed8  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002070  08002070  00003070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002088  08002088  00004070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002088  08002088  00003088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002090  08002090  00004070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002090  08002090  00003090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002094  08002094  00003094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08002098  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  20000070  08002108  00004070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  08002108  000040d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000072a0  00000000  00000000  000040a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001398  00000000  00000000  0000b340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000650  00000000  00000000  0000c6d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00015150  00000000  00000000  0000cd28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000762f  00000000  00000000  00021e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00085033  00000000  00000000  000294a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000ae4da  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 000004be  00000000  00000000  000ae51d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001868  00000000  00000000  000ae9dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  000b0244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002058 	.word	0x08002058

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	08002058 	.word	0x08002058

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b988 	b.w	8000510 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	468e      	mov	lr, r1
 8000220:	4604      	mov	r4, r0
 8000222:	4688      	mov	r8, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14a      	bne.n	80002be <__udivmoddi4+0xa6>
 8000228:	428a      	cmp	r2, r1
 800022a:	4617      	mov	r7, r2
 800022c:	d962      	bls.n	80002f4 <__udivmoddi4+0xdc>
 800022e:	fab2 f682 	clz	r6, r2
 8000232:	b14e      	cbz	r6, 8000248 <__udivmoddi4+0x30>
 8000234:	f1c6 0320 	rsb	r3, r6, #32
 8000238:	fa01 f806 	lsl.w	r8, r1, r6
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	40b7      	lsls	r7, r6
 8000242:	ea43 0808 	orr.w	r8, r3, r8
 8000246:	40b4      	lsls	r4, r6
 8000248:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800024c:	fa1f fc87 	uxth.w	ip, r7
 8000250:	fbb8 f1fe 	udiv	r1, r8, lr
 8000254:	0c23      	lsrs	r3, r4, #16
 8000256:	fb0e 8811 	mls	r8, lr, r1, r8
 800025a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800025e:	fb01 f20c 	mul.w	r2, r1, ip
 8000262:	429a      	cmp	r2, r3
 8000264:	d909      	bls.n	800027a <__udivmoddi4+0x62>
 8000266:	18fb      	adds	r3, r7, r3
 8000268:	f101 30ff 	add.w	r0, r1, #4294967295
 800026c:	f080 80ea 	bcs.w	8000444 <__udivmoddi4+0x22c>
 8000270:	429a      	cmp	r2, r3
 8000272:	f240 80e7 	bls.w	8000444 <__udivmoddi4+0x22c>
 8000276:	3902      	subs	r1, #2
 8000278:	443b      	add	r3, r7
 800027a:	1a9a      	subs	r2, r3, r2
 800027c:	b2a3      	uxth	r3, r4
 800027e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000282:	fb0e 2210 	mls	r2, lr, r0, r2
 8000286:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800028a:	fb00 fc0c 	mul.w	ip, r0, ip
 800028e:	459c      	cmp	ip, r3
 8000290:	d909      	bls.n	80002a6 <__udivmoddi4+0x8e>
 8000292:	18fb      	adds	r3, r7, r3
 8000294:	f100 32ff 	add.w	r2, r0, #4294967295
 8000298:	f080 80d6 	bcs.w	8000448 <__udivmoddi4+0x230>
 800029c:	459c      	cmp	ip, r3
 800029e:	f240 80d3 	bls.w	8000448 <__udivmoddi4+0x230>
 80002a2:	443b      	add	r3, r7
 80002a4:	3802      	subs	r0, #2
 80002a6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002aa:	eba3 030c 	sub.w	r3, r3, ip
 80002ae:	2100      	movs	r1, #0
 80002b0:	b11d      	cbz	r5, 80002ba <__udivmoddi4+0xa2>
 80002b2:	40f3      	lsrs	r3, r6
 80002b4:	2200      	movs	r2, #0
 80002b6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d905      	bls.n	80002ce <__udivmoddi4+0xb6>
 80002c2:	b10d      	cbz	r5, 80002c8 <__udivmoddi4+0xb0>
 80002c4:	e9c5 0100 	strd	r0, r1, [r5]
 80002c8:	2100      	movs	r1, #0
 80002ca:	4608      	mov	r0, r1
 80002cc:	e7f5      	b.n	80002ba <__udivmoddi4+0xa2>
 80002ce:	fab3 f183 	clz	r1, r3
 80002d2:	2900      	cmp	r1, #0
 80002d4:	d146      	bne.n	8000364 <__udivmoddi4+0x14c>
 80002d6:	4573      	cmp	r3, lr
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xc8>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 8105 	bhi.w	80004ea <__udivmoddi4+0x2d2>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4690      	mov	r8, r2
 80002ea:	2d00      	cmp	r5, #0
 80002ec:	d0e5      	beq.n	80002ba <__udivmoddi4+0xa2>
 80002ee:	e9c5 4800 	strd	r4, r8, [r5]
 80002f2:	e7e2      	b.n	80002ba <__udivmoddi4+0xa2>
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f000 8090 	beq.w	800041a <__udivmoddi4+0x202>
 80002fa:	fab2 f682 	clz	r6, r2
 80002fe:	2e00      	cmp	r6, #0
 8000300:	f040 80a4 	bne.w	800044c <__udivmoddi4+0x234>
 8000304:	1a8a      	subs	r2, r1, r2
 8000306:	0c03      	lsrs	r3, r0, #16
 8000308:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800030c:	b280      	uxth	r0, r0
 800030e:	b2bc      	uxth	r4, r7
 8000310:	2101      	movs	r1, #1
 8000312:	fbb2 fcfe 	udiv	ip, r2, lr
 8000316:	fb0e 221c 	mls	r2, lr, ip, r2
 800031a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800031e:	fb04 f20c 	mul.w	r2, r4, ip
 8000322:	429a      	cmp	r2, r3
 8000324:	d907      	bls.n	8000336 <__udivmoddi4+0x11e>
 8000326:	18fb      	adds	r3, r7, r3
 8000328:	f10c 38ff 	add.w	r8, ip, #4294967295
 800032c:	d202      	bcs.n	8000334 <__udivmoddi4+0x11c>
 800032e:	429a      	cmp	r2, r3
 8000330:	f200 80e0 	bhi.w	80004f4 <__udivmoddi4+0x2dc>
 8000334:	46c4      	mov	ip, r8
 8000336:	1a9b      	subs	r3, r3, r2
 8000338:	fbb3 f2fe 	udiv	r2, r3, lr
 800033c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000340:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000344:	fb02 f404 	mul.w	r4, r2, r4
 8000348:	429c      	cmp	r4, r3
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x144>
 800034c:	18fb      	adds	r3, r7, r3
 800034e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x142>
 8000354:	429c      	cmp	r4, r3
 8000356:	f200 80ca 	bhi.w	80004ee <__udivmoddi4+0x2d6>
 800035a:	4602      	mov	r2, r0
 800035c:	1b1b      	subs	r3, r3, r4
 800035e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000362:	e7a5      	b.n	80002b0 <__udivmoddi4+0x98>
 8000364:	f1c1 0620 	rsb	r6, r1, #32
 8000368:	408b      	lsls	r3, r1
 800036a:	fa22 f706 	lsr.w	r7, r2, r6
 800036e:	431f      	orrs	r7, r3
 8000370:	fa0e f401 	lsl.w	r4, lr, r1
 8000374:	fa20 f306 	lsr.w	r3, r0, r6
 8000378:	fa2e fe06 	lsr.w	lr, lr, r6
 800037c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000380:	4323      	orrs	r3, r4
 8000382:	fa00 f801 	lsl.w	r8, r0, r1
 8000386:	fa1f fc87 	uxth.w	ip, r7
 800038a:	fbbe f0f9 	udiv	r0, lr, r9
 800038e:	0c1c      	lsrs	r4, r3, #16
 8000390:	fb09 ee10 	mls	lr, r9, r0, lr
 8000394:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000398:	fb00 fe0c 	mul.w	lr, r0, ip
 800039c:	45a6      	cmp	lr, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x1a0>
 80003a4:	193c      	adds	r4, r7, r4
 80003a6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003aa:	f080 809c 	bcs.w	80004e6 <__udivmoddi4+0x2ce>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f240 8099 	bls.w	80004e6 <__udivmoddi4+0x2ce>
 80003b4:	3802      	subs	r0, #2
 80003b6:	443c      	add	r4, r7
 80003b8:	eba4 040e 	sub.w	r4, r4, lr
 80003bc:	fa1f fe83 	uxth.w	lr, r3
 80003c0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c4:	fb09 4413 	mls	r4, r9, r3, r4
 80003c8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003cc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d0:	45a4      	cmp	ip, r4
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1ce>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003da:	f080 8082 	bcs.w	80004e2 <__udivmoddi4+0x2ca>
 80003de:	45a4      	cmp	ip, r4
 80003e0:	d97f      	bls.n	80004e2 <__udivmoddi4+0x2ca>
 80003e2:	3b02      	subs	r3, #2
 80003e4:	443c      	add	r4, r7
 80003e6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	fba0 ec02 	umull	lr, ip, r0, r2
 80003f2:	4564      	cmp	r4, ip
 80003f4:	4673      	mov	r3, lr
 80003f6:	46e1      	mov	r9, ip
 80003f8:	d362      	bcc.n	80004c0 <__udivmoddi4+0x2a8>
 80003fa:	d05f      	beq.n	80004bc <__udivmoddi4+0x2a4>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x1fe>
 80003fe:	ebb8 0203 	subs.w	r2, r8, r3
 8000402:	eb64 0409 	sbc.w	r4, r4, r9
 8000406:	fa04 f606 	lsl.w	r6, r4, r6
 800040a:	fa22 f301 	lsr.w	r3, r2, r1
 800040e:	431e      	orrs	r6, r3
 8000410:	40cc      	lsrs	r4, r1
 8000412:	e9c5 6400 	strd	r6, r4, [r5]
 8000416:	2100      	movs	r1, #0
 8000418:	e74f      	b.n	80002ba <__udivmoddi4+0xa2>
 800041a:	fbb1 fcf2 	udiv	ip, r1, r2
 800041e:	0c01      	lsrs	r1, r0, #16
 8000420:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000424:	b280      	uxth	r0, r0
 8000426:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800042a:	463b      	mov	r3, r7
 800042c:	4638      	mov	r0, r7
 800042e:	463c      	mov	r4, r7
 8000430:	46b8      	mov	r8, r7
 8000432:	46be      	mov	lr, r7
 8000434:	2620      	movs	r6, #32
 8000436:	fbb1 f1f7 	udiv	r1, r1, r7
 800043a:	eba2 0208 	sub.w	r2, r2, r8
 800043e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000442:	e766      	b.n	8000312 <__udivmoddi4+0xfa>
 8000444:	4601      	mov	r1, r0
 8000446:	e718      	b.n	800027a <__udivmoddi4+0x62>
 8000448:	4610      	mov	r0, r2
 800044a:	e72c      	b.n	80002a6 <__udivmoddi4+0x8e>
 800044c:	f1c6 0220 	rsb	r2, r6, #32
 8000450:	fa2e f302 	lsr.w	r3, lr, r2
 8000454:	40b7      	lsls	r7, r6
 8000456:	40b1      	lsls	r1, r6
 8000458:	fa20 f202 	lsr.w	r2, r0, r2
 800045c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000460:	430a      	orrs	r2, r1
 8000462:	fbb3 f8fe 	udiv	r8, r3, lr
 8000466:	b2bc      	uxth	r4, r7
 8000468:	fb0e 3318 	mls	r3, lr, r8, r3
 800046c:	0c11      	lsrs	r1, r2, #16
 800046e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000472:	fb08 f904 	mul.w	r9, r8, r4
 8000476:	40b0      	lsls	r0, r6
 8000478:	4589      	cmp	r9, r1
 800047a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800047e:	b280      	uxth	r0, r0
 8000480:	d93e      	bls.n	8000500 <__udivmoddi4+0x2e8>
 8000482:	1879      	adds	r1, r7, r1
 8000484:	f108 3cff 	add.w	ip, r8, #4294967295
 8000488:	d201      	bcs.n	800048e <__udivmoddi4+0x276>
 800048a:	4589      	cmp	r9, r1
 800048c:	d81f      	bhi.n	80004ce <__udivmoddi4+0x2b6>
 800048e:	eba1 0109 	sub.w	r1, r1, r9
 8000492:	fbb1 f9fe 	udiv	r9, r1, lr
 8000496:	fb09 f804 	mul.w	r8, r9, r4
 800049a:	fb0e 1119 	mls	r1, lr, r9, r1
 800049e:	b292      	uxth	r2, r2
 80004a0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a4:	4542      	cmp	r2, r8
 80004a6:	d229      	bcs.n	80004fc <__udivmoddi4+0x2e4>
 80004a8:	18ba      	adds	r2, r7, r2
 80004aa:	f109 31ff 	add.w	r1, r9, #4294967295
 80004ae:	d2c4      	bcs.n	800043a <__udivmoddi4+0x222>
 80004b0:	4542      	cmp	r2, r8
 80004b2:	d2c2      	bcs.n	800043a <__udivmoddi4+0x222>
 80004b4:	f1a9 0102 	sub.w	r1, r9, #2
 80004b8:	443a      	add	r2, r7
 80004ba:	e7be      	b.n	800043a <__udivmoddi4+0x222>
 80004bc:	45f0      	cmp	r8, lr
 80004be:	d29d      	bcs.n	80003fc <__udivmoddi4+0x1e4>
 80004c0:	ebbe 0302 	subs.w	r3, lr, r2
 80004c4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004c8:	3801      	subs	r0, #1
 80004ca:	46e1      	mov	r9, ip
 80004cc:	e796      	b.n	80003fc <__udivmoddi4+0x1e4>
 80004ce:	eba7 0909 	sub.w	r9, r7, r9
 80004d2:	4449      	add	r1, r9
 80004d4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004d8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004dc:	fb09 f804 	mul.w	r8, r9, r4
 80004e0:	e7db      	b.n	800049a <__udivmoddi4+0x282>
 80004e2:	4673      	mov	r3, lr
 80004e4:	e77f      	b.n	80003e6 <__udivmoddi4+0x1ce>
 80004e6:	4650      	mov	r0, sl
 80004e8:	e766      	b.n	80003b8 <__udivmoddi4+0x1a0>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e6fd      	b.n	80002ea <__udivmoddi4+0xd2>
 80004ee:	443b      	add	r3, r7
 80004f0:	3a02      	subs	r2, #2
 80004f2:	e733      	b.n	800035c <__udivmoddi4+0x144>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	443b      	add	r3, r7
 80004fa:	e71c      	b.n	8000336 <__udivmoddi4+0x11e>
 80004fc:	4649      	mov	r1, r9
 80004fe:	e79c      	b.n	800043a <__udivmoddi4+0x222>
 8000500:	eba1 0109 	sub.w	r1, r1, r9
 8000504:	46c4      	mov	ip, r8
 8000506:	fbb1 f9fe 	udiv	r9, r1, lr
 800050a:	fb09 f804 	mul.w	r8, r9, r4
 800050e:	e7c4      	b.n	800049a <__udivmoddi4+0x282>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
UART_HandleTypeDef huart1 = {0};

extern char data[100];

int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
	HAL_Init();
 8000518:	f000 f9ae 	bl	8000878 <HAL_Init>

	SystemClock_Config();
 800051c:	f000 f806 	bl	800052c <SystemClock_Config>
	GPIO_Init();
 8000520:	f000 f87c 	bl	800061c <GPIO_Init>
	USART1_UART_Init();
 8000524:	f000 f850 	bl	80005c8 <USART1_UART_Init>

	//HAL_Delay(100);

	while(1)
	{
		__WFI();
 8000528:	bf30      	wfi
 800052a:	e7fd      	b.n	8000528 <main+0x14>

0800052c <SystemClock_Config>:
	}
}

void SystemClock_Config(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b092      	sub	sp, #72	@ 0x48
 8000530:	af00      	add	r7, sp, #0
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000532:	2300      	movs	r3, #0
 8000534:	603b      	str	r3, [r7, #0]
 8000536:	4b23      	ldr	r3, [pc, #140]	@ (80005c4 <SystemClock_Config+0x98>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800053e:	4a21      	ldr	r2, [pc, #132]	@ (80005c4 <SystemClock_Config+0x98>)
 8000540:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000544:	6013      	str	r3, [r2, #0]
 8000546:	4b1f      	ldr	r3, [pc, #124]	@ (80005c4 <SystemClock_Config+0x98>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800054e:	603b      	str	r3, [r7, #0]
 8000550:	683b      	ldr	r3, [r7, #0]

	RCC_OscInitTypeDef osc_init = {0};
 8000552:	f107 0318 	add.w	r3, r7, #24
 8000556:	2230      	movs	r2, #48	@ 0x30
 8000558:	2100      	movs	r1, #0
 800055a:	4618      	mov	r0, r3
 800055c:	f001 fd50 	bl	8002000 <memset>

	osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000560:	2302      	movs	r3, #2
 8000562:	61bb      	str	r3, [r7, #24]
	osc_init.HSIState = RCC_HSI_ON;
 8000564:	2301      	movs	r3, #1
 8000566:	627b      	str	r3, [r7, #36]	@ 0x24
	osc_init.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000568:	2310      	movs	r3, #16
 800056a:	62bb      	str	r3, [r7, #40]	@ 0x28
	osc_init.PLL.PLLState = RCC_PLL_NONE;
 800056c:	2300      	movs	r3, #0
 800056e:	633b      	str	r3, [r7, #48]	@ 0x30

	if(HAL_RCC_OscConfig(&osc_init) != HAL_OK)
 8000570:	f107 0318 	add.w	r3, r7, #24
 8000574:	4618      	mov	r0, r3
 8000576:	f000 fc9f 	bl	8000eb8 <HAL_RCC_OscConfig>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <SystemClock_Config+0x58>
		Error_Handler();
 8000580:	f000 f87e 	bl	8000680 <Error_Handler>

	RCC_ClkInitTypeDef clk_init = {0};
 8000584:	1d3b      	adds	r3, r7, #4
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]
 800058e:	60da      	str	r2, [r3, #12]
 8000590:	611a      	str	r2, [r3, #16]

	clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK |
 8000592:	230f      	movs	r3, #15
 8000594:	607b      	str	r3, [r7, #4]
						RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000596:	2300      	movs	r3, #0
 8000598:	60bb      	str	r3, [r7, #8]
	clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059a:	2300      	movs	r3, #0
 800059c:	60fb      	str	r3, [r7, #12]
	clk_init.APB1CLKDivider = RCC_HCLK_DIV1;
 800059e:	2300      	movs	r3, #0
 80005a0:	613b      	str	r3, [r7, #16]
	clk_init.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a2:	2300      	movs	r3, #0
 80005a4:	617b      	str	r3, [r7, #20]

	if(HAL_RCC_ClockConfig(&clk_init, FLASH_ACR_LATENCY_0WS))
 80005a6:	1d3b      	adds	r3, r7, #4
 80005a8:	2100      	movs	r1, #0
 80005aa:	4618      	mov	r0, r3
 80005ac:	f000 fefc 	bl	80013a8 <HAL_RCC_ClockConfig>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <SystemClock_Config+0x8e>
		Error_Handler();
 80005b6:	f000 f863 	bl	8000680 <Error_Handler>
}
 80005ba:	bf00      	nop
 80005bc:	3748      	adds	r7, #72	@ 0x48
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	40007000 	.word	0x40007000

080005c8 <USART1_UART_Init>:

static void USART1_UART_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
	huart1.Instance = USART1;
 80005cc:	4b11      	ldr	r3, [pc, #68]	@ (8000614 <USART1_UART_Init+0x4c>)
 80005ce:	4a12      	ldr	r2, [pc, #72]	@ (8000618 <USART1_UART_Init+0x50>)
 80005d0:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 460800;
 80005d2:	4b10      	ldr	r3, [pc, #64]	@ (8000614 <USART1_UART_Init+0x4c>)
 80005d4:	f44f 22e1 	mov.w	r2, #460800	@ 0x70800
 80005d8:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005da:	4b0e      	ldr	r3, [pc, #56]	@ (8000614 <USART1_UART_Init+0x4c>)
 80005dc:	2200      	movs	r2, #0
 80005de:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80005e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000614 <USART1_UART_Init+0x4c>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80005e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000614 <USART1_UART_Init+0x4c>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX;
 80005ec:	4b09      	ldr	r3, [pc, #36]	@ (8000614 <USART1_UART_Init+0x4c>)
 80005ee:	2208      	movs	r2, #8
 80005f0:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005f2:	4b08      	ldr	r3, [pc, #32]	@ (8000614 <USART1_UART_Init+0x4c>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005f8:	4b06      	ldr	r3, [pc, #24]	@ (8000614 <USART1_UART_Init+0x4c>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	61da      	str	r2, [r3, #28]

	if(HAL_UART_Init(&huart1) != HAL_OK)
 80005fe:	4805      	ldr	r0, [pc, #20]	@ (8000614 <USART1_UART_Init+0x4c>)
 8000600:	f001 f8f2 	bl	80017e8 <HAL_UART_Init>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <USART1_UART_Init+0x46>
		Error_Handler();
 800060a:	f000 f839 	bl	8000680 <Error_Handler>
}
 800060e:	bf00      	nop
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	2000008c 	.word	0x2000008c
 8000618:	40011000 	.word	0x40011000

0800061c <GPIO_Init>:

static void GPIO_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b086      	sub	sp, #24
 8000620:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000622:	2300      	movs	r3, #0
 8000624:	603b      	str	r3, [r7, #0]
 8000626:	4b14      	ldr	r3, [pc, #80]	@ (8000678 <GPIO_Init+0x5c>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062a:	4a13      	ldr	r2, [pc, #76]	@ (8000678 <GPIO_Init+0x5c>)
 800062c:	f043 0301 	orr.w	r3, r3, #1
 8000630:	6313      	str	r3, [r2, #48]	@ 0x30
 8000632:	4b11      	ldr	r3, [pc, #68]	@ (8000678 <GPIO_Init+0x5c>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000636:	f003 0301 	and.w	r3, r3, #1
 800063a:	603b      	str	r3, [r7, #0]
 800063c:	683b      	ldr	r3, [r7, #0]

	GPIO_InitTypeDef gpio_init = {0};
 800063e:	1d3b      	adds	r3, r7, #4
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]

	gpio_init.Pin = GPIO_PIN_0;
 800064c:	2301      	movs	r3, #1
 800064e:	607b      	str	r3, [r7, #4]
	gpio_init.Mode = GPIO_MODE_IT_RISING;
 8000650:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000654:	60bb      	str	r3, [r7, #8]
	gpio_init.Pull = GPIO_PULLDOWN;
 8000656:	2302      	movs	r3, #2
 8000658:	60fb      	str	r3, [r7, #12]
	gpio_init.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800065a:	2301      	movs	r3, #1
 800065c:	613b      	str	r3, [r7, #16]

	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800065e:	2006      	movs	r0, #6
 8000660:	f000 fa73 	bl	8000b4a <HAL_NVIC_EnableIRQ>

	HAL_GPIO_Init(GPIOA, &gpio_init);
 8000664:	1d3b      	adds	r3, r7, #4
 8000666:	4619      	mov	r1, r3
 8000668:	4804      	ldr	r0, [pc, #16]	@ (800067c <GPIO_Init+0x60>)
 800066a:	f000 fa89 	bl	8000b80 <HAL_GPIO_Init>
}
 800066e:	bf00      	nop
 8000670:	3718      	adds	r7, #24
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	40023800 	.word	0x40023800
 800067c:	40020000 	.word	0x40020000

08000680 <Error_Handler>:

void Error_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000684:	b672      	cpsid	i
}
 8000686:	bf00      	nop
	__disable_irq();
	while(1);
 8000688:	bf00      	nop
 800068a:	e7fd      	b.n	8000688 <Error_Handler+0x8>

0800068c <HAL_GPIO_EXTI_Callback>:
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	80fb      	strh	r3, [r7, #6]
	HAL_UART_Transmit(&huart1, (uint8_t *) data, (uint16_t) strlen(data), HAL_MAX_DELAY);
 8000696:	4807      	ldr	r0, [pc, #28]	@ (80006b4 <HAL_GPIO_EXTI_Callback+0x28>)
 8000698:	f7ff fd9e 	bl	80001d8 <strlen>
 800069c:	4603      	mov	r3, r0
 800069e:	b29a      	uxth	r2, r3
 80006a0:	f04f 33ff 	mov.w	r3, #4294967295
 80006a4:	4903      	ldr	r1, [pc, #12]	@ (80006b4 <HAL_GPIO_EXTI_Callback+0x28>)
 80006a6:	4804      	ldr	r0, [pc, #16]	@ (80006b8 <HAL_GPIO_EXTI_Callback+0x2c>)
 80006a8:	f001 f8ee 	bl	8001888 <HAL_UART_Transmit>
}
 80006ac:	bf00      	nop
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20000000 	.word	0x20000000
 80006b8:	2000008c 	.word	0x2000008c

080006bc <HAL_MspInit>:
#include "main.h"

void HAL_MspInit(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	4b10      	ldr	r3, [pc, #64]	@ (8000708 <HAL_MspInit+0x4c>)
 80006c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006ca:	4a0f      	ldr	r2, [pc, #60]	@ (8000708 <HAL_MspInit+0x4c>)
 80006cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80006d2:	4b0d      	ldr	r3, [pc, #52]	@ (8000708 <HAL_MspInit+0x4c>)
 80006d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_PWR_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	603b      	str	r3, [r7, #0]
 80006e2:	4b09      	ldr	r3, [pc, #36]	@ (8000708 <HAL_MspInit+0x4c>)
 80006e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e6:	4a08      	ldr	r2, [pc, #32]	@ (8000708 <HAL_MspInit+0x4c>)
 80006e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80006ee:	4b06      	ldr	r3, [pc, #24]	@ (8000708 <HAL_MspInit+0x4c>)
 80006f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006f6:	603b      	str	r3, [r7, #0]
 80006f8:	683b      	ldr	r3, [r7, #0]

	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006fa:	2003      	movs	r0, #3
 80006fc:	f000 f9fe 	bl	8000afc <HAL_NVIC_SetPriorityGrouping>
}
 8000700:	bf00      	nop
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40023800 	.word	0x40023800

0800070c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b08a      	sub	sp, #40	@ 0x28
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
	__HAL_RCC_USART1_CLK_ENABLE();
 8000714:	2300      	movs	r3, #0
 8000716:	613b      	str	r3, [r7, #16]
 8000718:	4b20      	ldr	r3, [pc, #128]	@ (800079c <HAL_UART_MspInit+0x90>)
 800071a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800071c:	4a1f      	ldr	r2, [pc, #124]	@ (800079c <HAL_UART_MspInit+0x90>)
 800071e:	f043 0310 	orr.w	r3, r3, #16
 8000722:	6453      	str	r3, [r2, #68]	@ 0x44
 8000724:	4b1d      	ldr	r3, [pc, #116]	@ (800079c <HAL_UART_MspInit+0x90>)
 8000726:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000728:	f003 0310 	and.w	r3, r3, #16
 800072c:	613b      	str	r3, [r7, #16]
 800072e:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_USART1_CLK_SLEEP_DISABLE();
 8000730:	4b1a      	ldr	r3, [pc, #104]	@ (800079c <HAL_UART_MspInit+0x90>)
 8000732:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8000734:	4a19      	ldr	r2, [pc, #100]	@ (800079c <HAL_UART_MspInit+0x90>)
 8000736:	f023 0310 	bic.w	r3, r3, #16
 800073a:	6653      	str	r3, [r2, #100]	@ 0x64
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800073c:	2300      	movs	r3, #0
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	4b16      	ldr	r3, [pc, #88]	@ (800079c <HAL_UART_MspInit+0x90>)
 8000742:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000744:	4a15      	ldr	r2, [pc, #84]	@ (800079c <HAL_UART_MspInit+0x90>)
 8000746:	f043 0302 	orr.w	r3, r3, #2
 800074a:	6313      	str	r3, [r2, #48]	@ 0x30
 800074c:	4b13      	ldr	r3, [pc, #76]	@ (800079c <HAL_UART_MspInit+0x90>)
 800074e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000750:	f003 0302 	and.w	r3, r3, #2
 8000754:	60fb      	str	r3, [r7, #12]
 8000756:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_SLEEP_DISABLE();
 8000758:	4b10      	ldr	r3, [pc, #64]	@ (800079c <HAL_UART_MspInit+0x90>)
 800075a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800075c:	4a0f      	ldr	r2, [pc, #60]	@ (800079c <HAL_UART_MspInit+0x90>)
 800075e:	f023 0302 	bic.w	r3, r3, #2
 8000762:	6513      	str	r3, [r2, #80]	@ 0x50

	GPIO_InitTypeDef uart_gpio = {0};
 8000764:	f107 0314 	add.w	r3, r7, #20
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	60da      	str	r2, [r3, #12]
 8000772:	611a      	str	r2, [r3, #16]

	uart_gpio.Pin = GPIO_PIN_6;
 8000774:	2340      	movs	r3, #64	@ 0x40
 8000776:	617b      	str	r3, [r7, #20]
	uart_gpio.Mode = GPIO_MODE_AF_PP;
 8000778:	2302      	movs	r3, #2
 800077a:	61bb      	str	r3, [r7, #24]
	uart_gpio.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	61fb      	str	r3, [r7, #28]
	uart_gpio.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000780:	2301      	movs	r3, #1
 8000782:	623b      	str	r3, [r7, #32]
	uart_gpio.Alternate = GPIO_AF7_USART1;
 8000784:	2307      	movs	r3, #7
 8000786:	627b      	str	r3, [r7, #36]	@ 0x24

	HAL_GPIO_Init(GPIOB, &uart_gpio);
 8000788:	f107 0314 	add.w	r3, r7, #20
 800078c:	4619      	mov	r1, r3
 800078e:	4804      	ldr	r0, [pc, #16]	@ (80007a0 <HAL_UART_MspInit+0x94>)
 8000790:	f000 f9f6 	bl	8000b80 <HAL_GPIO_Init>
}
 8000794:	bf00      	nop
 8000796:	3728      	adds	r7, #40	@ 0x28
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40023800 	.word	0x40023800
 80007a0:	40020400 	.word	0x40020400

080007a4 <NMI_Handler>:
#include "main.h"
#include "stm32f4xx_it.h"

void NMI_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
	while(1);
 80007a8:	bf00      	nop
 80007aa:	e7fd      	b.n	80007a8 <NMI_Handler+0x4>

080007ac <HardFault_Handler>:
}

void HardFault_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
	while(1);
 80007b0:	bf00      	nop
 80007b2:	e7fd      	b.n	80007b0 <HardFault_Handler+0x4>

080007b4 <MemManage_Handler>:
}


void MemManage_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
	while(1);
 80007b8:	bf00      	nop
 80007ba:	e7fd      	b.n	80007b8 <MemManage_Handler+0x4>

080007bc <BusFault_Handler>:
}

void BusFault_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
	while(1);
 80007c0:	bf00      	nop
 80007c2:	e7fd      	b.n	80007c0 <BusFault_Handler+0x4>

080007c4 <UsageFault_Handler>:
}

void UsageFault_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
	while(1);
 80007c8:	bf00      	nop
 80007ca:	e7fd      	b.n	80007c8 <UsageFault_Handler+0x4>

080007cc <SVC_Handler>:
}

void SVC_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
	while(1);
 80007d0:	bf00      	nop
 80007d2:	e7fd      	b.n	80007d0 <SVC_Handler+0x4>

080007d4 <DebugMon_Handler>:
}

void DebugMon_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
	while(1);
 80007d8:	bf00      	nop
 80007da:	e7fd      	b.n	80007d8 <DebugMon_Handler+0x4>

080007dc <PendSV_Handler>:
}

void PendSV_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
	while(1);
 80007e0:	bf00      	nop
 80007e2:	e7fd      	b.n	80007e0 <PendSV_Handler+0x4>

080007e4 <SysTick_Handler>:
}

void SysTick_Handler(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80007e8:	f000 f898 	bl	800091c <HAL_IncTick>
}
 80007ec:	bf00      	nop
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80007f4:	2001      	movs	r0, #1
 80007f6:	f000 fb47 	bl	8000e88 <HAL_GPIO_EXTI_IRQHandler>
}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
	...

08000800 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000804:	4b06      	ldr	r3, [pc, #24]	@ (8000820 <SystemInit+0x20>)
 8000806:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800080a:	4a05      	ldr	r2, [pc, #20]	@ (8000820 <SystemInit+0x20>)
 800080c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000810:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000814:	bf00      	nop
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	e000ed00 	.word	0xe000ed00

08000824 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000824:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800085c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000828:	f7ff ffea 	bl	8000800 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800082c:	480c      	ldr	r0, [pc, #48]	@ (8000860 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800082e:	490d      	ldr	r1, [pc, #52]	@ (8000864 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000830:	4a0d      	ldr	r2, [pc, #52]	@ (8000868 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000832:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000834:	e002      	b.n	800083c <LoopCopyDataInit>

08000836 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000836:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000838:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800083a:	3304      	adds	r3, #4

0800083c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800083c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800083e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000840:	d3f9      	bcc.n	8000836 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000842:	4a0a      	ldr	r2, [pc, #40]	@ (800086c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000844:	4c0a      	ldr	r4, [pc, #40]	@ (8000870 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000846:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000848:	e001      	b.n	800084e <LoopFillZerobss>

0800084a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800084a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800084c:	3204      	adds	r2, #4

0800084e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800084e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000850:	d3fb      	bcc.n	800084a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000852:	f001 fbdd 	bl	8002010 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000856:	f7ff fe5d 	bl	8000514 <main>
  bx  lr    
 800085a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800085c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000860:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000864:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000868:	08002098 	.word	0x08002098
  ldr r2, =_sbss
 800086c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000870:	200000d8 	.word	0x200000d8

08000874 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000874:	e7fe      	b.n	8000874 <ADC_IRQHandler>
	...

08000878 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800087c:	4b0e      	ldr	r3, [pc, #56]	@ (80008b8 <HAL_Init+0x40>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a0d      	ldr	r2, [pc, #52]	@ (80008b8 <HAL_Init+0x40>)
 8000882:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000886:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000888:	4b0b      	ldr	r3, [pc, #44]	@ (80008b8 <HAL_Init+0x40>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a0a      	ldr	r2, [pc, #40]	@ (80008b8 <HAL_Init+0x40>)
 800088e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000892:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000894:	4b08      	ldr	r3, [pc, #32]	@ (80008b8 <HAL_Init+0x40>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a07      	ldr	r2, [pc, #28]	@ (80008b8 <HAL_Init+0x40>)
 800089a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800089e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008a0:	2003      	movs	r0, #3
 80008a2:	f000 f92b 	bl	8000afc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008a6:	2000      	movs	r0, #0
 80008a8:	f000 f808 	bl	80008bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008ac:	f7ff ff06 	bl	80006bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008b0:	2300      	movs	r3, #0
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40023c00 	.word	0x40023c00

080008bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008c4:	4b12      	ldr	r3, [pc, #72]	@ (8000910 <HAL_InitTick+0x54>)
 80008c6:	681a      	ldr	r2, [r3, #0]
 80008c8:	4b12      	ldr	r3, [pc, #72]	@ (8000914 <HAL_InitTick+0x58>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	4619      	mov	r1, r3
 80008ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80008d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008da:	4618      	mov	r0, r3
 80008dc:	f000 f943 	bl	8000b66 <HAL_SYSTICK_Config>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008e6:	2301      	movs	r3, #1
 80008e8:	e00e      	b.n	8000908 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	2b0f      	cmp	r3, #15
 80008ee:	d80a      	bhi.n	8000906 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008f0:	2200      	movs	r2, #0
 80008f2:	6879      	ldr	r1, [r7, #4]
 80008f4:	f04f 30ff 	mov.w	r0, #4294967295
 80008f8:	f000 f90b 	bl	8000b12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008fc:	4a06      	ldr	r2, [pc, #24]	@ (8000918 <HAL_InitTick+0x5c>)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000902:	2300      	movs	r3, #0
 8000904:	e000      	b.n	8000908 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000906:	2301      	movs	r3, #1
}
 8000908:	4618      	mov	r0, r3
 800090a:	3708      	adds	r7, #8
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	20000064 	.word	0x20000064
 8000914:	2000006c 	.word	0x2000006c
 8000918:	20000068 	.word	0x20000068

0800091c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000920:	4b06      	ldr	r3, [pc, #24]	@ (800093c <HAL_IncTick+0x20>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	461a      	mov	r2, r3
 8000926:	4b06      	ldr	r3, [pc, #24]	@ (8000940 <HAL_IncTick+0x24>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4413      	add	r3, r2
 800092c:	4a04      	ldr	r2, [pc, #16]	@ (8000940 <HAL_IncTick+0x24>)
 800092e:	6013      	str	r3, [r2, #0]
}
 8000930:	bf00      	nop
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	2000006c 	.word	0x2000006c
 8000940:	200000d4 	.word	0x200000d4

08000944 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  return uwTick;
 8000948:	4b03      	ldr	r3, [pc, #12]	@ (8000958 <HAL_GetTick+0x14>)
 800094a:	681b      	ldr	r3, [r3, #0]
}
 800094c:	4618      	mov	r0, r3
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	200000d4 	.word	0x200000d4

0800095c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800095c:	b480      	push	{r7}
 800095e:	b085      	sub	sp, #20
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	f003 0307 	and.w	r3, r3, #7
 800096a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800096c:	4b0c      	ldr	r3, [pc, #48]	@ (80009a0 <__NVIC_SetPriorityGrouping+0x44>)
 800096e:	68db      	ldr	r3, [r3, #12]
 8000970:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000972:	68ba      	ldr	r2, [r7, #8]
 8000974:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000978:	4013      	ands	r3, r2
 800097a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000984:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000988:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800098c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800098e:	4a04      	ldr	r2, [pc, #16]	@ (80009a0 <__NVIC_SetPriorityGrouping+0x44>)
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	60d3      	str	r3, [r2, #12]
}
 8000994:	bf00      	nop
 8000996:	3714      	adds	r7, #20
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr
 80009a0:	e000ed00 	.word	0xe000ed00

080009a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009a8:	4b04      	ldr	r3, [pc, #16]	@ (80009bc <__NVIC_GetPriorityGrouping+0x18>)
 80009aa:	68db      	ldr	r3, [r3, #12]
 80009ac:	0a1b      	lsrs	r3, r3, #8
 80009ae:	f003 0307 	and.w	r3, r3, #7
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr
 80009bc:	e000ed00 	.word	0xe000ed00

080009c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	db0b      	blt.n	80009ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009d2:	79fb      	ldrb	r3, [r7, #7]
 80009d4:	f003 021f 	and.w	r2, r3, #31
 80009d8:	4907      	ldr	r1, [pc, #28]	@ (80009f8 <__NVIC_EnableIRQ+0x38>)
 80009da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009de:	095b      	lsrs	r3, r3, #5
 80009e0:	2001      	movs	r0, #1
 80009e2:	fa00 f202 	lsl.w	r2, r0, r2
 80009e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80009ea:	bf00      	nop
 80009ec:	370c      	adds	r7, #12
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	e000e100 	.word	0xe000e100

080009fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	6039      	str	r1, [r7, #0]
 8000a06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	db0a      	blt.n	8000a26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	b2da      	uxtb	r2, r3
 8000a14:	490c      	ldr	r1, [pc, #48]	@ (8000a48 <__NVIC_SetPriority+0x4c>)
 8000a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1a:	0112      	lsls	r2, r2, #4
 8000a1c:	b2d2      	uxtb	r2, r2
 8000a1e:	440b      	add	r3, r1
 8000a20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a24:	e00a      	b.n	8000a3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	b2da      	uxtb	r2, r3
 8000a2a:	4908      	ldr	r1, [pc, #32]	@ (8000a4c <__NVIC_SetPriority+0x50>)
 8000a2c:	79fb      	ldrb	r3, [r7, #7]
 8000a2e:	f003 030f 	and.w	r3, r3, #15
 8000a32:	3b04      	subs	r3, #4
 8000a34:	0112      	lsls	r2, r2, #4
 8000a36:	b2d2      	uxtb	r2, r2
 8000a38:	440b      	add	r3, r1
 8000a3a:	761a      	strb	r2, [r3, #24]
}
 8000a3c:	bf00      	nop
 8000a3e:	370c      	adds	r7, #12
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr
 8000a48:	e000e100 	.word	0xe000e100
 8000a4c:	e000ed00 	.word	0xe000ed00

08000a50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b089      	sub	sp, #36	@ 0x24
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	60f8      	str	r0, [r7, #12]
 8000a58:	60b9      	str	r1, [r7, #8]
 8000a5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	f003 0307 	and.w	r3, r3, #7
 8000a62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a64:	69fb      	ldr	r3, [r7, #28]
 8000a66:	f1c3 0307 	rsb	r3, r3, #7
 8000a6a:	2b04      	cmp	r3, #4
 8000a6c:	bf28      	it	cs
 8000a6e:	2304      	movcs	r3, #4
 8000a70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a72:	69fb      	ldr	r3, [r7, #28]
 8000a74:	3304      	adds	r3, #4
 8000a76:	2b06      	cmp	r3, #6
 8000a78:	d902      	bls.n	8000a80 <NVIC_EncodePriority+0x30>
 8000a7a:	69fb      	ldr	r3, [r7, #28]
 8000a7c:	3b03      	subs	r3, #3
 8000a7e:	e000      	b.n	8000a82 <NVIC_EncodePriority+0x32>
 8000a80:	2300      	movs	r3, #0
 8000a82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a84:	f04f 32ff 	mov.w	r2, #4294967295
 8000a88:	69bb      	ldr	r3, [r7, #24]
 8000a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8e:	43da      	mvns	r2, r3
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	401a      	ands	r2, r3
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a98:	f04f 31ff 	mov.w	r1, #4294967295
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa2:	43d9      	mvns	r1, r3
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa8:	4313      	orrs	r3, r2
         );
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3724      	adds	r7, #36	@ 0x24
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
	...

08000ab8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	3b01      	subs	r3, #1
 8000ac4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ac8:	d301      	bcc.n	8000ace <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aca:	2301      	movs	r3, #1
 8000acc:	e00f      	b.n	8000aee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ace:	4a0a      	ldr	r2, [pc, #40]	@ (8000af8 <SysTick_Config+0x40>)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	3b01      	subs	r3, #1
 8000ad4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ad6:	210f      	movs	r1, #15
 8000ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8000adc:	f7ff ff8e 	bl	80009fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ae0:	4b05      	ldr	r3, [pc, #20]	@ (8000af8 <SysTick_Config+0x40>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ae6:	4b04      	ldr	r3, [pc, #16]	@ (8000af8 <SysTick_Config+0x40>)
 8000ae8:	2207      	movs	r2, #7
 8000aea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000aec:	2300      	movs	r3, #0
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	e000e010 	.word	0xe000e010

08000afc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b04:	6878      	ldr	r0, [r7, #4]
 8000b06:	f7ff ff29 	bl	800095c <__NVIC_SetPriorityGrouping>
}
 8000b0a:	bf00      	nop
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b12:	b580      	push	{r7, lr}
 8000b14:	b086      	sub	sp, #24
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	4603      	mov	r3, r0
 8000b1a:	60b9      	str	r1, [r7, #8]
 8000b1c:	607a      	str	r2, [r7, #4]
 8000b1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b20:	2300      	movs	r3, #0
 8000b22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b24:	f7ff ff3e 	bl	80009a4 <__NVIC_GetPriorityGrouping>
 8000b28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b2a:	687a      	ldr	r2, [r7, #4]
 8000b2c:	68b9      	ldr	r1, [r7, #8]
 8000b2e:	6978      	ldr	r0, [r7, #20]
 8000b30:	f7ff ff8e 	bl	8000a50 <NVIC_EncodePriority>
 8000b34:	4602      	mov	r2, r0
 8000b36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b3a:	4611      	mov	r1, r2
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff ff5d 	bl	80009fc <__NVIC_SetPriority>
}
 8000b42:	bf00      	nop
 8000b44:	3718      	adds	r7, #24
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b082      	sub	sp, #8
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	4603      	mov	r3, r0
 8000b52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f7ff ff31 	bl	80009c0 <__NVIC_EnableIRQ>
}
 8000b5e:	bf00      	nop
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b082      	sub	sp, #8
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b6e:	6878      	ldr	r0, [r7, #4]
 8000b70:	f7ff ffa2 	bl	8000ab8 <SysTick_Config>
 8000b74:	4603      	mov	r3, r0
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
	...

08000b80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b089      	sub	sp, #36	@ 0x24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b92:	2300      	movs	r3, #0
 8000b94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b96:	2300      	movs	r3, #0
 8000b98:	61fb      	str	r3, [r7, #28]
 8000b9a:	e159      	b.n	8000e50 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	697a      	ldr	r2, [r7, #20]
 8000bac:	4013      	ands	r3, r2
 8000bae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000bb0:	693a      	ldr	r2, [r7, #16]
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	f040 8148 	bne.w	8000e4a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	f003 0303 	and.w	r3, r3, #3
 8000bc2:	2b01      	cmp	r3, #1
 8000bc4:	d005      	beq.n	8000bd2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bce:	2b02      	cmp	r3, #2
 8000bd0:	d130      	bne.n	8000c34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	689b      	ldr	r3, [r3, #8]
 8000bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000bd8:	69fb      	ldr	r3, [r7, #28]
 8000bda:	005b      	lsls	r3, r3, #1
 8000bdc:	2203      	movs	r2, #3
 8000bde:	fa02 f303 	lsl.w	r3, r2, r3
 8000be2:	43db      	mvns	r3, r3
 8000be4:	69ba      	ldr	r2, [r7, #24]
 8000be6:	4013      	ands	r3, r2
 8000be8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	68da      	ldr	r2, [r3, #12]
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	005b      	lsls	r3, r3, #1
 8000bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf6:	69ba      	ldr	r2, [r7, #24]
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	69ba      	ldr	r2, [r7, #24]
 8000c00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c08:	2201      	movs	r2, #1
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c10:	43db      	mvns	r3, r3
 8000c12:	69ba      	ldr	r2, [r7, #24]
 8000c14:	4013      	ands	r3, r2
 8000c16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	091b      	lsrs	r3, r3, #4
 8000c1e:	f003 0201 	and.w	r2, r3, #1
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	fa02 f303 	lsl.w	r3, r2, r3
 8000c28:	69ba      	ldr	r2, [r7, #24]
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	69ba      	ldr	r2, [r7, #24]
 8000c32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	f003 0303 	and.w	r3, r3, #3
 8000c3c:	2b03      	cmp	r3, #3
 8000c3e:	d017      	beq.n	8000c70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	2203      	movs	r2, #3
 8000c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c50:	43db      	mvns	r3, r3
 8000c52:	69ba      	ldr	r2, [r7, #24]
 8000c54:	4013      	ands	r3, r2
 8000c56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	689a      	ldr	r2, [r3, #8]
 8000c5c:	69fb      	ldr	r3, [r7, #28]
 8000c5e:	005b      	lsls	r3, r3, #1
 8000c60:	fa02 f303 	lsl.w	r3, r2, r3
 8000c64:	69ba      	ldr	r2, [r7, #24]
 8000c66:	4313      	orrs	r3, r2
 8000c68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	69ba      	ldr	r2, [r7, #24]
 8000c6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	f003 0303 	and.w	r3, r3, #3
 8000c78:	2b02      	cmp	r3, #2
 8000c7a:	d123      	bne.n	8000cc4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c7c:	69fb      	ldr	r3, [r7, #28]
 8000c7e:	08da      	lsrs	r2, r3, #3
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	3208      	adds	r2, #8
 8000c84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	f003 0307 	and.w	r3, r3, #7
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	220f      	movs	r2, #15
 8000c94:	fa02 f303 	lsl.w	r3, r2, r3
 8000c98:	43db      	mvns	r3, r3
 8000c9a:	69ba      	ldr	r2, [r7, #24]
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	691a      	ldr	r2, [r3, #16]
 8000ca4:	69fb      	ldr	r3, [r7, #28]
 8000ca6:	f003 0307 	and.w	r3, r3, #7
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb0:	69ba      	ldr	r2, [r7, #24]
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	08da      	lsrs	r2, r3, #3
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	3208      	adds	r2, #8
 8000cbe:	69b9      	ldr	r1, [r7, #24]
 8000cc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	005b      	lsls	r3, r3, #1
 8000cce:	2203      	movs	r2, #3
 8000cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd4:	43db      	mvns	r3, r3
 8000cd6:	69ba      	ldr	r2, [r7, #24]
 8000cd8:	4013      	ands	r3, r2
 8000cda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	f003 0203 	and.w	r2, r3, #3
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	69ba      	ldr	r2, [r7, #24]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	69ba      	ldr	r2, [r7, #24]
 8000cf6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	f000 80a2 	beq.w	8000e4a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	60fb      	str	r3, [r7, #12]
 8000d0a:	4b57      	ldr	r3, [pc, #348]	@ (8000e68 <HAL_GPIO_Init+0x2e8>)
 8000d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d0e:	4a56      	ldr	r2, [pc, #344]	@ (8000e68 <HAL_GPIO_Init+0x2e8>)
 8000d10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d14:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d16:	4b54      	ldr	r3, [pc, #336]	@ (8000e68 <HAL_GPIO_Init+0x2e8>)
 8000d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d22:	4a52      	ldr	r2, [pc, #328]	@ (8000e6c <HAL_GPIO_Init+0x2ec>)
 8000d24:	69fb      	ldr	r3, [r7, #28]
 8000d26:	089b      	lsrs	r3, r3, #2
 8000d28:	3302      	adds	r3, #2
 8000d2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	f003 0303 	and.w	r3, r3, #3
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	220f      	movs	r2, #15
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	43db      	mvns	r3, r3
 8000d40:	69ba      	ldr	r2, [r7, #24]
 8000d42:	4013      	ands	r3, r2
 8000d44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4a49      	ldr	r2, [pc, #292]	@ (8000e70 <HAL_GPIO_Init+0x2f0>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d019      	beq.n	8000d82 <HAL_GPIO_Init+0x202>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4a48      	ldr	r2, [pc, #288]	@ (8000e74 <HAL_GPIO_Init+0x2f4>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d013      	beq.n	8000d7e <HAL_GPIO_Init+0x1fe>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4a47      	ldr	r2, [pc, #284]	@ (8000e78 <HAL_GPIO_Init+0x2f8>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d00d      	beq.n	8000d7a <HAL_GPIO_Init+0x1fa>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4a46      	ldr	r2, [pc, #280]	@ (8000e7c <HAL_GPIO_Init+0x2fc>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d007      	beq.n	8000d76 <HAL_GPIO_Init+0x1f6>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4a45      	ldr	r2, [pc, #276]	@ (8000e80 <HAL_GPIO_Init+0x300>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d101      	bne.n	8000d72 <HAL_GPIO_Init+0x1f2>
 8000d6e:	2304      	movs	r3, #4
 8000d70:	e008      	b.n	8000d84 <HAL_GPIO_Init+0x204>
 8000d72:	2307      	movs	r3, #7
 8000d74:	e006      	b.n	8000d84 <HAL_GPIO_Init+0x204>
 8000d76:	2303      	movs	r3, #3
 8000d78:	e004      	b.n	8000d84 <HAL_GPIO_Init+0x204>
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	e002      	b.n	8000d84 <HAL_GPIO_Init+0x204>
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e000      	b.n	8000d84 <HAL_GPIO_Init+0x204>
 8000d82:	2300      	movs	r3, #0
 8000d84:	69fa      	ldr	r2, [r7, #28]
 8000d86:	f002 0203 	and.w	r2, r2, #3
 8000d8a:	0092      	lsls	r2, r2, #2
 8000d8c:	4093      	lsls	r3, r2
 8000d8e:	69ba      	ldr	r2, [r7, #24]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d94:	4935      	ldr	r1, [pc, #212]	@ (8000e6c <HAL_GPIO_Init+0x2ec>)
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	089b      	lsrs	r3, r3, #2
 8000d9a:	3302      	adds	r3, #2
 8000d9c:	69ba      	ldr	r2, [r7, #24]
 8000d9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000da2:	4b38      	ldr	r3, [pc, #224]	@ (8000e84 <HAL_GPIO_Init+0x304>)
 8000da4:	689b      	ldr	r3, [r3, #8]
 8000da6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000da8:	693b      	ldr	r3, [r7, #16]
 8000daa:	43db      	mvns	r3, r3
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	4013      	ands	r3, r2
 8000db0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d003      	beq.n	8000dc6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000dbe:	69ba      	ldr	r2, [r7, #24]
 8000dc0:	693b      	ldr	r3, [r7, #16]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000dc6:	4a2f      	ldr	r2, [pc, #188]	@ (8000e84 <HAL_GPIO_Init+0x304>)
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000dcc:	4b2d      	ldr	r3, [pc, #180]	@ (8000e84 <HAL_GPIO_Init+0x304>)
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	69ba      	ldr	r2, [r7, #24]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d003      	beq.n	8000df0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000df0:	4a24      	ldr	r2, [pc, #144]	@ (8000e84 <HAL_GPIO_Init+0x304>)
 8000df2:	69bb      	ldr	r3, [r7, #24]
 8000df4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000df6:	4b23      	ldr	r3, [pc, #140]	@ (8000e84 <HAL_GPIO_Init+0x304>)
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	43db      	mvns	r3, r3
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	4013      	ands	r3, r2
 8000e04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d003      	beq.n	8000e1a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000e12:	69ba      	ldr	r2, [r7, #24]
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e1a:	4a1a      	ldr	r2, [pc, #104]	@ (8000e84 <HAL_GPIO_Init+0x304>)
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e20:	4b18      	ldr	r3, [pc, #96]	@ (8000e84 <HAL_GPIO_Init+0x304>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d003      	beq.n	8000e44 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e44:	4a0f      	ldr	r2, [pc, #60]	@ (8000e84 <HAL_GPIO_Init+0x304>)
 8000e46:	69bb      	ldr	r3, [r7, #24]
 8000e48:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	61fb      	str	r3, [r7, #28]
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	2b0f      	cmp	r3, #15
 8000e54:	f67f aea2 	bls.w	8000b9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e58:	bf00      	nop
 8000e5a:	bf00      	nop
 8000e5c:	3724      	adds	r7, #36	@ 0x24
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	40023800 	.word	0x40023800
 8000e6c:	40013800 	.word	0x40013800
 8000e70:	40020000 	.word	0x40020000
 8000e74:	40020400 	.word	0x40020400
 8000e78:	40020800 	.word	0x40020800
 8000e7c:	40020c00 	.word	0x40020c00
 8000e80:	40021000 	.word	0x40021000
 8000e84:	40013c00 	.word	0x40013c00

08000e88 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000e92:	4b08      	ldr	r3, [pc, #32]	@ (8000eb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e94:	695a      	ldr	r2, [r3, #20]
 8000e96:	88fb      	ldrh	r3, [r7, #6]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d006      	beq.n	8000eac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000e9e:	4a05      	ldr	r2, [pc, #20]	@ (8000eb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ea0:	88fb      	ldrh	r3, [r7, #6]
 8000ea2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000ea4:	88fb      	ldrh	r3, [r7, #6]
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff fbf0 	bl	800068c <HAL_GPIO_EXTI_Callback>
  }
}
 8000eac:	bf00      	nop
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	40013c00 	.word	0x40013c00

08000eb8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d101      	bne.n	8000eca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e267      	b.n	800139a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f003 0301 	and.w	r3, r3, #1
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d075      	beq.n	8000fc2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000ed6:	4b88      	ldr	r3, [pc, #544]	@ (80010f8 <HAL_RCC_OscConfig+0x240>)
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	f003 030c 	and.w	r3, r3, #12
 8000ede:	2b04      	cmp	r3, #4
 8000ee0:	d00c      	beq.n	8000efc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ee2:	4b85      	ldr	r3, [pc, #532]	@ (80010f8 <HAL_RCC_OscConfig+0x240>)
 8000ee4:	689b      	ldr	r3, [r3, #8]
 8000ee6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000eea:	2b08      	cmp	r3, #8
 8000eec:	d112      	bne.n	8000f14 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000eee:	4b82      	ldr	r3, [pc, #520]	@ (80010f8 <HAL_RCC_OscConfig+0x240>)
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ef6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000efa:	d10b      	bne.n	8000f14 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000efc:	4b7e      	ldr	r3, [pc, #504]	@ (80010f8 <HAL_RCC_OscConfig+0x240>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d05b      	beq.n	8000fc0 <HAL_RCC_OscConfig+0x108>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d157      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f10:	2301      	movs	r3, #1
 8000f12:	e242      	b.n	800139a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f1c:	d106      	bne.n	8000f2c <HAL_RCC_OscConfig+0x74>
 8000f1e:	4b76      	ldr	r3, [pc, #472]	@ (80010f8 <HAL_RCC_OscConfig+0x240>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a75      	ldr	r2, [pc, #468]	@ (80010f8 <HAL_RCC_OscConfig+0x240>)
 8000f24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f28:	6013      	str	r3, [r2, #0]
 8000f2a:	e01d      	b.n	8000f68 <HAL_RCC_OscConfig+0xb0>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000f34:	d10c      	bne.n	8000f50 <HAL_RCC_OscConfig+0x98>
 8000f36:	4b70      	ldr	r3, [pc, #448]	@ (80010f8 <HAL_RCC_OscConfig+0x240>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a6f      	ldr	r2, [pc, #444]	@ (80010f8 <HAL_RCC_OscConfig+0x240>)
 8000f3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f40:	6013      	str	r3, [r2, #0]
 8000f42:	4b6d      	ldr	r3, [pc, #436]	@ (80010f8 <HAL_RCC_OscConfig+0x240>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a6c      	ldr	r2, [pc, #432]	@ (80010f8 <HAL_RCC_OscConfig+0x240>)
 8000f48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f4c:	6013      	str	r3, [r2, #0]
 8000f4e:	e00b      	b.n	8000f68 <HAL_RCC_OscConfig+0xb0>
 8000f50:	4b69      	ldr	r3, [pc, #420]	@ (80010f8 <HAL_RCC_OscConfig+0x240>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a68      	ldr	r2, [pc, #416]	@ (80010f8 <HAL_RCC_OscConfig+0x240>)
 8000f56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f5a:	6013      	str	r3, [r2, #0]
 8000f5c:	4b66      	ldr	r3, [pc, #408]	@ (80010f8 <HAL_RCC_OscConfig+0x240>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a65      	ldr	r2, [pc, #404]	@ (80010f8 <HAL_RCC_OscConfig+0x240>)
 8000f62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d013      	beq.n	8000f98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f70:	f7ff fce8 	bl	8000944 <HAL_GetTick>
 8000f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f76:	e008      	b.n	8000f8a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f78:	f7ff fce4 	bl	8000944 <HAL_GetTick>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	2b64      	cmp	r3, #100	@ 0x64
 8000f84:	d901      	bls.n	8000f8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000f86:	2303      	movs	r3, #3
 8000f88:	e207      	b.n	800139a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f8a:	4b5b      	ldr	r3, [pc, #364]	@ (80010f8 <HAL_RCC_OscConfig+0x240>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d0f0      	beq.n	8000f78 <HAL_RCC_OscConfig+0xc0>
 8000f96:	e014      	b.n	8000fc2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f98:	f7ff fcd4 	bl	8000944 <HAL_GetTick>
 8000f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f9e:	e008      	b.n	8000fb2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fa0:	f7ff fcd0 	bl	8000944 <HAL_GetTick>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	2b64      	cmp	r3, #100	@ 0x64
 8000fac:	d901      	bls.n	8000fb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	e1f3      	b.n	800139a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fb2:	4b51      	ldr	r3, [pc, #324]	@ (80010f8 <HAL_RCC_OscConfig+0x240>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d1f0      	bne.n	8000fa0 <HAL_RCC_OscConfig+0xe8>
 8000fbe:	e000      	b.n	8000fc2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f003 0302 	and.w	r3, r3, #2
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d063      	beq.n	8001096 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000fce:	4b4a      	ldr	r3, [pc, #296]	@ (80010f8 <HAL_RCC_OscConfig+0x240>)
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	f003 030c 	and.w	r3, r3, #12
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d00b      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000fda:	4b47      	ldr	r3, [pc, #284]	@ (80010f8 <HAL_RCC_OscConfig+0x240>)
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000fe2:	2b08      	cmp	r3, #8
 8000fe4:	d11c      	bne.n	8001020 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000fe6:	4b44      	ldr	r3, [pc, #272]	@ (80010f8 <HAL_RCC_OscConfig+0x240>)
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d116      	bne.n	8001020 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ff2:	4b41      	ldr	r3, [pc, #260]	@ (80010f8 <HAL_RCC_OscConfig+0x240>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f003 0302 	and.w	r3, r3, #2
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d005      	beq.n	800100a <HAL_RCC_OscConfig+0x152>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	68db      	ldr	r3, [r3, #12]
 8001002:	2b01      	cmp	r3, #1
 8001004:	d001      	beq.n	800100a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e1c7      	b.n	800139a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800100a:	4b3b      	ldr	r3, [pc, #236]	@ (80010f8 <HAL_RCC_OscConfig+0x240>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	691b      	ldr	r3, [r3, #16]
 8001016:	00db      	lsls	r3, r3, #3
 8001018:	4937      	ldr	r1, [pc, #220]	@ (80010f8 <HAL_RCC_OscConfig+0x240>)
 800101a:	4313      	orrs	r3, r2
 800101c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800101e:	e03a      	b.n	8001096 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d020      	beq.n	800106a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001028:	4b34      	ldr	r3, [pc, #208]	@ (80010fc <HAL_RCC_OscConfig+0x244>)
 800102a:	2201      	movs	r2, #1
 800102c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800102e:	f7ff fc89 	bl	8000944 <HAL_GetTick>
 8001032:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001034:	e008      	b.n	8001048 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001036:	f7ff fc85 	bl	8000944 <HAL_GetTick>
 800103a:	4602      	mov	r2, r0
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	1ad3      	subs	r3, r2, r3
 8001040:	2b02      	cmp	r3, #2
 8001042:	d901      	bls.n	8001048 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001044:	2303      	movs	r3, #3
 8001046:	e1a8      	b.n	800139a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001048:	4b2b      	ldr	r3, [pc, #172]	@ (80010f8 <HAL_RCC_OscConfig+0x240>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f003 0302 	and.w	r3, r3, #2
 8001050:	2b00      	cmp	r3, #0
 8001052:	d0f0      	beq.n	8001036 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001054:	4b28      	ldr	r3, [pc, #160]	@ (80010f8 <HAL_RCC_OscConfig+0x240>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	691b      	ldr	r3, [r3, #16]
 8001060:	00db      	lsls	r3, r3, #3
 8001062:	4925      	ldr	r1, [pc, #148]	@ (80010f8 <HAL_RCC_OscConfig+0x240>)
 8001064:	4313      	orrs	r3, r2
 8001066:	600b      	str	r3, [r1, #0]
 8001068:	e015      	b.n	8001096 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800106a:	4b24      	ldr	r3, [pc, #144]	@ (80010fc <HAL_RCC_OscConfig+0x244>)
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001070:	f7ff fc68 	bl	8000944 <HAL_GetTick>
 8001074:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001076:	e008      	b.n	800108a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001078:	f7ff fc64 	bl	8000944 <HAL_GetTick>
 800107c:	4602      	mov	r2, r0
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	2b02      	cmp	r3, #2
 8001084:	d901      	bls.n	800108a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001086:	2303      	movs	r3, #3
 8001088:	e187      	b.n	800139a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800108a:	4b1b      	ldr	r3, [pc, #108]	@ (80010f8 <HAL_RCC_OscConfig+0x240>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f003 0302 	and.w	r3, r3, #2
 8001092:	2b00      	cmp	r3, #0
 8001094:	d1f0      	bne.n	8001078 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f003 0308 	and.w	r3, r3, #8
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d036      	beq.n	8001110 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	695b      	ldr	r3, [r3, #20]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d016      	beq.n	80010d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010aa:	4b15      	ldr	r3, [pc, #84]	@ (8001100 <HAL_RCC_OscConfig+0x248>)
 80010ac:	2201      	movs	r2, #1
 80010ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010b0:	f7ff fc48 	bl	8000944 <HAL_GetTick>
 80010b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010b6:	e008      	b.n	80010ca <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010b8:	f7ff fc44 	bl	8000944 <HAL_GetTick>
 80010bc:	4602      	mov	r2, r0
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d901      	bls.n	80010ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80010c6:	2303      	movs	r3, #3
 80010c8:	e167      	b.n	800139a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010ca:	4b0b      	ldr	r3, [pc, #44]	@ (80010f8 <HAL_RCC_OscConfig+0x240>)
 80010cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80010ce:	f003 0302 	and.w	r3, r3, #2
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d0f0      	beq.n	80010b8 <HAL_RCC_OscConfig+0x200>
 80010d6:	e01b      	b.n	8001110 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010d8:	4b09      	ldr	r3, [pc, #36]	@ (8001100 <HAL_RCC_OscConfig+0x248>)
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010de:	f7ff fc31 	bl	8000944 <HAL_GetTick>
 80010e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010e4:	e00e      	b.n	8001104 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010e6:	f7ff fc2d 	bl	8000944 <HAL_GetTick>
 80010ea:	4602      	mov	r2, r0
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	1ad3      	subs	r3, r2, r3
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d907      	bls.n	8001104 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80010f4:	2303      	movs	r3, #3
 80010f6:	e150      	b.n	800139a <HAL_RCC_OscConfig+0x4e2>
 80010f8:	40023800 	.word	0x40023800
 80010fc:	42470000 	.word	0x42470000
 8001100:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001104:	4b88      	ldr	r3, [pc, #544]	@ (8001328 <HAL_RCC_OscConfig+0x470>)
 8001106:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001108:	f003 0302 	and.w	r3, r3, #2
 800110c:	2b00      	cmp	r3, #0
 800110e:	d1ea      	bne.n	80010e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f003 0304 	and.w	r3, r3, #4
 8001118:	2b00      	cmp	r3, #0
 800111a:	f000 8097 	beq.w	800124c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800111e:	2300      	movs	r3, #0
 8001120:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001122:	4b81      	ldr	r3, [pc, #516]	@ (8001328 <HAL_RCC_OscConfig+0x470>)
 8001124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001126:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d10f      	bne.n	800114e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	60bb      	str	r3, [r7, #8]
 8001132:	4b7d      	ldr	r3, [pc, #500]	@ (8001328 <HAL_RCC_OscConfig+0x470>)
 8001134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001136:	4a7c      	ldr	r2, [pc, #496]	@ (8001328 <HAL_RCC_OscConfig+0x470>)
 8001138:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800113c:	6413      	str	r3, [r2, #64]	@ 0x40
 800113e:	4b7a      	ldr	r3, [pc, #488]	@ (8001328 <HAL_RCC_OscConfig+0x470>)
 8001140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001142:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001146:	60bb      	str	r3, [r7, #8]
 8001148:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800114a:	2301      	movs	r3, #1
 800114c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800114e:	4b77      	ldr	r3, [pc, #476]	@ (800132c <HAL_RCC_OscConfig+0x474>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001156:	2b00      	cmp	r3, #0
 8001158:	d118      	bne.n	800118c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800115a:	4b74      	ldr	r3, [pc, #464]	@ (800132c <HAL_RCC_OscConfig+0x474>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a73      	ldr	r2, [pc, #460]	@ (800132c <HAL_RCC_OscConfig+0x474>)
 8001160:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001164:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001166:	f7ff fbed 	bl	8000944 <HAL_GetTick>
 800116a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800116c:	e008      	b.n	8001180 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800116e:	f7ff fbe9 	bl	8000944 <HAL_GetTick>
 8001172:	4602      	mov	r2, r0
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	2b02      	cmp	r3, #2
 800117a:	d901      	bls.n	8001180 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800117c:	2303      	movs	r3, #3
 800117e:	e10c      	b.n	800139a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001180:	4b6a      	ldr	r3, [pc, #424]	@ (800132c <HAL_RCC_OscConfig+0x474>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001188:	2b00      	cmp	r3, #0
 800118a:	d0f0      	beq.n	800116e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d106      	bne.n	80011a2 <HAL_RCC_OscConfig+0x2ea>
 8001194:	4b64      	ldr	r3, [pc, #400]	@ (8001328 <HAL_RCC_OscConfig+0x470>)
 8001196:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001198:	4a63      	ldr	r2, [pc, #396]	@ (8001328 <HAL_RCC_OscConfig+0x470>)
 800119a:	f043 0301 	orr.w	r3, r3, #1
 800119e:	6713      	str	r3, [r2, #112]	@ 0x70
 80011a0:	e01c      	b.n	80011dc <HAL_RCC_OscConfig+0x324>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	2b05      	cmp	r3, #5
 80011a8:	d10c      	bne.n	80011c4 <HAL_RCC_OscConfig+0x30c>
 80011aa:	4b5f      	ldr	r3, [pc, #380]	@ (8001328 <HAL_RCC_OscConfig+0x470>)
 80011ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011ae:	4a5e      	ldr	r2, [pc, #376]	@ (8001328 <HAL_RCC_OscConfig+0x470>)
 80011b0:	f043 0304 	orr.w	r3, r3, #4
 80011b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80011b6:	4b5c      	ldr	r3, [pc, #368]	@ (8001328 <HAL_RCC_OscConfig+0x470>)
 80011b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011ba:	4a5b      	ldr	r2, [pc, #364]	@ (8001328 <HAL_RCC_OscConfig+0x470>)
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80011c2:	e00b      	b.n	80011dc <HAL_RCC_OscConfig+0x324>
 80011c4:	4b58      	ldr	r3, [pc, #352]	@ (8001328 <HAL_RCC_OscConfig+0x470>)
 80011c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011c8:	4a57      	ldr	r2, [pc, #348]	@ (8001328 <HAL_RCC_OscConfig+0x470>)
 80011ca:	f023 0301 	bic.w	r3, r3, #1
 80011ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80011d0:	4b55      	ldr	r3, [pc, #340]	@ (8001328 <HAL_RCC_OscConfig+0x470>)
 80011d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011d4:	4a54      	ldr	r2, [pc, #336]	@ (8001328 <HAL_RCC_OscConfig+0x470>)
 80011d6:	f023 0304 	bic.w	r3, r3, #4
 80011da:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d015      	beq.n	8001210 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011e4:	f7ff fbae 	bl	8000944 <HAL_GetTick>
 80011e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011ea:	e00a      	b.n	8001202 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011ec:	f7ff fbaa 	bl	8000944 <HAL_GetTick>
 80011f0:	4602      	mov	r2, r0
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d901      	bls.n	8001202 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e0cb      	b.n	800139a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001202:	4b49      	ldr	r3, [pc, #292]	@ (8001328 <HAL_RCC_OscConfig+0x470>)
 8001204:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001206:	f003 0302 	and.w	r3, r3, #2
 800120a:	2b00      	cmp	r3, #0
 800120c:	d0ee      	beq.n	80011ec <HAL_RCC_OscConfig+0x334>
 800120e:	e014      	b.n	800123a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001210:	f7ff fb98 	bl	8000944 <HAL_GetTick>
 8001214:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001216:	e00a      	b.n	800122e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001218:	f7ff fb94 	bl	8000944 <HAL_GetTick>
 800121c:	4602      	mov	r2, r0
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001226:	4293      	cmp	r3, r2
 8001228:	d901      	bls.n	800122e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800122a:	2303      	movs	r3, #3
 800122c:	e0b5      	b.n	800139a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800122e:	4b3e      	ldr	r3, [pc, #248]	@ (8001328 <HAL_RCC_OscConfig+0x470>)
 8001230:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	2b00      	cmp	r3, #0
 8001238:	d1ee      	bne.n	8001218 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800123a:	7dfb      	ldrb	r3, [r7, #23]
 800123c:	2b01      	cmp	r3, #1
 800123e:	d105      	bne.n	800124c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001240:	4b39      	ldr	r3, [pc, #228]	@ (8001328 <HAL_RCC_OscConfig+0x470>)
 8001242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001244:	4a38      	ldr	r2, [pc, #224]	@ (8001328 <HAL_RCC_OscConfig+0x470>)
 8001246:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800124a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	699b      	ldr	r3, [r3, #24]
 8001250:	2b00      	cmp	r3, #0
 8001252:	f000 80a1 	beq.w	8001398 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001256:	4b34      	ldr	r3, [pc, #208]	@ (8001328 <HAL_RCC_OscConfig+0x470>)
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	f003 030c 	and.w	r3, r3, #12
 800125e:	2b08      	cmp	r3, #8
 8001260:	d05c      	beq.n	800131c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	699b      	ldr	r3, [r3, #24]
 8001266:	2b02      	cmp	r3, #2
 8001268:	d141      	bne.n	80012ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800126a:	4b31      	ldr	r3, [pc, #196]	@ (8001330 <HAL_RCC_OscConfig+0x478>)
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001270:	f7ff fb68 	bl	8000944 <HAL_GetTick>
 8001274:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001276:	e008      	b.n	800128a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001278:	f7ff fb64 	bl	8000944 <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	2b02      	cmp	r3, #2
 8001284:	d901      	bls.n	800128a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001286:	2303      	movs	r3, #3
 8001288:	e087      	b.n	800139a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800128a:	4b27      	ldr	r3, [pc, #156]	@ (8001328 <HAL_RCC_OscConfig+0x470>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d1f0      	bne.n	8001278 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	69da      	ldr	r2, [r3, #28]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6a1b      	ldr	r3, [r3, #32]
 800129e:	431a      	orrs	r2, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012a4:	019b      	lsls	r3, r3, #6
 80012a6:	431a      	orrs	r2, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012ac:	085b      	lsrs	r3, r3, #1
 80012ae:	3b01      	subs	r3, #1
 80012b0:	041b      	lsls	r3, r3, #16
 80012b2:	431a      	orrs	r2, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012b8:	061b      	lsls	r3, r3, #24
 80012ba:	491b      	ldr	r1, [pc, #108]	@ (8001328 <HAL_RCC_OscConfig+0x470>)
 80012bc:	4313      	orrs	r3, r2
 80012be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001330 <HAL_RCC_OscConfig+0x478>)
 80012c2:	2201      	movs	r2, #1
 80012c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c6:	f7ff fb3d 	bl	8000944 <HAL_GetTick>
 80012ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012cc:	e008      	b.n	80012e0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012ce:	f7ff fb39 	bl	8000944 <HAL_GetTick>
 80012d2:	4602      	mov	r2, r0
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d901      	bls.n	80012e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80012dc:	2303      	movs	r3, #3
 80012de:	e05c      	b.n	800139a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012e0:	4b11      	ldr	r3, [pc, #68]	@ (8001328 <HAL_RCC_OscConfig+0x470>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d0f0      	beq.n	80012ce <HAL_RCC_OscConfig+0x416>
 80012ec:	e054      	b.n	8001398 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012ee:	4b10      	ldr	r3, [pc, #64]	@ (8001330 <HAL_RCC_OscConfig+0x478>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f4:	f7ff fb26 	bl	8000944 <HAL_GetTick>
 80012f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012fa:	e008      	b.n	800130e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012fc:	f7ff fb22 	bl	8000944 <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	2b02      	cmp	r3, #2
 8001308:	d901      	bls.n	800130e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e045      	b.n	800139a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800130e:	4b06      	ldr	r3, [pc, #24]	@ (8001328 <HAL_RCC_OscConfig+0x470>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d1f0      	bne.n	80012fc <HAL_RCC_OscConfig+0x444>
 800131a:	e03d      	b.n	8001398 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	699b      	ldr	r3, [r3, #24]
 8001320:	2b01      	cmp	r3, #1
 8001322:	d107      	bne.n	8001334 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e038      	b.n	800139a <HAL_RCC_OscConfig+0x4e2>
 8001328:	40023800 	.word	0x40023800
 800132c:	40007000 	.word	0x40007000
 8001330:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001334:	4b1b      	ldr	r3, [pc, #108]	@ (80013a4 <HAL_RCC_OscConfig+0x4ec>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	699b      	ldr	r3, [r3, #24]
 800133e:	2b01      	cmp	r3, #1
 8001340:	d028      	beq.n	8001394 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800134c:	429a      	cmp	r2, r3
 800134e:	d121      	bne.n	8001394 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800135a:	429a      	cmp	r2, r3
 800135c:	d11a      	bne.n	8001394 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800135e:	68fa      	ldr	r2, [r7, #12]
 8001360:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001364:	4013      	ands	r3, r2
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800136a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800136c:	4293      	cmp	r3, r2
 800136e:	d111      	bne.n	8001394 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800137a:	085b      	lsrs	r3, r3, #1
 800137c:	3b01      	subs	r3, #1
 800137e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001380:	429a      	cmp	r2, r3
 8001382:	d107      	bne.n	8001394 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800138e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001390:	429a      	cmp	r2, r3
 8001392:	d001      	beq.n	8001398 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	e000      	b.n	800139a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001398:	2300      	movs	r3, #0
}
 800139a:	4618      	mov	r0, r3
 800139c:	3718      	adds	r7, #24
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40023800 	.word	0x40023800

080013a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d101      	bne.n	80013bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e0cc      	b.n	8001556 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013bc:	4b68      	ldr	r3, [pc, #416]	@ (8001560 <HAL_RCC_ClockConfig+0x1b8>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0307 	and.w	r3, r3, #7
 80013c4:	683a      	ldr	r2, [r7, #0]
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d90c      	bls.n	80013e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ca:	4b65      	ldr	r3, [pc, #404]	@ (8001560 <HAL_RCC_ClockConfig+0x1b8>)
 80013cc:	683a      	ldr	r2, [r7, #0]
 80013ce:	b2d2      	uxtb	r2, r2
 80013d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013d2:	4b63      	ldr	r3, [pc, #396]	@ (8001560 <HAL_RCC_ClockConfig+0x1b8>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0307 	and.w	r3, r3, #7
 80013da:	683a      	ldr	r2, [r7, #0]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d001      	beq.n	80013e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	e0b8      	b.n	8001556 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0302 	and.w	r3, r3, #2
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d020      	beq.n	8001432 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f003 0304 	and.w	r3, r3, #4
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d005      	beq.n	8001408 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013fc:	4b59      	ldr	r3, [pc, #356]	@ (8001564 <HAL_RCC_ClockConfig+0x1bc>)
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	4a58      	ldr	r2, [pc, #352]	@ (8001564 <HAL_RCC_ClockConfig+0x1bc>)
 8001402:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001406:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 0308 	and.w	r3, r3, #8
 8001410:	2b00      	cmp	r3, #0
 8001412:	d005      	beq.n	8001420 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001414:	4b53      	ldr	r3, [pc, #332]	@ (8001564 <HAL_RCC_ClockConfig+0x1bc>)
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	4a52      	ldr	r2, [pc, #328]	@ (8001564 <HAL_RCC_ClockConfig+0x1bc>)
 800141a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800141e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001420:	4b50      	ldr	r3, [pc, #320]	@ (8001564 <HAL_RCC_ClockConfig+0x1bc>)
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	494d      	ldr	r1, [pc, #308]	@ (8001564 <HAL_RCC_ClockConfig+0x1bc>)
 800142e:	4313      	orrs	r3, r2
 8001430:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	2b00      	cmp	r3, #0
 800143c:	d044      	beq.n	80014c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d107      	bne.n	8001456 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001446:	4b47      	ldr	r3, [pc, #284]	@ (8001564 <HAL_RCC_ClockConfig+0x1bc>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d119      	bne.n	8001486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e07f      	b.n	8001556 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	2b02      	cmp	r3, #2
 800145c:	d003      	beq.n	8001466 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001462:	2b03      	cmp	r3, #3
 8001464:	d107      	bne.n	8001476 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001466:	4b3f      	ldr	r3, [pc, #252]	@ (8001564 <HAL_RCC_ClockConfig+0x1bc>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d109      	bne.n	8001486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e06f      	b.n	8001556 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001476:	4b3b      	ldr	r3, [pc, #236]	@ (8001564 <HAL_RCC_ClockConfig+0x1bc>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d101      	bne.n	8001486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e067      	b.n	8001556 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001486:	4b37      	ldr	r3, [pc, #220]	@ (8001564 <HAL_RCC_ClockConfig+0x1bc>)
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	f023 0203 	bic.w	r2, r3, #3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	4934      	ldr	r1, [pc, #208]	@ (8001564 <HAL_RCC_ClockConfig+0x1bc>)
 8001494:	4313      	orrs	r3, r2
 8001496:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001498:	f7ff fa54 	bl	8000944 <HAL_GetTick>
 800149c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800149e:	e00a      	b.n	80014b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014a0:	f7ff fa50 	bl	8000944 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e04f      	b.n	8001556 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014b6:	4b2b      	ldr	r3, [pc, #172]	@ (8001564 <HAL_RCC_ClockConfig+0x1bc>)
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	f003 020c 	and.w	r2, r3, #12
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d1eb      	bne.n	80014a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014c8:	4b25      	ldr	r3, [pc, #148]	@ (8001560 <HAL_RCC_ClockConfig+0x1b8>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 0307 	and.w	r3, r3, #7
 80014d0:	683a      	ldr	r2, [r7, #0]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d20c      	bcs.n	80014f0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014d6:	4b22      	ldr	r3, [pc, #136]	@ (8001560 <HAL_RCC_ClockConfig+0x1b8>)
 80014d8:	683a      	ldr	r2, [r7, #0]
 80014da:	b2d2      	uxtb	r2, r2
 80014dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014de:	4b20      	ldr	r3, [pc, #128]	@ (8001560 <HAL_RCC_ClockConfig+0x1b8>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0307 	and.w	r3, r3, #7
 80014e6:	683a      	ldr	r2, [r7, #0]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d001      	beq.n	80014f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e032      	b.n	8001556 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0304 	and.w	r3, r3, #4
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d008      	beq.n	800150e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014fc:	4b19      	ldr	r3, [pc, #100]	@ (8001564 <HAL_RCC_ClockConfig+0x1bc>)
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	4916      	ldr	r1, [pc, #88]	@ (8001564 <HAL_RCC_ClockConfig+0x1bc>)
 800150a:	4313      	orrs	r3, r2
 800150c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0308 	and.w	r3, r3, #8
 8001516:	2b00      	cmp	r3, #0
 8001518:	d009      	beq.n	800152e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800151a:	4b12      	ldr	r3, [pc, #72]	@ (8001564 <HAL_RCC_ClockConfig+0x1bc>)
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	691b      	ldr	r3, [r3, #16]
 8001526:	00db      	lsls	r3, r3, #3
 8001528:	490e      	ldr	r1, [pc, #56]	@ (8001564 <HAL_RCC_ClockConfig+0x1bc>)
 800152a:	4313      	orrs	r3, r2
 800152c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800152e:	f000 f821 	bl	8001574 <HAL_RCC_GetSysClockFreq>
 8001532:	4602      	mov	r2, r0
 8001534:	4b0b      	ldr	r3, [pc, #44]	@ (8001564 <HAL_RCC_ClockConfig+0x1bc>)
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	091b      	lsrs	r3, r3, #4
 800153a:	f003 030f 	and.w	r3, r3, #15
 800153e:	490a      	ldr	r1, [pc, #40]	@ (8001568 <HAL_RCC_ClockConfig+0x1c0>)
 8001540:	5ccb      	ldrb	r3, [r1, r3]
 8001542:	fa22 f303 	lsr.w	r3, r2, r3
 8001546:	4a09      	ldr	r2, [pc, #36]	@ (800156c <HAL_RCC_ClockConfig+0x1c4>)
 8001548:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800154a:	4b09      	ldr	r3, [pc, #36]	@ (8001570 <HAL_RCC_ClockConfig+0x1c8>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff f9b4 	bl	80008bc <HAL_InitTick>

  return HAL_OK;
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3710      	adds	r7, #16
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40023c00 	.word	0x40023c00
 8001564:	40023800 	.word	0x40023800
 8001568:	08002070 	.word	0x08002070
 800156c:	20000064 	.word	0x20000064
 8001570:	20000068 	.word	0x20000068

08001574 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001574:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001578:	b094      	sub	sp, #80	@ 0x50
 800157a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800157c:	2300      	movs	r3, #0
 800157e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001580:	2300      	movs	r3, #0
 8001582:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001584:	2300      	movs	r3, #0
 8001586:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001588:	2300      	movs	r3, #0
 800158a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800158c:	4b79      	ldr	r3, [pc, #484]	@ (8001774 <HAL_RCC_GetSysClockFreq+0x200>)
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	f003 030c 	and.w	r3, r3, #12
 8001594:	2b08      	cmp	r3, #8
 8001596:	d00d      	beq.n	80015b4 <HAL_RCC_GetSysClockFreq+0x40>
 8001598:	2b08      	cmp	r3, #8
 800159a:	f200 80e1 	bhi.w	8001760 <HAL_RCC_GetSysClockFreq+0x1ec>
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d002      	beq.n	80015a8 <HAL_RCC_GetSysClockFreq+0x34>
 80015a2:	2b04      	cmp	r3, #4
 80015a4:	d003      	beq.n	80015ae <HAL_RCC_GetSysClockFreq+0x3a>
 80015a6:	e0db      	b.n	8001760 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015a8:	4b73      	ldr	r3, [pc, #460]	@ (8001778 <HAL_RCC_GetSysClockFreq+0x204>)
 80015aa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80015ac:	e0db      	b.n	8001766 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80015ae:	4b73      	ldr	r3, [pc, #460]	@ (800177c <HAL_RCC_GetSysClockFreq+0x208>)
 80015b0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80015b2:	e0d8      	b.n	8001766 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015b4:	4b6f      	ldr	r3, [pc, #444]	@ (8001774 <HAL_RCC_GetSysClockFreq+0x200>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80015bc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015be:	4b6d      	ldr	r3, [pc, #436]	@ (8001774 <HAL_RCC_GetSysClockFreq+0x200>)
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d063      	beq.n	8001692 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015ca:	4b6a      	ldr	r3, [pc, #424]	@ (8001774 <HAL_RCC_GetSysClockFreq+0x200>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	099b      	lsrs	r3, r3, #6
 80015d0:	2200      	movs	r2, #0
 80015d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80015d4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80015d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80015d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80015de:	2300      	movs	r3, #0
 80015e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80015e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80015e6:	4622      	mov	r2, r4
 80015e8:	462b      	mov	r3, r5
 80015ea:	f04f 0000 	mov.w	r0, #0
 80015ee:	f04f 0100 	mov.w	r1, #0
 80015f2:	0159      	lsls	r1, r3, #5
 80015f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015f8:	0150      	lsls	r0, r2, #5
 80015fa:	4602      	mov	r2, r0
 80015fc:	460b      	mov	r3, r1
 80015fe:	4621      	mov	r1, r4
 8001600:	1a51      	subs	r1, r2, r1
 8001602:	6139      	str	r1, [r7, #16]
 8001604:	4629      	mov	r1, r5
 8001606:	eb63 0301 	sbc.w	r3, r3, r1
 800160a:	617b      	str	r3, [r7, #20]
 800160c:	f04f 0200 	mov.w	r2, #0
 8001610:	f04f 0300 	mov.w	r3, #0
 8001614:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001618:	4659      	mov	r1, fp
 800161a:	018b      	lsls	r3, r1, #6
 800161c:	4651      	mov	r1, sl
 800161e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001622:	4651      	mov	r1, sl
 8001624:	018a      	lsls	r2, r1, #6
 8001626:	4651      	mov	r1, sl
 8001628:	ebb2 0801 	subs.w	r8, r2, r1
 800162c:	4659      	mov	r1, fp
 800162e:	eb63 0901 	sbc.w	r9, r3, r1
 8001632:	f04f 0200 	mov.w	r2, #0
 8001636:	f04f 0300 	mov.w	r3, #0
 800163a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800163e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001642:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001646:	4690      	mov	r8, r2
 8001648:	4699      	mov	r9, r3
 800164a:	4623      	mov	r3, r4
 800164c:	eb18 0303 	adds.w	r3, r8, r3
 8001650:	60bb      	str	r3, [r7, #8]
 8001652:	462b      	mov	r3, r5
 8001654:	eb49 0303 	adc.w	r3, r9, r3
 8001658:	60fb      	str	r3, [r7, #12]
 800165a:	f04f 0200 	mov.w	r2, #0
 800165e:	f04f 0300 	mov.w	r3, #0
 8001662:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001666:	4629      	mov	r1, r5
 8001668:	024b      	lsls	r3, r1, #9
 800166a:	4621      	mov	r1, r4
 800166c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001670:	4621      	mov	r1, r4
 8001672:	024a      	lsls	r2, r1, #9
 8001674:	4610      	mov	r0, r2
 8001676:	4619      	mov	r1, r3
 8001678:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800167a:	2200      	movs	r2, #0
 800167c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800167e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001680:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001684:	f7fe fdb0 	bl	80001e8 <__aeabi_uldivmod>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	4613      	mov	r3, r2
 800168e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001690:	e058      	b.n	8001744 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001692:	4b38      	ldr	r3, [pc, #224]	@ (8001774 <HAL_RCC_GetSysClockFreq+0x200>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	099b      	lsrs	r3, r3, #6
 8001698:	2200      	movs	r2, #0
 800169a:	4618      	mov	r0, r3
 800169c:	4611      	mov	r1, r2
 800169e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80016a2:	623b      	str	r3, [r7, #32]
 80016a4:	2300      	movs	r3, #0
 80016a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80016a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80016ac:	4642      	mov	r2, r8
 80016ae:	464b      	mov	r3, r9
 80016b0:	f04f 0000 	mov.w	r0, #0
 80016b4:	f04f 0100 	mov.w	r1, #0
 80016b8:	0159      	lsls	r1, r3, #5
 80016ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016be:	0150      	lsls	r0, r2, #5
 80016c0:	4602      	mov	r2, r0
 80016c2:	460b      	mov	r3, r1
 80016c4:	4641      	mov	r1, r8
 80016c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80016ca:	4649      	mov	r1, r9
 80016cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80016d0:	f04f 0200 	mov.w	r2, #0
 80016d4:	f04f 0300 	mov.w	r3, #0
 80016d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80016dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80016e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80016e4:	ebb2 040a 	subs.w	r4, r2, sl
 80016e8:	eb63 050b 	sbc.w	r5, r3, fp
 80016ec:	f04f 0200 	mov.w	r2, #0
 80016f0:	f04f 0300 	mov.w	r3, #0
 80016f4:	00eb      	lsls	r3, r5, #3
 80016f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80016fa:	00e2      	lsls	r2, r4, #3
 80016fc:	4614      	mov	r4, r2
 80016fe:	461d      	mov	r5, r3
 8001700:	4643      	mov	r3, r8
 8001702:	18e3      	adds	r3, r4, r3
 8001704:	603b      	str	r3, [r7, #0]
 8001706:	464b      	mov	r3, r9
 8001708:	eb45 0303 	adc.w	r3, r5, r3
 800170c:	607b      	str	r3, [r7, #4]
 800170e:	f04f 0200 	mov.w	r2, #0
 8001712:	f04f 0300 	mov.w	r3, #0
 8001716:	e9d7 4500 	ldrd	r4, r5, [r7]
 800171a:	4629      	mov	r1, r5
 800171c:	028b      	lsls	r3, r1, #10
 800171e:	4621      	mov	r1, r4
 8001720:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001724:	4621      	mov	r1, r4
 8001726:	028a      	lsls	r2, r1, #10
 8001728:	4610      	mov	r0, r2
 800172a:	4619      	mov	r1, r3
 800172c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800172e:	2200      	movs	r2, #0
 8001730:	61bb      	str	r3, [r7, #24]
 8001732:	61fa      	str	r2, [r7, #28]
 8001734:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001738:	f7fe fd56 	bl	80001e8 <__aeabi_uldivmod>
 800173c:	4602      	mov	r2, r0
 800173e:	460b      	mov	r3, r1
 8001740:	4613      	mov	r3, r2
 8001742:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001744:	4b0b      	ldr	r3, [pc, #44]	@ (8001774 <HAL_RCC_GetSysClockFreq+0x200>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	0c1b      	lsrs	r3, r3, #16
 800174a:	f003 0303 	and.w	r3, r3, #3
 800174e:	3301      	adds	r3, #1
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001754:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001756:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001758:	fbb2 f3f3 	udiv	r3, r2, r3
 800175c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800175e:	e002      	b.n	8001766 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001760:	4b05      	ldr	r3, [pc, #20]	@ (8001778 <HAL_RCC_GetSysClockFreq+0x204>)
 8001762:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001764:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001766:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001768:	4618      	mov	r0, r3
 800176a:	3750      	adds	r7, #80	@ 0x50
 800176c:	46bd      	mov	sp, r7
 800176e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001772:	bf00      	nop
 8001774:	40023800 	.word	0x40023800
 8001778:	00f42400 	.word	0x00f42400
 800177c:	007a1200 	.word	0x007a1200

08001780 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001784:	4b03      	ldr	r3, [pc, #12]	@ (8001794 <HAL_RCC_GetHCLKFreq+0x14>)
 8001786:	681b      	ldr	r3, [r3, #0]
}
 8001788:	4618      	mov	r0, r3
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	20000064 	.word	0x20000064

08001798 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800179c:	f7ff fff0 	bl	8001780 <HAL_RCC_GetHCLKFreq>
 80017a0:	4602      	mov	r2, r0
 80017a2:	4b05      	ldr	r3, [pc, #20]	@ (80017b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	0a9b      	lsrs	r3, r3, #10
 80017a8:	f003 0307 	and.w	r3, r3, #7
 80017ac:	4903      	ldr	r1, [pc, #12]	@ (80017bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80017ae:	5ccb      	ldrb	r3, [r1, r3]
 80017b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	40023800 	.word	0x40023800
 80017bc:	08002080 	.word	0x08002080

080017c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80017c4:	f7ff ffdc 	bl	8001780 <HAL_RCC_GetHCLKFreq>
 80017c8:	4602      	mov	r2, r0
 80017ca:	4b05      	ldr	r3, [pc, #20]	@ (80017e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	0b5b      	lsrs	r3, r3, #13
 80017d0:	f003 0307 	and.w	r3, r3, #7
 80017d4:	4903      	ldr	r1, [pc, #12]	@ (80017e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80017d6:	5ccb      	ldrb	r3, [r1, r3]
 80017d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017dc:	4618      	mov	r0, r3
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40023800 	.word	0x40023800
 80017e4:	08002080 	.word	0x08002080

080017e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d101      	bne.n	80017fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e042      	b.n	8001880 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001800:	b2db      	uxtb	r3, r3
 8001802:	2b00      	cmp	r3, #0
 8001804:	d106      	bne.n	8001814 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f7fe ff7c 	bl	800070c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2224      	movs	r2, #36	@ 0x24
 8001818:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	68da      	ldr	r2, [r3, #12]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800182a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f000 f973 	bl	8001b18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	691a      	ldr	r2, [r3, #16]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001840:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	695a      	ldr	r2, [r3, #20]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001850:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	68da      	ldr	r2, [r3, #12]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001860:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2200      	movs	r2, #0
 8001866:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2220      	movs	r2, #32
 800186c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2220      	movs	r2, #32
 8001874:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2200      	movs	r2, #0
 800187c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800187e:	2300      	movs	r3, #0
}
 8001880:	4618      	mov	r0, r3
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b08a      	sub	sp, #40	@ 0x28
 800188c:	af02      	add	r7, sp, #8
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	603b      	str	r3, [r7, #0]
 8001894:	4613      	mov	r3, r2
 8001896:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001898:	2300      	movs	r3, #0
 800189a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	2b20      	cmp	r3, #32
 80018a6:	d175      	bne.n	8001994 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d002      	beq.n	80018b4 <HAL_UART_Transmit+0x2c>
 80018ae:	88fb      	ldrh	r3, [r7, #6]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d101      	bne.n	80018b8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e06e      	b.n	8001996 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2200      	movs	r2, #0
 80018bc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2221      	movs	r2, #33	@ 0x21
 80018c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80018c6:	f7ff f83d 	bl	8000944 <HAL_GetTick>
 80018ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	88fa      	ldrh	r2, [r7, #6]
 80018d0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	88fa      	ldrh	r2, [r7, #6]
 80018d6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80018e0:	d108      	bne.n	80018f4 <HAL_UART_Transmit+0x6c>
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d104      	bne.n	80018f4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	61bb      	str	r3, [r7, #24]
 80018f2:	e003      	b.n	80018fc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80018fc:	e02e      	b.n	800195c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	9300      	str	r3, [sp, #0]
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	2200      	movs	r2, #0
 8001906:	2180      	movs	r1, #128	@ 0x80
 8001908:	68f8      	ldr	r0, [r7, #12]
 800190a:	f000 f848 	bl	800199e <UART_WaitOnFlagUntilTimeout>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d005      	beq.n	8001920 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2220      	movs	r2, #32
 8001918:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e03a      	b.n	8001996 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d10b      	bne.n	800193e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	881b      	ldrh	r3, [r3, #0]
 800192a:	461a      	mov	r2, r3
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001934:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	3302      	adds	r3, #2
 800193a:	61bb      	str	r3, [r7, #24]
 800193c:	e007      	b.n	800194e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	781a      	ldrb	r2, [r3, #0]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	3301      	adds	r3, #1
 800194c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001952:	b29b      	uxth	r3, r3
 8001954:	3b01      	subs	r3, #1
 8001956:	b29a      	uxth	r2, r3
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001960:	b29b      	uxth	r3, r3
 8001962:	2b00      	cmp	r3, #0
 8001964:	d1cb      	bne.n	80018fe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	9300      	str	r3, [sp, #0]
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	2200      	movs	r2, #0
 800196e:	2140      	movs	r1, #64	@ 0x40
 8001970:	68f8      	ldr	r0, [r7, #12]
 8001972:	f000 f814 	bl	800199e <UART_WaitOnFlagUntilTimeout>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d005      	beq.n	8001988 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2220      	movs	r2, #32
 8001980:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001984:	2303      	movs	r3, #3
 8001986:	e006      	b.n	8001996 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2220      	movs	r2, #32
 800198c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001990:	2300      	movs	r3, #0
 8001992:	e000      	b.n	8001996 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001994:	2302      	movs	r3, #2
  }
}
 8001996:	4618      	mov	r0, r3
 8001998:	3720      	adds	r7, #32
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b086      	sub	sp, #24
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	60f8      	str	r0, [r7, #12]
 80019a6:	60b9      	str	r1, [r7, #8]
 80019a8:	603b      	str	r3, [r7, #0]
 80019aa:	4613      	mov	r3, r2
 80019ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80019ae:	e03b      	b.n	8001a28 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019b0:	6a3b      	ldr	r3, [r7, #32]
 80019b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019b6:	d037      	beq.n	8001a28 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019b8:	f7fe ffc4 	bl	8000944 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	6a3a      	ldr	r2, [r7, #32]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d302      	bcc.n	80019ce <UART_WaitOnFlagUntilTimeout+0x30>
 80019c8:	6a3b      	ldr	r3, [r7, #32]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d101      	bne.n	80019d2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e03a      	b.n	8001a48 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	f003 0304 	and.w	r3, r3, #4
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d023      	beq.n	8001a28 <UART_WaitOnFlagUntilTimeout+0x8a>
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	2b80      	cmp	r3, #128	@ 0x80
 80019e4:	d020      	beq.n	8001a28 <UART_WaitOnFlagUntilTimeout+0x8a>
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	2b40      	cmp	r3, #64	@ 0x40
 80019ea:	d01d      	beq.n	8001a28 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0308 	and.w	r3, r3, #8
 80019f6:	2b08      	cmp	r3, #8
 80019f8:	d116      	bne.n	8001a28 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80019fa:	2300      	movs	r3, #0
 80019fc:	617b      	str	r3, [r7, #20]
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	617b      	str	r3, [r7, #20]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	617b      	str	r3, [r7, #20]
 8001a0e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001a10:	68f8      	ldr	r0, [r7, #12]
 8001a12:	f000 f81d 	bl	8001a50 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2208      	movs	r2, #8
 8001a1a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e00f      	b.n	8001a48 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	4013      	ands	r3, r2
 8001a32:	68ba      	ldr	r2, [r7, #8]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	bf0c      	ite	eq
 8001a38:	2301      	moveq	r3, #1
 8001a3a:	2300      	movne	r3, #0
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	461a      	mov	r2, r3
 8001a40:	79fb      	ldrb	r3, [r7, #7]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d0b4      	beq.n	80019b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001a46:	2300      	movs	r3, #0
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3718      	adds	r7, #24
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b095      	sub	sp, #84	@ 0x54
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	330c      	adds	r3, #12
 8001a5e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a62:	e853 3f00 	ldrex	r3, [r3]
 8001a66:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a6a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001a6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	330c      	adds	r3, #12
 8001a76:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001a78:	643a      	str	r2, [r7, #64]	@ 0x40
 8001a7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001a7c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001a7e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001a80:	e841 2300 	strex	r3, r2, [r1]
 8001a84:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001a86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d1e5      	bne.n	8001a58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	3314      	adds	r3, #20
 8001a92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a94:	6a3b      	ldr	r3, [r7, #32]
 8001a96:	e853 3f00 	ldrex	r3, [r3]
 8001a9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	f023 0301 	bic.w	r3, r3, #1
 8001aa2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	3314      	adds	r3, #20
 8001aaa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001aac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001aae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ab0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001ab2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ab4:	e841 2300 	strex	r3, r2, [r1]
 8001ab8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d1e5      	bne.n	8001a8c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d119      	bne.n	8001afc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	330c      	adds	r3, #12
 8001ace:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	e853 3f00 	ldrex	r3, [r3]
 8001ad6:	60bb      	str	r3, [r7, #8]
   return(result);
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	f023 0310 	bic.w	r3, r3, #16
 8001ade:	647b      	str	r3, [r7, #68]	@ 0x44
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	330c      	adds	r3, #12
 8001ae6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001ae8:	61ba      	str	r2, [r7, #24]
 8001aea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001aec:	6979      	ldr	r1, [r7, #20]
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	e841 2300 	strex	r3, r2, [r1]
 8001af4:	613b      	str	r3, [r7, #16]
   return(result);
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d1e5      	bne.n	8001ac8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2220      	movs	r2, #32
 8001b00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001b0a:	bf00      	nop
 8001b0c:	3754      	adds	r7, #84	@ 0x54
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
	...

08001b18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001b18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b1c:	b0c0      	sub	sp, #256	@ 0x100
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	691b      	ldr	r3, [r3, #16]
 8001b2c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b34:	68d9      	ldr	r1, [r3, #12]
 8001b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	ea40 0301 	orr.w	r3, r0, r1
 8001b40:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b46:	689a      	ldr	r2, [r3, #8]
 8001b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b4c:	691b      	ldr	r3, [r3, #16]
 8001b4e:	431a      	orrs	r2, r3
 8001b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b54:	695b      	ldr	r3, [r3, #20]
 8001b56:	431a      	orrs	r2, r3
 8001b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b5c:	69db      	ldr	r3, [r3, #28]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001b70:	f021 010c 	bic.w	r1, r1, #12
 8001b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001b7e:	430b      	orrs	r3, r1
 8001b80:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	695b      	ldr	r3, [r3, #20]
 8001b8a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8001b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b92:	6999      	ldr	r1, [r3, #24]
 8001b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	ea40 0301 	orr.w	r3, r0, r1
 8001b9e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	4b8f      	ldr	r3, [pc, #572]	@ (8001de4 <UART_SetConfig+0x2cc>)
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d005      	beq.n	8001bb8 <UART_SetConfig+0xa0>
 8001bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	4b8d      	ldr	r3, [pc, #564]	@ (8001de8 <UART_SetConfig+0x2d0>)
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d104      	bne.n	8001bc2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001bb8:	f7ff fe02 	bl	80017c0 <HAL_RCC_GetPCLK2Freq>
 8001bbc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001bc0:	e003      	b.n	8001bca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001bc2:	f7ff fde9 	bl	8001798 <HAL_RCC_GetPCLK1Freq>
 8001bc6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001bce:	69db      	ldr	r3, [r3, #28]
 8001bd0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001bd4:	f040 810c 	bne.w	8001df0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001bd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001be2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001be6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001bea:	4622      	mov	r2, r4
 8001bec:	462b      	mov	r3, r5
 8001bee:	1891      	adds	r1, r2, r2
 8001bf0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001bf2:	415b      	adcs	r3, r3
 8001bf4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001bf6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001bfa:	4621      	mov	r1, r4
 8001bfc:	eb12 0801 	adds.w	r8, r2, r1
 8001c00:	4629      	mov	r1, r5
 8001c02:	eb43 0901 	adc.w	r9, r3, r1
 8001c06:	f04f 0200 	mov.w	r2, #0
 8001c0a:	f04f 0300 	mov.w	r3, #0
 8001c0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c1a:	4690      	mov	r8, r2
 8001c1c:	4699      	mov	r9, r3
 8001c1e:	4623      	mov	r3, r4
 8001c20:	eb18 0303 	adds.w	r3, r8, r3
 8001c24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001c28:	462b      	mov	r3, r5
 8001c2a:	eb49 0303 	adc.w	r3, r9, r3
 8001c2e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001c3e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001c42:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8001c46:	460b      	mov	r3, r1
 8001c48:	18db      	adds	r3, r3, r3
 8001c4a:	653b      	str	r3, [r7, #80]	@ 0x50
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	eb42 0303 	adc.w	r3, r2, r3
 8001c52:	657b      	str	r3, [r7, #84]	@ 0x54
 8001c54:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001c58:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001c5c:	f7fe fac4 	bl	80001e8 <__aeabi_uldivmod>
 8001c60:	4602      	mov	r2, r0
 8001c62:	460b      	mov	r3, r1
 8001c64:	4b61      	ldr	r3, [pc, #388]	@ (8001dec <UART_SetConfig+0x2d4>)
 8001c66:	fba3 2302 	umull	r2, r3, r3, r2
 8001c6a:	095b      	lsrs	r3, r3, #5
 8001c6c:	011c      	lsls	r4, r3, #4
 8001c6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001c72:	2200      	movs	r2, #0
 8001c74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001c78:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001c7c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8001c80:	4642      	mov	r2, r8
 8001c82:	464b      	mov	r3, r9
 8001c84:	1891      	adds	r1, r2, r2
 8001c86:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001c88:	415b      	adcs	r3, r3
 8001c8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c8c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001c90:	4641      	mov	r1, r8
 8001c92:	eb12 0a01 	adds.w	sl, r2, r1
 8001c96:	4649      	mov	r1, r9
 8001c98:	eb43 0b01 	adc.w	fp, r3, r1
 8001c9c:	f04f 0200 	mov.w	r2, #0
 8001ca0:	f04f 0300 	mov.w	r3, #0
 8001ca4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001ca8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001cac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001cb0:	4692      	mov	sl, r2
 8001cb2:	469b      	mov	fp, r3
 8001cb4:	4643      	mov	r3, r8
 8001cb6:	eb1a 0303 	adds.w	r3, sl, r3
 8001cba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001cbe:	464b      	mov	r3, r9
 8001cc0:	eb4b 0303 	adc.w	r3, fp, r3
 8001cc4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001cd4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001cd8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8001cdc:	460b      	mov	r3, r1
 8001cde:	18db      	adds	r3, r3, r3
 8001ce0:	643b      	str	r3, [r7, #64]	@ 0x40
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	eb42 0303 	adc.w	r3, r2, r3
 8001ce8:	647b      	str	r3, [r7, #68]	@ 0x44
 8001cea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001cee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8001cf2:	f7fe fa79 	bl	80001e8 <__aeabi_uldivmod>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	4611      	mov	r1, r2
 8001cfc:	4b3b      	ldr	r3, [pc, #236]	@ (8001dec <UART_SetConfig+0x2d4>)
 8001cfe:	fba3 2301 	umull	r2, r3, r3, r1
 8001d02:	095b      	lsrs	r3, r3, #5
 8001d04:	2264      	movs	r2, #100	@ 0x64
 8001d06:	fb02 f303 	mul.w	r3, r2, r3
 8001d0a:	1acb      	subs	r3, r1, r3
 8001d0c:	00db      	lsls	r3, r3, #3
 8001d0e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001d12:	4b36      	ldr	r3, [pc, #216]	@ (8001dec <UART_SetConfig+0x2d4>)
 8001d14:	fba3 2302 	umull	r2, r3, r3, r2
 8001d18:	095b      	lsrs	r3, r3, #5
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8001d20:	441c      	add	r4, r3
 8001d22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001d26:	2200      	movs	r2, #0
 8001d28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001d2c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001d30:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8001d34:	4642      	mov	r2, r8
 8001d36:	464b      	mov	r3, r9
 8001d38:	1891      	adds	r1, r2, r2
 8001d3a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001d3c:	415b      	adcs	r3, r3
 8001d3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d40:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001d44:	4641      	mov	r1, r8
 8001d46:	1851      	adds	r1, r2, r1
 8001d48:	6339      	str	r1, [r7, #48]	@ 0x30
 8001d4a:	4649      	mov	r1, r9
 8001d4c:	414b      	adcs	r3, r1
 8001d4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d50:	f04f 0200 	mov.w	r2, #0
 8001d54:	f04f 0300 	mov.w	r3, #0
 8001d58:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8001d5c:	4659      	mov	r1, fp
 8001d5e:	00cb      	lsls	r3, r1, #3
 8001d60:	4651      	mov	r1, sl
 8001d62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001d66:	4651      	mov	r1, sl
 8001d68:	00ca      	lsls	r2, r1, #3
 8001d6a:	4610      	mov	r0, r2
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4603      	mov	r3, r0
 8001d70:	4642      	mov	r2, r8
 8001d72:	189b      	adds	r3, r3, r2
 8001d74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001d78:	464b      	mov	r3, r9
 8001d7a:	460a      	mov	r2, r1
 8001d7c:	eb42 0303 	adc.w	r3, r2, r3
 8001d80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001d90:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001d94:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8001d98:	460b      	mov	r3, r1
 8001d9a:	18db      	adds	r3, r3, r3
 8001d9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d9e:	4613      	mov	r3, r2
 8001da0:	eb42 0303 	adc.w	r3, r2, r3
 8001da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001da6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001daa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8001dae:	f7fe fa1b 	bl	80001e8 <__aeabi_uldivmod>
 8001db2:	4602      	mov	r2, r0
 8001db4:	460b      	mov	r3, r1
 8001db6:	4b0d      	ldr	r3, [pc, #52]	@ (8001dec <UART_SetConfig+0x2d4>)
 8001db8:	fba3 1302 	umull	r1, r3, r3, r2
 8001dbc:	095b      	lsrs	r3, r3, #5
 8001dbe:	2164      	movs	r1, #100	@ 0x64
 8001dc0:	fb01 f303 	mul.w	r3, r1, r3
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	3332      	adds	r3, #50	@ 0x32
 8001dca:	4a08      	ldr	r2, [pc, #32]	@ (8001dec <UART_SetConfig+0x2d4>)
 8001dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd0:	095b      	lsrs	r3, r3, #5
 8001dd2:	f003 0207 	and.w	r2, r3, #7
 8001dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4422      	add	r2, r4
 8001dde:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001de0:	e106      	b.n	8001ff0 <UART_SetConfig+0x4d8>
 8001de2:	bf00      	nop
 8001de4:	40011000 	.word	0x40011000
 8001de8:	40011400 	.word	0x40011400
 8001dec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001df0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001df4:	2200      	movs	r2, #0
 8001df6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001dfa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001dfe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001e02:	4642      	mov	r2, r8
 8001e04:	464b      	mov	r3, r9
 8001e06:	1891      	adds	r1, r2, r2
 8001e08:	6239      	str	r1, [r7, #32]
 8001e0a:	415b      	adcs	r3, r3
 8001e0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e12:	4641      	mov	r1, r8
 8001e14:	1854      	adds	r4, r2, r1
 8001e16:	4649      	mov	r1, r9
 8001e18:	eb43 0501 	adc.w	r5, r3, r1
 8001e1c:	f04f 0200 	mov.w	r2, #0
 8001e20:	f04f 0300 	mov.w	r3, #0
 8001e24:	00eb      	lsls	r3, r5, #3
 8001e26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e2a:	00e2      	lsls	r2, r4, #3
 8001e2c:	4614      	mov	r4, r2
 8001e2e:	461d      	mov	r5, r3
 8001e30:	4643      	mov	r3, r8
 8001e32:	18e3      	adds	r3, r4, r3
 8001e34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001e38:	464b      	mov	r3, r9
 8001e3a:	eb45 0303 	adc.w	r3, r5, r3
 8001e3e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001e4e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001e52:	f04f 0200 	mov.w	r2, #0
 8001e56:	f04f 0300 	mov.w	r3, #0
 8001e5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001e5e:	4629      	mov	r1, r5
 8001e60:	008b      	lsls	r3, r1, #2
 8001e62:	4621      	mov	r1, r4
 8001e64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001e68:	4621      	mov	r1, r4
 8001e6a:	008a      	lsls	r2, r1, #2
 8001e6c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8001e70:	f7fe f9ba 	bl	80001e8 <__aeabi_uldivmod>
 8001e74:	4602      	mov	r2, r0
 8001e76:	460b      	mov	r3, r1
 8001e78:	4b60      	ldr	r3, [pc, #384]	@ (8001ffc <UART_SetConfig+0x4e4>)
 8001e7a:	fba3 2302 	umull	r2, r3, r3, r2
 8001e7e:	095b      	lsrs	r3, r3, #5
 8001e80:	011c      	lsls	r4, r3, #4
 8001e82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001e86:	2200      	movs	r2, #0
 8001e88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001e8c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001e90:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8001e94:	4642      	mov	r2, r8
 8001e96:	464b      	mov	r3, r9
 8001e98:	1891      	adds	r1, r2, r2
 8001e9a:	61b9      	str	r1, [r7, #24]
 8001e9c:	415b      	adcs	r3, r3
 8001e9e:	61fb      	str	r3, [r7, #28]
 8001ea0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ea4:	4641      	mov	r1, r8
 8001ea6:	1851      	adds	r1, r2, r1
 8001ea8:	6139      	str	r1, [r7, #16]
 8001eaa:	4649      	mov	r1, r9
 8001eac:	414b      	adcs	r3, r1
 8001eae:	617b      	str	r3, [r7, #20]
 8001eb0:	f04f 0200 	mov.w	r2, #0
 8001eb4:	f04f 0300 	mov.w	r3, #0
 8001eb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ebc:	4659      	mov	r1, fp
 8001ebe:	00cb      	lsls	r3, r1, #3
 8001ec0:	4651      	mov	r1, sl
 8001ec2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001ec6:	4651      	mov	r1, sl
 8001ec8:	00ca      	lsls	r2, r1, #3
 8001eca:	4610      	mov	r0, r2
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4603      	mov	r3, r0
 8001ed0:	4642      	mov	r2, r8
 8001ed2:	189b      	adds	r3, r3, r2
 8001ed4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001ed8:	464b      	mov	r3, r9
 8001eda:	460a      	mov	r2, r1
 8001edc:	eb42 0303 	adc.w	r3, r2, r3
 8001ee0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001eee:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001ef0:	f04f 0200 	mov.w	r2, #0
 8001ef4:	f04f 0300 	mov.w	r3, #0
 8001ef8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8001efc:	4649      	mov	r1, r9
 8001efe:	008b      	lsls	r3, r1, #2
 8001f00:	4641      	mov	r1, r8
 8001f02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001f06:	4641      	mov	r1, r8
 8001f08:	008a      	lsls	r2, r1, #2
 8001f0a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001f0e:	f7fe f96b 	bl	80001e8 <__aeabi_uldivmod>
 8001f12:	4602      	mov	r2, r0
 8001f14:	460b      	mov	r3, r1
 8001f16:	4611      	mov	r1, r2
 8001f18:	4b38      	ldr	r3, [pc, #224]	@ (8001ffc <UART_SetConfig+0x4e4>)
 8001f1a:	fba3 2301 	umull	r2, r3, r3, r1
 8001f1e:	095b      	lsrs	r3, r3, #5
 8001f20:	2264      	movs	r2, #100	@ 0x64
 8001f22:	fb02 f303 	mul.w	r3, r2, r3
 8001f26:	1acb      	subs	r3, r1, r3
 8001f28:	011b      	lsls	r3, r3, #4
 8001f2a:	3332      	adds	r3, #50	@ 0x32
 8001f2c:	4a33      	ldr	r2, [pc, #204]	@ (8001ffc <UART_SetConfig+0x4e4>)
 8001f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f32:	095b      	lsrs	r3, r3, #5
 8001f34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f38:	441c      	add	r4, r3
 8001f3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001f3e:	2200      	movs	r2, #0
 8001f40:	673b      	str	r3, [r7, #112]	@ 0x70
 8001f42:	677a      	str	r2, [r7, #116]	@ 0x74
 8001f44:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8001f48:	4642      	mov	r2, r8
 8001f4a:	464b      	mov	r3, r9
 8001f4c:	1891      	adds	r1, r2, r2
 8001f4e:	60b9      	str	r1, [r7, #8]
 8001f50:	415b      	adcs	r3, r3
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f58:	4641      	mov	r1, r8
 8001f5a:	1851      	adds	r1, r2, r1
 8001f5c:	6039      	str	r1, [r7, #0]
 8001f5e:	4649      	mov	r1, r9
 8001f60:	414b      	adcs	r3, r1
 8001f62:	607b      	str	r3, [r7, #4]
 8001f64:	f04f 0200 	mov.w	r2, #0
 8001f68:	f04f 0300 	mov.w	r3, #0
 8001f6c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001f70:	4659      	mov	r1, fp
 8001f72:	00cb      	lsls	r3, r1, #3
 8001f74:	4651      	mov	r1, sl
 8001f76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f7a:	4651      	mov	r1, sl
 8001f7c:	00ca      	lsls	r2, r1, #3
 8001f7e:	4610      	mov	r0, r2
 8001f80:	4619      	mov	r1, r3
 8001f82:	4603      	mov	r3, r0
 8001f84:	4642      	mov	r2, r8
 8001f86:	189b      	adds	r3, r3, r2
 8001f88:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001f8a:	464b      	mov	r3, r9
 8001f8c:	460a      	mov	r2, r1
 8001f8e:	eb42 0303 	adc.w	r3, r2, r3
 8001f92:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	663b      	str	r3, [r7, #96]	@ 0x60
 8001f9e:	667a      	str	r2, [r7, #100]	@ 0x64
 8001fa0:	f04f 0200 	mov.w	r2, #0
 8001fa4:	f04f 0300 	mov.w	r3, #0
 8001fa8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8001fac:	4649      	mov	r1, r9
 8001fae:	008b      	lsls	r3, r1, #2
 8001fb0:	4641      	mov	r1, r8
 8001fb2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001fb6:	4641      	mov	r1, r8
 8001fb8:	008a      	lsls	r2, r1, #2
 8001fba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001fbe:	f7fe f913 	bl	80001e8 <__aeabi_uldivmod>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8001ffc <UART_SetConfig+0x4e4>)
 8001fc8:	fba3 1302 	umull	r1, r3, r3, r2
 8001fcc:	095b      	lsrs	r3, r3, #5
 8001fce:	2164      	movs	r1, #100	@ 0x64
 8001fd0:	fb01 f303 	mul.w	r3, r1, r3
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	011b      	lsls	r3, r3, #4
 8001fd8:	3332      	adds	r3, #50	@ 0x32
 8001fda:	4a08      	ldr	r2, [pc, #32]	@ (8001ffc <UART_SetConfig+0x4e4>)
 8001fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe0:	095b      	lsrs	r3, r3, #5
 8001fe2:	f003 020f 	and.w	r2, r3, #15
 8001fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4422      	add	r2, r4
 8001fee:	609a      	str	r2, [r3, #8]
}
 8001ff0:	bf00      	nop
 8001ff2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ffc:	51eb851f 	.word	0x51eb851f

08002000 <memset>:
 8002000:	4402      	add	r2, r0
 8002002:	4603      	mov	r3, r0
 8002004:	4293      	cmp	r3, r2
 8002006:	d100      	bne.n	800200a <memset+0xa>
 8002008:	4770      	bx	lr
 800200a:	f803 1b01 	strb.w	r1, [r3], #1
 800200e:	e7f9      	b.n	8002004 <memset+0x4>

08002010 <__libc_init_array>:
 8002010:	b570      	push	{r4, r5, r6, lr}
 8002012:	4d0d      	ldr	r5, [pc, #52]	@ (8002048 <__libc_init_array+0x38>)
 8002014:	4c0d      	ldr	r4, [pc, #52]	@ (800204c <__libc_init_array+0x3c>)
 8002016:	1b64      	subs	r4, r4, r5
 8002018:	10a4      	asrs	r4, r4, #2
 800201a:	2600      	movs	r6, #0
 800201c:	42a6      	cmp	r6, r4
 800201e:	d109      	bne.n	8002034 <__libc_init_array+0x24>
 8002020:	4d0b      	ldr	r5, [pc, #44]	@ (8002050 <__libc_init_array+0x40>)
 8002022:	4c0c      	ldr	r4, [pc, #48]	@ (8002054 <__libc_init_array+0x44>)
 8002024:	f000 f818 	bl	8002058 <_init>
 8002028:	1b64      	subs	r4, r4, r5
 800202a:	10a4      	asrs	r4, r4, #2
 800202c:	2600      	movs	r6, #0
 800202e:	42a6      	cmp	r6, r4
 8002030:	d105      	bne.n	800203e <__libc_init_array+0x2e>
 8002032:	bd70      	pop	{r4, r5, r6, pc}
 8002034:	f855 3b04 	ldr.w	r3, [r5], #4
 8002038:	4798      	blx	r3
 800203a:	3601      	adds	r6, #1
 800203c:	e7ee      	b.n	800201c <__libc_init_array+0xc>
 800203e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002042:	4798      	blx	r3
 8002044:	3601      	adds	r6, #1
 8002046:	e7f2      	b.n	800202e <__libc_init_array+0x1e>
 8002048:	08002090 	.word	0x08002090
 800204c:	08002090 	.word	0x08002090
 8002050:	08002090 	.word	0x08002090
 8002054:	08002094 	.word	0x08002094

08002058 <_init>:
 8002058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800205a:	bf00      	nop
 800205c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800205e:	bc08      	pop	{r3}
 8002060:	469e      	mov	lr, r3
 8002062:	4770      	bx	lr

08002064 <_fini>:
 8002064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002066:	bf00      	nop
 8002068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800206a:	bc08      	pop	{r3}
 800206c:	469e      	mov	lr, r3
 800206e:	4770      	bx	lr
