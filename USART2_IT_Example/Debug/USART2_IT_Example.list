
USART2_IT_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f6c  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08002104  08002104  00003104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800212c  0800212c  00004010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800212c  0800212c  0000312c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002134  08002134  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002134  08002134  00003134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002138  08002138  00003138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  0800213c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  20000010  0800214c  00004010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  0800214c  000040e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007dae  00000000  00000000  00004040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015db  00000000  00000000  0000bdee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000680  00000000  00000000  0000d3d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004f7  00000000  00000000  0000da50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015307  00000000  00000000  0000df47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007d4b  00000000  00000000  0002324e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000852b9  00000000  00000000  0002af99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b0252  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019d0  00000000  00000000  000b0298  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b2  00000000  00000000  000b1c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080020ec 	.word	0x080020ec

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	080020ec 	.word	0x080020ec

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001fc:	f000 b988 	b.w	8000510 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	468e      	mov	lr, r1
 8000220:	4604      	mov	r4, r0
 8000222:	4688      	mov	r8, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14a      	bne.n	80002be <__udivmoddi4+0xa6>
 8000228:	428a      	cmp	r2, r1
 800022a:	4617      	mov	r7, r2
 800022c:	d962      	bls.n	80002f4 <__udivmoddi4+0xdc>
 800022e:	fab2 f682 	clz	r6, r2
 8000232:	b14e      	cbz	r6, 8000248 <__udivmoddi4+0x30>
 8000234:	f1c6 0320 	rsb	r3, r6, #32
 8000238:	fa01 f806 	lsl.w	r8, r1, r6
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	40b7      	lsls	r7, r6
 8000242:	ea43 0808 	orr.w	r8, r3, r8
 8000246:	40b4      	lsls	r4, r6
 8000248:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800024c:	fa1f fc87 	uxth.w	ip, r7
 8000250:	fbb8 f1fe 	udiv	r1, r8, lr
 8000254:	0c23      	lsrs	r3, r4, #16
 8000256:	fb0e 8811 	mls	r8, lr, r1, r8
 800025a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800025e:	fb01 f20c 	mul.w	r2, r1, ip
 8000262:	429a      	cmp	r2, r3
 8000264:	d909      	bls.n	800027a <__udivmoddi4+0x62>
 8000266:	18fb      	adds	r3, r7, r3
 8000268:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800026c:	f080 80ea 	bcs.w	8000444 <__udivmoddi4+0x22c>
 8000270:	429a      	cmp	r2, r3
 8000272:	f240 80e7 	bls.w	8000444 <__udivmoddi4+0x22c>
 8000276:	3902      	subs	r1, #2
 8000278:	443b      	add	r3, r7
 800027a:	1a9a      	subs	r2, r3, r2
 800027c:	b2a3      	uxth	r3, r4
 800027e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000282:	fb0e 2210 	mls	r2, lr, r0, r2
 8000286:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800028a:	fb00 fc0c 	mul.w	ip, r0, ip
 800028e:	459c      	cmp	ip, r3
 8000290:	d909      	bls.n	80002a6 <__udivmoddi4+0x8e>
 8000292:	18fb      	adds	r3, r7, r3
 8000294:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000298:	f080 80d6 	bcs.w	8000448 <__udivmoddi4+0x230>
 800029c:	459c      	cmp	ip, r3
 800029e:	f240 80d3 	bls.w	8000448 <__udivmoddi4+0x230>
 80002a2:	443b      	add	r3, r7
 80002a4:	3802      	subs	r0, #2
 80002a6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002aa:	eba3 030c 	sub.w	r3, r3, ip
 80002ae:	2100      	movs	r1, #0
 80002b0:	b11d      	cbz	r5, 80002ba <__udivmoddi4+0xa2>
 80002b2:	40f3      	lsrs	r3, r6
 80002b4:	2200      	movs	r2, #0
 80002b6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d905      	bls.n	80002ce <__udivmoddi4+0xb6>
 80002c2:	b10d      	cbz	r5, 80002c8 <__udivmoddi4+0xb0>
 80002c4:	e9c5 0100 	strd	r0, r1, [r5]
 80002c8:	2100      	movs	r1, #0
 80002ca:	4608      	mov	r0, r1
 80002cc:	e7f5      	b.n	80002ba <__udivmoddi4+0xa2>
 80002ce:	fab3 f183 	clz	r1, r3
 80002d2:	2900      	cmp	r1, #0
 80002d4:	d146      	bne.n	8000364 <__udivmoddi4+0x14c>
 80002d6:	4573      	cmp	r3, lr
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xc8>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 8105 	bhi.w	80004ea <__udivmoddi4+0x2d2>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4690      	mov	r8, r2
 80002ea:	2d00      	cmp	r5, #0
 80002ec:	d0e5      	beq.n	80002ba <__udivmoddi4+0xa2>
 80002ee:	e9c5 4800 	strd	r4, r8, [r5]
 80002f2:	e7e2      	b.n	80002ba <__udivmoddi4+0xa2>
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f000 8090 	beq.w	800041a <__udivmoddi4+0x202>
 80002fa:	fab2 f682 	clz	r6, r2
 80002fe:	2e00      	cmp	r6, #0
 8000300:	f040 80a4 	bne.w	800044c <__udivmoddi4+0x234>
 8000304:	1a8a      	subs	r2, r1, r2
 8000306:	0c03      	lsrs	r3, r0, #16
 8000308:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800030c:	b280      	uxth	r0, r0
 800030e:	b2bc      	uxth	r4, r7
 8000310:	2101      	movs	r1, #1
 8000312:	fbb2 fcfe 	udiv	ip, r2, lr
 8000316:	fb0e 221c 	mls	r2, lr, ip, r2
 800031a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800031e:	fb04 f20c 	mul.w	r2, r4, ip
 8000322:	429a      	cmp	r2, r3
 8000324:	d907      	bls.n	8000336 <__udivmoddi4+0x11e>
 8000326:	18fb      	adds	r3, r7, r3
 8000328:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800032c:	d202      	bcs.n	8000334 <__udivmoddi4+0x11c>
 800032e:	429a      	cmp	r2, r3
 8000330:	f200 80e0 	bhi.w	80004f4 <__udivmoddi4+0x2dc>
 8000334:	46c4      	mov	ip, r8
 8000336:	1a9b      	subs	r3, r3, r2
 8000338:	fbb3 f2fe 	udiv	r2, r3, lr
 800033c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000340:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000344:	fb02 f404 	mul.w	r4, r2, r4
 8000348:	429c      	cmp	r4, r3
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x144>
 800034c:	18fb      	adds	r3, r7, r3
 800034e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x142>
 8000354:	429c      	cmp	r4, r3
 8000356:	f200 80ca 	bhi.w	80004ee <__udivmoddi4+0x2d6>
 800035a:	4602      	mov	r2, r0
 800035c:	1b1b      	subs	r3, r3, r4
 800035e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000362:	e7a5      	b.n	80002b0 <__udivmoddi4+0x98>
 8000364:	f1c1 0620 	rsb	r6, r1, #32
 8000368:	408b      	lsls	r3, r1
 800036a:	fa22 f706 	lsr.w	r7, r2, r6
 800036e:	431f      	orrs	r7, r3
 8000370:	fa0e f401 	lsl.w	r4, lr, r1
 8000374:	fa20 f306 	lsr.w	r3, r0, r6
 8000378:	fa2e fe06 	lsr.w	lr, lr, r6
 800037c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000380:	4323      	orrs	r3, r4
 8000382:	fa00 f801 	lsl.w	r8, r0, r1
 8000386:	fa1f fc87 	uxth.w	ip, r7
 800038a:	fbbe f0f9 	udiv	r0, lr, r9
 800038e:	0c1c      	lsrs	r4, r3, #16
 8000390:	fb09 ee10 	mls	lr, r9, r0, lr
 8000394:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000398:	fb00 fe0c 	mul.w	lr, r0, ip
 800039c:	45a6      	cmp	lr, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x1a0>
 80003a4:	193c      	adds	r4, r7, r4
 80003a6:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003aa:	f080 809c 	bcs.w	80004e6 <__udivmoddi4+0x2ce>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f240 8099 	bls.w	80004e6 <__udivmoddi4+0x2ce>
 80003b4:	3802      	subs	r0, #2
 80003b6:	443c      	add	r4, r7
 80003b8:	eba4 040e 	sub.w	r4, r4, lr
 80003bc:	fa1f fe83 	uxth.w	lr, r3
 80003c0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c4:	fb09 4413 	mls	r4, r9, r3, r4
 80003c8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003cc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d0:	45a4      	cmp	ip, r4
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1ce>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003da:	f080 8082 	bcs.w	80004e2 <__udivmoddi4+0x2ca>
 80003de:	45a4      	cmp	ip, r4
 80003e0:	d97f      	bls.n	80004e2 <__udivmoddi4+0x2ca>
 80003e2:	3b02      	subs	r3, #2
 80003e4:	443c      	add	r4, r7
 80003e6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	fba0 ec02 	umull	lr, ip, r0, r2
 80003f2:	4564      	cmp	r4, ip
 80003f4:	4673      	mov	r3, lr
 80003f6:	46e1      	mov	r9, ip
 80003f8:	d362      	bcc.n	80004c0 <__udivmoddi4+0x2a8>
 80003fa:	d05f      	beq.n	80004bc <__udivmoddi4+0x2a4>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x1fe>
 80003fe:	ebb8 0203 	subs.w	r2, r8, r3
 8000402:	eb64 0409 	sbc.w	r4, r4, r9
 8000406:	fa04 f606 	lsl.w	r6, r4, r6
 800040a:	fa22 f301 	lsr.w	r3, r2, r1
 800040e:	431e      	orrs	r6, r3
 8000410:	40cc      	lsrs	r4, r1
 8000412:	e9c5 6400 	strd	r6, r4, [r5]
 8000416:	2100      	movs	r1, #0
 8000418:	e74f      	b.n	80002ba <__udivmoddi4+0xa2>
 800041a:	fbb1 fcf2 	udiv	ip, r1, r2
 800041e:	0c01      	lsrs	r1, r0, #16
 8000420:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000424:	b280      	uxth	r0, r0
 8000426:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800042a:	463b      	mov	r3, r7
 800042c:	4638      	mov	r0, r7
 800042e:	463c      	mov	r4, r7
 8000430:	46b8      	mov	r8, r7
 8000432:	46be      	mov	lr, r7
 8000434:	2620      	movs	r6, #32
 8000436:	fbb1 f1f7 	udiv	r1, r1, r7
 800043a:	eba2 0208 	sub.w	r2, r2, r8
 800043e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000442:	e766      	b.n	8000312 <__udivmoddi4+0xfa>
 8000444:	4601      	mov	r1, r0
 8000446:	e718      	b.n	800027a <__udivmoddi4+0x62>
 8000448:	4610      	mov	r0, r2
 800044a:	e72c      	b.n	80002a6 <__udivmoddi4+0x8e>
 800044c:	f1c6 0220 	rsb	r2, r6, #32
 8000450:	fa2e f302 	lsr.w	r3, lr, r2
 8000454:	40b7      	lsls	r7, r6
 8000456:	40b1      	lsls	r1, r6
 8000458:	fa20 f202 	lsr.w	r2, r0, r2
 800045c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000460:	430a      	orrs	r2, r1
 8000462:	fbb3 f8fe 	udiv	r8, r3, lr
 8000466:	b2bc      	uxth	r4, r7
 8000468:	fb0e 3318 	mls	r3, lr, r8, r3
 800046c:	0c11      	lsrs	r1, r2, #16
 800046e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000472:	fb08 f904 	mul.w	r9, r8, r4
 8000476:	40b0      	lsls	r0, r6
 8000478:	4589      	cmp	r9, r1
 800047a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800047e:	b280      	uxth	r0, r0
 8000480:	d93e      	bls.n	8000500 <__udivmoddi4+0x2e8>
 8000482:	1879      	adds	r1, r7, r1
 8000484:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000488:	d201      	bcs.n	800048e <__udivmoddi4+0x276>
 800048a:	4589      	cmp	r9, r1
 800048c:	d81f      	bhi.n	80004ce <__udivmoddi4+0x2b6>
 800048e:	eba1 0109 	sub.w	r1, r1, r9
 8000492:	fbb1 f9fe 	udiv	r9, r1, lr
 8000496:	fb09 f804 	mul.w	r8, r9, r4
 800049a:	fb0e 1119 	mls	r1, lr, r9, r1
 800049e:	b292      	uxth	r2, r2
 80004a0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a4:	4542      	cmp	r2, r8
 80004a6:	d229      	bcs.n	80004fc <__udivmoddi4+0x2e4>
 80004a8:	18ba      	adds	r2, r7, r2
 80004aa:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004ae:	d2c4      	bcs.n	800043a <__udivmoddi4+0x222>
 80004b0:	4542      	cmp	r2, r8
 80004b2:	d2c2      	bcs.n	800043a <__udivmoddi4+0x222>
 80004b4:	f1a9 0102 	sub.w	r1, r9, #2
 80004b8:	443a      	add	r2, r7
 80004ba:	e7be      	b.n	800043a <__udivmoddi4+0x222>
 80004bc:	45f0      	cmp	r8, lr
 80004be:	d29d      	bcs.n	80003fc <__udivmoddi4+0x1e4>
 80004c0:	ebbe 0302 	subs.w	r3, lr, r2
 80004c4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004c8:	3801      	subs	r0, #1
 80004ca:	46e1      	mov	r9, ip
 80004cc:	e796      	b.n	80003fc <__udivmoddi4+0x1e4>
 80004ce:	eba7 0909 	sub.w	r9, r7, r9
 80004d2:	4449      	add	r1, r9
 80004d4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004d8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004dc:	fb09 f804 	mul.w	r8, r9, r4
 80004e0:	e7db      	b.n	800049a <__udivmoddi4+0x282>
 80004e2:	4673      	mov	r3, lr
 80004e4:	e77f      	b.n	80003e6 <__udivmoddi4+0x1ce>
 80004e6:	4650      	mov	r0, sl
 80004e8:	e766      	b.n	80003b8 <__udivmoddi4+0x1a0>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e6fd      	b.n	80002ea <__udivmoddi4+0xd2>
 80004ee:	443b      	add	r3, r7
 80004f0:	3a02      	subs	r2, #2
 80004f2:	e733      	b.n	800035c <__udivmoddi4+0x144>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	443b      	add	r3, r7
 80004fa:	e71c      	b.n	8000336 <__udivmoddi4+0x11e>
 80004fc:	4649      	mov	r1, r9
 80004fe:	e79c      	b.n	800043a <__udivmoddi4+0x222>
 8000500:	eba1 0109 	sub.w	r1, r1, r9
 8000504:	46c4      	mov	ip, r8
 8000506:	fbb1 f9fe 	udiv	r9, r1, lr
 800050a:	fb09 f804 	mul.w	r8, r9, r4
 800050e:	e7c4      	b.n	800049a <__udivmoddi4+0x282>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <SysTick_Handler>:
#include "main.h"

extern UART_HandleTypeDef huart2;

void SysTick_Handler(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000518:	f000 f9c8 	bl	80008ac <HAL_IncTick>

	HAL_SYSTICK_IRQHandler();
 800051c:	f000 faf7 	bl	8000b0e <HAL_SYSTICK_IRQHandler>
}
 8000520:	bf00      	nop
 8000522:	bd80      	pop	{r7, pc}

08000524 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart2);
 8000528:	4802      	ldr	r0, [pc, #8]	@ (8000534 <USART2_IRQHandler+0x10>)
 800052a:	f000 fe47 	bl	80011bc <HAL_UART_IRQHandler>
}
 800052e:	bf00      	nop
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	2000002c 	.word	0x2000002c

08000538 <main>:
uint8_t rcvd_data;
uint32_t count = 0;
uint8_t reception_complete;

int main(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
	HAL_Init();
 800053e:	f000 f963 	bl	8000808 <HAL_Init>
	UART2_Init();
 8000542:	f000 f82b 	bl	800059c <UART2_Init>

	uint16_t len_of_data = strlen(userdata);
 8000546:	4b10      	ldr	r3, [pc, #64]	@ (8000588 <main+0x50>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	4618      	mov	r0, r3
 800054c:	f7ff fe44 	bl	80001d8 <strlen>
 8000550:	4603      	mov	r3, r0
 8000552:	80fb      	strh	r3, [r7, #6]

	HAL_UART_Transmit(&huart2, (uint8_t *) userdata, len_of_data, HAL_MAX_DELAY);
 8000554:	4b0c      	ldr	r3, [pc, #48]	@ (8000588 <main+0x50>)
 8000556:	6819      	ldr	r1, [r3, #0]
 8000558:	88fa      	ldrh	r2, [r7, #6]
 800055a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800055e:	480b      	ldr	r0, [pc, #44]	@ (800058c <main+0x54>)
 8000560:	f000 fd7c 	bl	800105c <HAL_UART_Transmit>


	while(1)
	{
		HAL_UART_Receive_IT(&huart2, &rcvd_data, 1);
 8000564:	2201      	movs	r2, #1
 8000566:	490a      	ldr	r1, [pc, #40]	@ (8000590 <main+0x58>)
 8000568:	4808      	ldr	r0, [pc, #32]	@ (800058c <main+0x54>)
 800056a:	f000 fe02 	bl	8001172 <HAL_UART_Receive_IT>
		if(reception_complete == TRUE)
 800056e:	4b09      	ldr	r3, [pc, #36]	@ (8000594 <main+0x5c>)
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	2b01      	cmp	r3, #1
 8000574:	d1f6      	bne.n	8000564 <main+0x2c>
		{
			reception_complete = FALSE;
 8000576:	4b07      	ldr	r3, [pc, #28]	@ (8000594 <main+0x5c>)
 8000578:	2200      	movs	r2, #0
 800057a:	701a      	strb	r2, [r3, #0]
			memset(data_buffer, 0, 100);
 800057c:	2264      	movs	r2, #100	@ 0x64
 800057e:	2100      	movs	r1, #0
 8000580:	4805      	ldr	r0, [pc, #20]	@ (8000598 <main+0x60>)
 8000582:	f001 fd87 	bl	8002094 <memset>
		HAL_UART_Receive_IT(&huart2, &rcvd_data, 1);
 8000586:	e7ed      	b.n	8000564 <main+0x2c>
 8000588:	20000000 	.word	0x20000000
 800058c:	2000002c 	.word	0x2000002c
 8000590:	200000d8 	.word	0x200000d8
 8000594:	200000e0 	.word	0x200000e0
 8000598:	20000074 	.word	0x20000074

0800059c <UART2_Init>:
		}
	}
}

void UART2_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 80005a0:	4b11      	ldr	r3, [pc, #68]	@ (80005e8 <UART2_Init+0x4c>)
 80005a2:	4a12      	ldr	r2, [pc, #72]	@ (80005ec <UART2_Init+0x50>)
 80005a4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80005a6:	4b10      	ldr	r3, [pc, #64]	@ (80005e8 <UART2_Init+0x4c>)
 80005a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005ac:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005ae:	4b0e      	ldr	r3, [pc, #56]	@ (80005e8 <UART2_Init+0x4c>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80005b4:	4b0c      	ldr	r3, [pc, #48]	@ (80005e8 <UART2_Init+0x4c>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80005ba:	4b0b      	ldr	r3, [pc, #44]	@ (80005e8 <UART2_Init+0x4c>)
 80005bc:	2200      	movs	r2, #0
 80005be:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80005c0:	4b09      	ldr	r3, [pc, #36]	@ (80005e8 <UART2_Init+0x4c>)
 80005c2:	220c      	movs	r2, #12
 80005c4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005c6:	4b08      	ldr	r3, [pc, #32]	@ (80005e8 <UART2_Init+0x4c>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005cc:	4b06      	ldr	r3, [pc, #24]	@ (80005e8 <UART2_Init+0x4c>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	61da      	str	r2, [r3, #28]

	if(HAL_UART_Init(&huart2) != HAL_OK)
 80005d2:	4805      	ldr	r0, [pc, #20]	@ (80005e8 <UART2_Init+0x4c>)
 80005d4:	f000 fcf2 	bl	8000fbc <HAL_UART_Init>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <UART2_Init+0x46>
	{
		Error_Handler();
 80005de:	f000 f867 	bl	80006b0 <Error_Handler>
	}
}
 80005e2:	bf00      	nop
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	2000002c 	.word	0x2000002c
 80005ec:	40004400 	.word	0x40004400

080005f0 <convert_to_capital>:

void convert_to_capital(uint8_t *data)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	while(*data != '\r')
 80005f8:	e010      	b.n	800061c <convert_to_capital+0x2c>
	{
		if(*data >= 'a' && *data <= 'z')
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	2b60      	cmp	r3, #96	@ 0x60
 8000600:	d909      	bls.n	8000616 <convert_to_capital+0x26>
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	2b7a      	cmp	r3, #122	@ 0x7a
 8000608:	d805      	bhi.n	8000616 <convert_to_capital+0x26>
		{
			*data -= 32;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	3b20      	subs	r3, #32
 8000610:	b2da      	uxtb	r2, r3
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	701a      	strb	r2, [r3, #0]
		}
		data++;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	3301      	adds	r3, #1
 800061a:	607b      	str	r3, [r7, #4]
	while(*data != '\r')
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	2b0d      	cmp	r3, #13
 8000622:	d1ea      	bne.n	80005fa <convert_to_capital+0xa>
	}
}
 8000624:	bf00      	nop
 8000626:	bf00      	nop
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
	...

08000634 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
	if(rcvd_data == '\r')
 800063c:	4b18      	ldr	r3, [pc, #96]	@ (80006a0 <HAL_UART_RxCpltCallback+0x6c>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	2b0d      	cmp	r3, #13
 8000642:	d11f      	bne.n	8000684 <HAL_UART_RxCpltCallback+0x50>
	{
		reception_complete = TRUE;
 8000644:	4b17      	ldr	r3, [pc, #92]	@ (80006a4 <HAL_UART_RxCpltCallback+0x70>)
 8000646:	2201      	movs	r2, #1
 8000648:	701a      	strb	r2, [r3, #0]
		data_buffer[count++] = '\r';
 800064a:	4b17      	ldr	r3, [pc, #92]	@ (80006a8 <HAL_UART_RxCpltCallback+0x74>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	1c5a      	adds	r2, r3, #1
 8000650:	4915      	ldr	r1, [pc, #84]	@ (80006a8 <HAL_UART_RxCpltCallback+0x74>)
 8000652:	600a      	str	r2, [r1, #0]
 8000654:	4a15      	ldr	r2, [pc, #84]	@ (80006ac <HAL_UART_RxCpltCallback+0x78>)
 8000656:	210d      	movs	r1, #13
 8000658:	54d1      	strb	r1, [r2, r3]
		data_buffer[count++] = '\n';
 800065a:	4b13      	ldr	r3, [pc, #76]	@ (80006a8 <HAL_UART_RxCpltCallback+0x74>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	1c5a      	adds	r2, r3, #1
 8000660:	4911      	ldr	r1, [pc, #68]	@ (80006a8 <HAL_UART_RxCpltCallback+0x74>)
 8000662:	600a      	str	r2, [r1, #0]
 8000664:	4a11      	ldr	r2, [pc, #68]	@ (80006ac <HAL_UART_RxCpltCallback+0x78>)
 8000666:	210a      	movs	r1, #10
 8000668:	54d1      	strb	r1, [r2, r3]
		convert_to_capital(data_buffer);
 800066a:	4810      	ldr	r0, [pc, #64]	@ (80006ac <HAL_UART_RxCpltCallback+0x78>)
 800066c:	f7ff ffc0 	bl	80005f0 <convert_to_capital>
		HAL_UART_Transmit(huart, data_buffer, count, HAL_MAX_DELAY);
 8000670:	4b0d      	ldr	r3, [pc, #52]	@ (80006a8 <HAL_UART_RxCpltCallback+0x74>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	b29a      	uxth	r2, r3
 8000676:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800067a:	490c      	ldr	r1, [pc, #48]	@ (80006ac <HAL_UART_RxCpltCallback+0x78>)
 800067c:	6878      	ldr	r0, [r7, #4]
 800067e:	f000 fced 	bl	800105c <HAL_UART_Transmit>
	}
	else
	{
		data_buffer[count++] = rcvd_data;
	}
}
 8000682:	e008      	b.n	8000696 <HAL_UART_RxCpltCallback+0x62>
		data_buffer[count++] = rcvd_data;
 8000684:	4b08      	ldr	r3, [pc, #32]	@ (80006a8 <HAL_UART_RxCpltCallback+0x74>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	1c5a      	adds	r2, r3, #1
 800068a:	4907      	ldr	r1, [pc, #28]	@ (80006a8 <HAL_UART_RxCpltCallback+0x74>)
 800068c:	600a      	str	r2, [r1, #0]
 800068e:	4a04      	ldr	r2, [pc, #16]	@ (80006a0 <HAL_UART_RxCpltCallback+0x6c>)
 8000690:	7811      	ldrb	r1, [r2, #0]
 8000692:	4a06      	ldr	r2, [pc, #24]	@ (80006ac <HAL_UART_RxCpltCallback+0x78>)
 8000694:	54d1      	strb	r1, [r2, r3]
}
 8000696:	bf00      	nop
 8000698:	3708      	adds	r7, #8
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	200000d8 	.word	0x200000d8
 80006a4:	200000e0 	.word	0x200000e0
 80006a8:	200000dc 	.word	0x200000dc
 80006ac:	20000074 	.word	0x20000074

080006b0 <Error_Handler>:

void Error_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b4:	b672      	cpsid	i
}
 80006b6:	bf00      	nop
	__disable_irq();
	while(1);
 80006b8:	bf00      	nop
 80006ba:	e7fd      	b.n	80006b8 <Error_Handler+0x8>

080006bc <HAL_MspInit>:
#define SRC_MSP_C_

#include "main.h"

void HAL_MspInit(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006c0:	2003      	movs	r0, #3
 80006c2:	f000 f9e3 	bl	8000a8c <HAL_NVIC_SetPriorityGrouping>
	SCB->SHCSR |= (0X7 << 16);
 80006c6:	4b0d      	ldr	r3, [pc, #52]	@ (80006fc <HAL_MspInit+0x40>)
 80006c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006ca:	4a0c      	ldr	r2, [pc, #48]	@ (80006fc <HAL_MspInit+0x40>)
 80006cc:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 80006d0:	6253      	str	r3, [r2, #36]	@ 0x24
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2100      	movs	r1, #0
 80006d6:	f06f 0009 	mvn.w	r0, #9
 80006da:	f000 f9e2 	bl	8000aa2 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80006de:	2200      	movs	r2, #0
 80006e0:	2100      	movs	r1, #0
 80006e2:	f06f 000a 	mvn.w	r0, #10
 80006e6:	f000 f9dc 	bl	8000aa2 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80006ea:	2200      	movs	r2, #0
 80006ec:	2100      	movs	r1, #0
 80006ee:	f06f 000b 	mvn.w	r0, #11
 80006f2:	f000 f9d6 	bl	8000aa2 <HAL_NVIC_SetPriority>
}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	e000ed00 	.word	0xe000ed00

08000700 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b08a      	sub	sp, #40	@ 0x28
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
	__HAL_RCC_USART2_CLK_ENABLE();
 8000708:	2300      	movs	r3, #0
 800070a:	613b      	str	r3, [r7, #16]
 800070c:	4b1e      	ldr	r3, [pc, #120]	@ (8000788 <HAL_UART_MspInit+0x88>)
 800070e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000710:	4a1d      	ldr	r2, [pc, #116]	@ (8000788 <HAL_UART_MspInit+0x88>)
 8000712:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000716:	6413      	str	r3, [r2, #64]	@ 0x40
 8000718:	4b1b      	ldr	r3, [pc, #108]	@ (8000788 <HAL_UART_MspInit+0x88>)
 800071a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800071c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000720:	613b      	str	r3, [r7, #16]
 8000722:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000724:	2300      	movs	r3, #0
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	4b17      	ldr	r3, [pc, #92]	@ (8000788 <HAL_UART_MspInit+0x88>)
 800072a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072c:	4a16      	ldr	r2, [pc, #88]	@ (8000788 <HAL_UART_MspInit+0x88>)
 800072e:	f043 0301 	orr.w	r3, r3, #1
 8000732:	6313      	str	r3, [r2, #48]	@ 0x30
 8000734:	4b14      	ldr	r3, [pc, #80]	@ (8000788 <HAL_UART_MspInit+0x88>)
 8000736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000738:	f003 0301 	and.w	r3, r3, #1
 800073c:	60fb      	str	r3, [r7, #12]
 800073e:	68fb      	ldr	r3, [r7, #12]

	// PA2 ---> USART2_TX
	// PA3 ---> USART2_RX

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000740:	f107 0314 	add.w	r3, r7, #20
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
 800074c:	60da      	str	r2, [r3, #12]
 800074e:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8000750:	230c      	movs	r3, #12
 8000752:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000754:	2302      	movs	r3, #2
 8000756:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	2300      	movs	r3, #0
 800075a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800075c:	2303      	movs	r3, #3
 800075e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000760:	2307      	movs	r3, #7
 8000762:	627b      	str	r3, [r7, #36]	@ 0x24

	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000764:	f107 0314 	add.w	r3, r7, #20
 8000768:	4619      	mov	r1, r3
 800076a:	4808      	ldr	r0, [pc, #32]	@ (800078c <HAL_UART_MspInit+0x8c>)
 800076c:	f000 fa6e 	bl	8000c4c <HAL_GPIO_Init>

	HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000770:	2200      	movs	r2, #0
 8000772:	2100      	movs	r1, #0
 8000774:	2026      	movs	r0, #38	@ 0x26
 8000776:	f000 f994 	bl	8000aa2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 800077a:	2026      	movs	r0, #38	@ 0x26
 800077c:	f000 f9ad 	bl	8000ada <HAL_NVIC_EnableIRQ>
}
 8000780:	bf00      	nop
 8000782:	3728      	adds	r7, #40	@ 0x28
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	40023800 	.word	0x40023800
 800078c:	40020000 	.word	0x40020000

08000790 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000794:	4b06      	ldr	r3, [pc, #24]	@ (80007b0 <SystemInit+0x20>)
 8000796:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800079a:	4a05      	ldr	r2, [pc, #20]	@ (80007b0 <SystemInit+0x20>)
 800079c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007a4:	bf00      	nop
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	e000ed00 	.word	0xe000ed00

080007b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80007b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80007ec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80007b8:	f7ff ffea 	bl	8000790 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80007bc:	480c      	ldr	r0, [pc, #48]	@ (80007f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007be:	490d      	ldr	r1, [pc, #52]	@ (80007f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007c0:	4a0d      	ldr	r2, [pc, #52]	@ (80007f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007c4:	e002      	b.n	80007cc <LoopCopyDataInit>

080007c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ca:	3304      	adds	r3, #4

080007cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007d0:	d3f9      	bcc.n	80007c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007d2:	4a0a      	ldr	r2, [pc, #40]	@ (80007fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80007d4:	4c0a      	ldr	r4, [pc, #40]	@ (8000800 <LoopFillZerobss+0x22>)
  movs r3, #0
 80007d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007d8:	e001      	b.n	80007de <LoopFillZerobss>

080007da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007dc:	3204      	adds	r2, #4

080007de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007e0:	d3fb      	bcc.n	80007da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007e2:	f001 fc5f 	bl	80020a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007e6:	f7ff fea7 	bl	8000538 <main>
  bx  lr    
 80007ea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80007ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007f4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80007f8:	0800213c 	.word	0x0800213c
  ldr r2, =_sbss
 80007fc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000800:	200000e8 	.word	0x200000e8

08000804 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000804:	e7fe      	b.n	8000804 <ADC_IRQHandler>
	...

08000808 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800080c:	4b0e      	ldr	r3, [pc, #56]	@ (8000848 <HAL_Init+0x40>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a0d      	ldr	r2, [pc, #52]	@ (8000848 <HAL_Init+0x40>)
 8000812:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000816:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000818:	4b0b      	ldr	r3, [pc, #44]	@ (8000848 <HAL_Init+0x40>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a0a      	ldr	r2, [pc, #40]	@ (8000848 <HAL_Init+0x40>)
 800081e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000822:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000824:	4b08      	ldr	r3, [pc, #32]	@ (8000848 <HAL_Init+0x40>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a07      	ldr	r2, [pc, #28]	@ (8000848 <HAL_Init+0x40>)
 800082a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800082e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000830:	2003      	movs	r0, #3
 8000832:	f000 f92b 	bl	8000a8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000836:	2000      	movs	r0, #0
 8000838:	f000 f808 	bl	800084c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800083c:	f7ff ff3e 	bl	80006bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000840:	2300      	movs	r3, #0
}
 8000842:	4618      	mov	r0, r3
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40023c00 	.word	0x40023c00

0800084c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000854:	4b12      	ldr	r3, [pc, #72]	@ (80008a0 <HAL_InitTick+0x54>)
 8000856:	681a      	ldr	r2, [r3, #0]
 8000858:	4b12      	ldr	r3, [pc, #72]	@ (80008a4 <HAL_InitTick+0x58>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	4619      	mov	r1, r3
 800085e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000862:	fbb3 f3f1 	udiv	r3, r3, r1
 8000866:	fbb2 f3f3 	udiv	r3, r2, r3
 800086a:	4618      	mov	r0, r3
 800086c:	f000 f943 	bl	8000af6 <HAL_SYSTICK_Config>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000876:	2301      	movs	r3, #1
 8000878:	e00e      	b.n	8000898 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	2b0f      	cmp	r3, #15
 800087e:	d80a      	bhi.n	8000896 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000880:	2200      	movs	r2, #0
 8000882:	6879      	ldr	r1, [r7, #4]
 8000884:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000888:	f000 f90b 	bl	8000aa2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800088c:	4a06      	ldr	r2, [pc, #24]	@ (80008a8 <HAL_InitTick+0x5c>)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000892:	2300      	movs	r3, #0
 8000894:	e000      	b.n	8000898 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000896:	2301      	movs	r3, #1
}
 8000898:	4618      	mov	r0, r3
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	20000004 	.word	0x20000004
 80008a4:	2000000c 	.word	0x2000000c
 80008a8:	20000008 	.word	0x20000008

080008ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008b0:	4b06      	ldr	r3, [pc, #24]	@ (80008cc <HAL_IncTick+0x20>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	461a      	mov	r2, r3
 80008b6:	4b06      	ldr	r3, [pc, #24]	@ (80008d0 <HAL_IncTick+0x24>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4413      	add	r3, r2
 80008bc:	4a04      	ldr	r2, [pc, #16]	@ (80008d0 <HAL_IncTick+0x24>)
 80008be:	6013      	str	r3, [r2, #0]
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	2000000c 	.word	0x2000000c
 80008d0:	200000e4 	.word	0x200000e4

080008d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  return uwTick;
 80008d8:	4b03      	ldr	r3, [pc, #12]	@ (80008e8 <HAL_GetTick+0x14>)
 80008da:	681b      	ldr	r3, [r3, #0]
}
 80008dc:	4618      	mov	r0, r3
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	200000e4 	.word	0x200000e4

080008ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b085      	sub	sp, #20
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	f003 0307 	and.w	r3, r3, #7
 80008fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000930 <__NVIC_SetPriorityGrouping+0x44>)
 80008fe:	68db      	ldr	r3, [r3, #12]
 8000900:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000902:	68ba      	ldr	r2, [r7, #8]
 8000904:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000908:	4013      	ands	r3, r2
 800090a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000914:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000918:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800091c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800091e:	4a04      	ldr	r2, [pc, #16]	@ (8000930 <__NVIC_SetPriorityGrouping+0x44>)
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	60d3      	str	r3, [r2, #12]
}
 8000924:	bf00      	nop
 8000926:	3714      	adds	r7, #20
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr
 8000930:	e000ed00 	.word	0xe000ed00

08000934 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000938:	4b04      	ldr	r3, [pc, #16]	@ (800094c <__NVIC_GetPriorityGrouping+0x18>)
 800093a:	68db      	ldr	r3, [r3, #12]
 800093c:	0a1b      	lsrs	r3, r3, #8
 800093e:	f003 0307 	and.w	r3, r3, #7
}
 8000942:	4618      	mov	r0, r3
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr
 800094c:	e000ed00 	.word	0xe000ed00

08000950 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800095a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095e:	2b00      	cmp	r3, #0
 8000960:	db0b      	blt.n	800097a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000962:	79fb      	ldrb	r3, [r7, #7]
 8000964:	f003 021f 	and.w	r2, r3, #31
 8000968:	4907      	ldr	r1, [pc, #28]	@ (8000988 <__NVIC_EnableIRQ+0x38>)
 800096a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800096e:	095b      	lsrs	r3, r3, #5
 8000970:	2001      	movs	r0, #1
 8000972:	fa00 f202 	lsl.w	r2, r0, r2
 8000976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800097a:	bf00      	nop
 800097c:	370c      	adds	r7, #12
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	e000e100 	.word	0xe000e100

0800098c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	6039      	str	r1, [r7, #0]
 8000996:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800099c:	2b00      	cmp	r3, #0
 800099e:	db0a      	blt.n	80009b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	b2da      	uxtb	r2, r3
 80009a4:	490c      	ldr	r1, [pc, #48]	@ (80009d8 <__NVIC_SetPriority+0x4c>)
 80009a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009aa:	0112      	lsls	r2, r2, #4
 80009ac:	b2d2      	uxtb	r2, r2
 80009ae:	440b      	add	r3, r1
 80009b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009b4:	e00a      	b.n	80009cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	b2da      	uxtb	r2, r3
 80009ba:	4908      	ldr	r1, [pc, #32]	@ (80009dc <__NVIC_SetPriority+0x50>)
 80009bc:	79fb      	ldrb	r3, [r7, #7]
 80009be:	f003 030f 	and.w	r3, r3, #15
 80009c2:	3b04      	subs	r3, #4
 80009c4:	0112      	lsls	r2, r2, #4
 80009c6:	b2d2      	uxtb	r2, r2
 80009c8:	440b      	add	r3, r1
 80009ca:	761a      	strb	r2, [r3, #24]
}
 80009cc:	bf00      	nop
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr
 80009d8:	e000e100 	.word	0xe000e100
 80009dc:	e000ed00 	.word	0xe000ed00

080009e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b089      	sub	sp, #36	@ 0x24
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	60f8      	str	r0, [r7, #12]
 80009e8:	60b9      	str	r1, [r7, #8]
 80009ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	f003 0307 	and.w	r3, r3, #7
 80009f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009f4:	69fb      	ldr	r3, [r7, #28]
 80009f6:	f1c3 0307 	rsb	r3, r3, #7
 80009fa:	2b04      	cmp	r3, #4
 80009fc:	bf28      	it	cs
 80009fe:	2304      	movcs	r3, #4
 8000a00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a02:	69fb      	ldr	r3, [r7, #28]
 8000a04:	3304      	adds	r3, #4
 8000a06:	2b06      	cmp	r3, #6
 8000a08:	d902      	bls.n	8000a10 <NVIC_EncodePriority+0x30>
 8000a0a:	69fb      	ldr	r3, [r7, #28]
 8000a0c:	3b03      	subs	r3, #3
 8000a0e:	e000      	b.n	8000a12 <NVIC_EncodePriority+0x32>
 8000a10:	2300      	movs	r3, #0
 8000a12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a14:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000a18:	69bb      	ldr	r3, [r7, #24]
 8000a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1e:	43da      	mvns	r2, r3
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	401a      	ands	r2, r3
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a28:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a32:	43d9      	mvns	r1, r3
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a38:	4313      	orrs	r3, r2
         );
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3724      	adds	r7, #36	@ 0x24
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
	...

08000a48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	3b01      	subs	r3, #1
 8000a54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a58:	d301      	bcc.n	8000a5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	e00f      	b.n	8000a7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a88 <SysTick_Config+0x40>)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	3b01      	subs	r3, #1
 8000a64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a66:	210f      	movs	r1, #15
 8000a68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a6c:	f7ff ff8e 	bl	800098c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a70:	4b05      	ldr	r3, [pc, #20]	@ (8000a88 <SysTick_Config+0x40>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a76:	4b04      	ldr	r3, [pc, #16]	@ (8000a88 <SysTick_Config+0x40>)
 8000a78:	2207      	movs	r2, #7
 8000a7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a7c:	2300      	movs	r3, #0
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	e000e010 	.word	0xe000e010

08000a8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a94:	6878      	ldr	r0, [r7, #4]
 8000a96:	f7ff ff29 	bl	80008ec <__NVIC_SetPriorityGrouping>
}
 8000a9a:	bf00      	nop
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	b086      	sub	sp, #24
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	60b9      	str	r1, [r7, #8]
 8000aac:	607a      	str	r2, [r7, #4]
 8000aae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ab4:	f7ff ff3e 	bl	8000934 <__NVIC_GetPriorityGrouping>
 8000ab8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000aba:	687a      	ldr	r2, [r7, #4]
 8000abc:	68b9      	ldr	r1, [r7, #8]
 8000abe:	6978      	ldr	r0, [r7, #20]
 8000ac0:	f7ff ff8e 	bl	80009e0 <NVIC_EncodePriority>
 8000ac4:	4602      	mov	r2, r0
 8000ac6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aca:	4611      	mov	r1, r2
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff ff5d 	bl	800098c <__NVIC_SetPriority>
}
 8000ad2:	bf00      	nop
 8000ad4:	3718      	adds	r7, #24
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b082      	sub	sp, #8
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff ff31 	bl	8000950 <__NVIC_EnableIRQ>
}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000af6:	b580      	push	{r7, lr}
 8000af8:	b082      	sub	sp, #8
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000afe:	6878      	ldr	r0, [r7, #4]
 8000b00:	f7ff ffa2 	bl	8000a48 <SysTick_Config>
 8000b04:	4603      	mov	r3, r0
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000b12:	f000 f802 	bl	8000b1a <HAL_SYSTICK_Callback>
}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}

08000b1a <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000b1e:	bf00      	nop
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr

08000b28 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b34:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000b36:	f7ff fecd 	bl	80008d4 <HAL_GetTick>
 8000b3a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	2b02      	cmp	r3, #2
 8000b46:	d008      	beq.n	8000b5a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2280      	movs	r2, #128	@ 0x80
 8000b4c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2200      	movs	r2, #0
 8000b52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
 8000b58:	e052      	b.n	8000c00 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f022 0216 	bic.w	r2, r2, #22
 8000b68:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	695a      	ldr	r2, [r3, #20]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000b78:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d103      	bne.n	8000b8a <HAL_DMA_Abort+0x62>
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d007      	beq.n	8000b9a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f022 0208 	bic.w	r2, r2, #8
 8000b98:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f022 0201 	bic.w	r2, r2, #1
 8000ba8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000baa:	e013      	b.n	8000bd4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000bac:	f7ff fe92 	bl	80008d4 <HAL_GetTick>
 8000bb0:	4602      	mov	r2, r0
 8000bb2:	68bb      	ldr	r3, [r7, #8]
 8000bb4:	1ad3      	subs	r3, r2, r3
 8000bb6:	2b05      	cmp	r3, #5
 8000bb8:	d90c      	bls.n	8000bd4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2220      	movs	r2, #32
 8000bbe:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2203      	movs	r2, #3
 8000bc4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2200      	movs	r2, #0
 8000bcc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	e015      	b.n	8000c00 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f003 0301 	and.w	r3, r3, #1
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d1e4      	bne.n	8000bac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000be6:	223f      	movs	r2, #63	@ 0x3f
 8000be8:	409a      	lsls	r2, r3
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8000bfe:	2300      	movs	r3, #0
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3710      	adds	r7, #16
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	2b02      	cmp	r3, #2
 8000c1a:	d004      	beq.n	8000c26 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2280      	movs	r2, #128	@ 0x80
 8000c20:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
 8000c24:	e00c      	b.n	8000c40 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2205      	movs	r2, #5
 8000c2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f022 0201 	bic.w	r2, r2, #1
 8000c3c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000c3e:	2300      	movs	r3, #0
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b089      	sub	sp, #36	@ 0x24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c56:	2300      	movs	r3, #0
 8000c58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c62:	2300      	movs	r3, #0
 8000c64:	61fb      	str	r3, [r7, #28]
 8000c66:	e159      	b.n	8000f1c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c68:	2201      	movs	r2, #1
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	697a      	ldr	r2, [r7, #20]
 8000c78:	4013      	ands	r3, r2
 8000c7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c7c:	693a      	ldr	r2, [r7, #16]
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	f040 8148 	bne.w	8000f16 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	f003 0303 	and.w	r3, r3, #3
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	d005      	beq.n	8000c9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c9a:	2b02      	cmp	r3, #2
 8000c9c:	d130      	bne.n	8000d00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	689b      	ldr	r3, [r3, #8]
 8000ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ca4:	69fb      	ldr	r3, [r7, #28]
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	2203      	movs	r2, #3
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	43db      	mvns	r3, r3
 8000cb0:	69ba      	ldr	r2, [r7, #24]
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	68da      	ldr	r2, [r3, #12]
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	69ba      	ldr	r2, [r7, #24]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	69ba      	ldr	r2, [r7, #24]
 8000ccc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cdc:	43db      	mvns	r3, r3
 8000cde:	69ba      	ldr	r2, [r7, #24]
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	091b      	lsrs	r3, r3, #4
 8000cea:	f003 0201 	and.w	r2, r3, #1
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf4:	69ba      	ldr	r2, [r7, #24]
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	69ba      	ldr	r2, [r7, #24]
 8000cfe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	f003 0303 	and.w	r3, r3, #3
 8000d08:	2b03      	cmp	r3, #3
 8000d0a:	d017      	beq.n	8000d3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	005b      	lsls	r3, r3, #1
 8000d16:	2203      	movs	r2, #3
 8000d18:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1c:	43db      	mvns	r3, r3
 8000d1e:	69ba      	ldr	r2, [r7, #24]
 8000d20:	4013      	ands	r3, r2
 8000d22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	689a      	ldr	r2, [r3, #8]
 8000d28:	69fb      	ldr	r3, [r7, #28]
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	69ba      	ldr	r2, [r7, #24]
 8000d32:	4313      	orrs	r3, r2
 8000d34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	69ba      	ldr	r2, [r7, #24]
 8000d3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f003 0303 	and.w	r3, r3, #3
 8000d44:	2b02      	cmp	r3, #2
 8000d46:	d123      	bne.n	8000d90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	08da      	lsrs	r2, r3, #3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	3208      	adds	r2, #8
 8000d50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	f003 0307 	and.w	r3, r3, #7
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	220f      	movs	r2, #15
 8000d60:	fa02 f303 	lsl.w	r3, r2, r3
 8000d64:	43db      	mvns	r3, r3
 8000d66:	69ba      	ldr	r2, [r7, #24]
 8000d68:	4013      	ands	r3, r2
 8000d6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	691a      	ldr	r2, [r3, #16]
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	f003 0307 	and.w	r3, r3, #7
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	69ba      	ldr	r2, [r7, #24]
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	08da      	lsrs	r2, r3, #3
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	3208      	adds	r2, #8
 8000d8a:	69b9      	ldr	r1, [r7, #24]
 8000d8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	2203      	movs	r2, #3
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	43db      	mvns	r3, r3
 8000da2:	69ba      	ldr	r2, [r7, #24]
 8000da4:	4013      	ands	r3, r2
 8000da6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f003 0203 	and.w	r2, r3, #3
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	005b      	lsls	r3, r3, #1
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	69ba      	ldr	r2, [r7, #24]
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	69ba      	ldr	r2, [r7, #24]
 8000dc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	f000 80a2 	beq.w	8000f16 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60fb      	str	r3, [r7, #12]
 8000dd6:	4b57      	ldr	r3, [pc, #348]	@ (8000f34 <HAL_GPIO_Init+0x2e8>)
 8000dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dda:	4a56      	ldr	r2, [pc, #344]	@ (8000f34 <HAL_GPIO_Init+0x2e8>)
 8000ddc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000de0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000de2:	4b54      	ldr	r3, [pc, #336]	@ (8000f34 <HAL_GPIO_Init+0x2e8>)
 8000de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000de6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dee:	4a52      	ldr	r2, [pc, #328]	@ (8000f38 <HAL_GPIO_Init+0x2ec>)
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	089b      	lsrs	r3, r3, #2
 8000df4:	3302      	adds	r3, #2
 8000df6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	f003 0303 	and.w	r3, r3, #3
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	220f      	movs	r2, #15
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	43db      	mvns	r3, r3
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	4013      	ands	r3, r2
 8000e10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4a49      	ldr	r2, [pc, #292]	@ (8000f3c <HAL_GPIO_Init+0x2f0>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d019      	beq.n	8000e4e <HAL_GPIO_Init+0x202>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4a48      	ldr	r2, [pc, #288]	@ (8000f40 <HAL_GPIO_Init+0x2f4>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d013      	beq.n	8000e4a <HAL_GPIO_Init+0x1fe>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4a47      	ldr	r2, [pc, #284]	@ (8000f44 <HAL_GPIO_Init+0x2f8>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d00d      	beq.n	8000e46 <HAL_GPIO_Init+0x1fa>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4a46      	ldr	r2, [pc, #280]	@ (8000f48 <HAL_GPIO_Init+0x2fc>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d007      	beq.n	8000e42 <HAL_GPIO_Init+0x1f6>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4a45      	ldr	r2, [pc, #276]	@ (8000f4c <HAL_GPIO_Init+0x300>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d101      	bne.n	8000e3e <HAL_GPIO_Init+0x1f2>
 8000e3a:	2304      	movs	r3, #4
 8000e3c:	e008      	b.n	8000e50 <HAL_GPIO_Init+0x204>
 8000e3e:	2307      	movs	r3, #7
 8000e40:	e006      	b.n	8000e50 <HAL_GPIO_Init+0x204>
 8000e42:	2303      	movs	r3, #3
 8000e44:	e004      	b.n	8000e50 <HAL_GPIO_Init+0x204>
 8000e46:	2302      	movs	r3, #2
 8000e48:	e002      	b.n	8000e50 <HAL_GPIO_Init+0x204>
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e000      	b.n	8000e50 <HAL_GPIO_Init+0x204>
 8000e4e:	2300      	movs	r3, #0
 8000e50:	69fa      	ldr	r2, [r7, #28]
 8000e52:	f002 0203 	and.w	r2, r2, #3
 8000e56:	0092      	lsls	r2, r2, #2
 8000e58:	4093      	lsls	r3, r2
 8000e5a:	69ba      	ldr	r2, [r7, #24]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e60:	4935      	ldr	r1, [pc, #212]	@ (8000f38 <HAL_GPIO_Init+0x2ec>)
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	089b      	lsrs	r3, r3, #2
 8000e66:	3302      	adds	r3, #2
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e6e:	4b38      	ldr	r3, [pc, #224]	@ (8000f50 <HAL_GPIO_Init+0x304>)
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	43db      	mvns	r3, r3
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d003      	beq.n	8000e92 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e92:	4a2f      	ldr	r2, [pc, #188]	@ (8000f50 <HAL_GPIO_Init+0x304>)
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e98:	4b2d      	ldr	r3, [pc, #180]	@ (8000f50 <HAL_GPIO_Init+0x304>)
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d003      	beq.n	8000ebc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ebc:	4a24      	ldr	r2, [pc, #144]	@ (8000f50 <HAL_GPIO_Init+0x304>)
 8000ebe:	69bb      	ldr	r3, [r7, #24]
 8000ec0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ec2:	4b23      	ldr	r3, [pc, #140]	@ (8000f50 <HAL_GPIO_Init+0x304>)
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d003      	beq.n	8000ee6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ee6:	4a1a      	ldr	r2, [pc, #104]	@ (8000f50 <HAL_GPIO_Init+0x304>)
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000eec:	4b18      	ldr	r3, [pc, #96]	@ (8000f50 <HAL_GPIO_Init+0x304>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d003      	beq.n	8000f10 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f10:	4a0f      	ldr	r2, [pc, #60]	@ (8000f50 <HAL_GPIO_Init+0x304>)
 8000f12:	69bb      	ldr	r3, [r7, #24]
 8000f14:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	61fb      	str	r3, [r7, #28]
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	2b0f      	cmp	r3, #15
 8000f20:	f67f aea2 	bls.w	8000c68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f24:	bf00      	nop
 8000f26:	bf00      	nop
 8000f28:	3724      	adds	r7, #36	@ 0x24
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	40023800 	.word	0x40023800
 8000f38:	40013800 	.word	0x40013800
 8000f3c:	40020000 	.word	0x40020000
 8000f40:	40020400 	.word	0x40020400
 8000f44:	40020800 	.word	0x40020800
 8000f48:	40020c00 	.word	0x40020c00
 8000f4c:	40021000 	.word	0x40021000
 8000f50:	40013c00 	.word	0x40013c00

08000f54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000f58:	4b03      	ldr	r3, [pc, #12]	@ (8000f68 <HAL_RCC_GetHCLKFreq+0x14>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	20000004 	.word	0x20000004

08000f6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000f70:	f7ff fff0 	bl	8000f54 <HAL_RCC_GetHCLKFreq>
 8000f74:	4602      	mov	r2, r0
 8000f76:	4b05      	ldr	r3, [pc, #20]	@ (8000f8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	0a9b      	lsrs	r3, r3, #10
 8000f7c:	f003 0307 	and.w	r3, r3, #7
 8000f80:	4903      	ldr	r1, [pc, #12]	@ (8000f90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000f82:	5ccb      	ldrb	r3, [r1, r3]
 8000f84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40023800 	.word	0x40023800
 8000f90:	08002124 	.word	0x08002124

08000f94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000f98:	f7ff ffdc 	bl	8000f54 <HAL_RCC_GetHCLKFreq>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	4b05      	ldr	r3, [pc, #20]	@ (8000fb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	0b5b      	lsrs	r3, r3, #13
 8000fa4:	f003 0307 	and.w	r3, r3, #7
 8000fa8:	4903      	ldr	r1, [pc, #12]	@ (8000fb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000faa:	5ccb      	ldrb	r3, [r1, r3]
 8000fac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40023800 	.word	0x40023800
 8000fb8:	08002124 	.word	0x08002124

08000fbc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d101      	bne.n	8000fce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e042      	b.n	8001054 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d106      	bne.n	8000fe8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f7ff fb8c 	bl	8000700 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2224      	movs	r2, #36	@ 0x24
 8000fec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	68da      	ldr	r2, [r3, #12]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8000ffe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f000 fdd3 	bl	8001bac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	691a      	ldr	r2, [r3, #16]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001014:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	695a      	ldr	r2, [r3, #20]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001024:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	68da      	ldr	r2, [r3, #12]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001034:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2200      	movs	r2, #0
 800103a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2220      	movs	r2, #32
 8001040:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2220      	movs	r2, #32
 8001048:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2200      	movs	r2, #0
 8001050:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001052:	2300      	movs	r3, #0
}
 8001054:	4618      	mov	r0, r3
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b08a      	sub	sp, #40	@ 0x28
 8001060:	af02      	add	r7, sp, #8
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	603b      	str	r3, [r7, #0]
 8001068:	4613      	mov	r3, r2
 800106a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001076:	b2db      	uxtb	r3, r3
 8001078:	2b20      	cmp	r3, #32
 800107a:	d175      	bne.n	8001168 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d002      	beq.n	8001088 <HAL_UART_Transmit+0x2c>
 8001082:	88fb      	ldrh	r3, [r7, #6]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d101      	bne.n	800108c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001088:	2301      	movs	r3, #1
 800108a:	e06e      	b.n	800116a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	2200      	movs	r2, #0
 8001090:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	2221      	movs	r2, #33	@ 0x21
 8001096:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800109a:	f7ff fc1b 	bl	80008d4 <HAL_GetTick>
 800109e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	88fa      	ldrh	r2, [r7, #6]
 80010a4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	88fa      	ldrh	r2, [r7, #6]
 80010aa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80010b4:	d108      	bne.n	80010c8 <HAL_UART_Transmit+0x6c>
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	691b      	ldr	r3, [r3, #16]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d104      	bne.n	80010c8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	61bb      	str	r3, [r7, #24]
 80010c6:	e003      	b.n	80010d0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80010d0:	e02e      	b.n	8001130 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	9300      	str	r3, [sp, #0]
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	2200      	movs	r2, #0
 80010da:	2180      	movs	r1, #128	@ 0x80
 80010dc:	68f8      	ldr	r0, [r7, #12]
 80010de:	f000 fb37 	bl	8001750 <UART_WaitOnFlagUntilTimeout>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d005      	beq.n	80010f4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	2220      	movs	r2, #32
 80010ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80010f0:	2303      	movs	r3, #3
 80010f2:	e03a      	b.n	800116a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d10b      	bne.n	8001112 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	881b      	ldrh	r3, [r3, #0]
 80010fe:	461a      	mov	r2, r3
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001108:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	3302      	adds	r3, #2
 800110e:	61bb      	str	r3, [r7, #24]
 8001110:	e007      	b.n	8001122 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	781a      	ldrb	r2, [r3, #0]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	3301      	adds	r3, #1
 8001120:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001126:	b29b      	uxth	r3, r3
 8001128:	3b01      	subs	r3, #1
 800112a:	b29a      	uxth	r2, r3
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001134:	b29b      	uxth	r3, r3
 8001136:	2b00      	cmp	r3, #0
 8001138:	d1cb      	bne.n	80010d2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	9300      	str	r3, [sp, #0]
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	2200      	movs	r2, #0
 8001142:	2140      	movs	r1, #64	@ 0x40
 8001144:	68f8      	ldr	r0, [r7, #12]
 8001146:	f000 fb03 	bl	8001750 <UART_WaitOnFlagUntilTimeout>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d005      	beq.n	800115c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	2220      	movs	r2, #32
 8001154:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001158:	2303      	movs	r3, #3
 800115a:	e006      	b.n	800116a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	2220      	movs	r2, #32
 8001160:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001164:	2300      	movs	r3, #0
 8001166:	e000      	b.n	800116a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001168:	2302      	movs	r3, #2
  }
}
 800116a:	4618      	mov	r0, r3
 800116c:	3720      	adds	r7, #32
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b084      	sub	sp, #16
 8001176:	af00      	add	r7, sp, #0
 8001178:	60f8      	str	r0, [r7, #12]
 800117a:	60b9      	str	r1, [r7, #8]
 800117c:	4613      	mov	r3, r2
 800117e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001186:	b2db      	uxtb	r3, r3
 8001188:	2b20      	cmp	r3, #32
 800118a:	d112      	bne.n	80011b2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d002      	beq.n	8001198 <HAL_UART_Receive_IT+0x26>
 8001192:	88fb      	ldrh	r3, [r7, #6]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d101      	bne.n	800119c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	e00b      	b.n	80011b4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	2200      	movs	r2, #0
 80011a0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80011a2:	88fb      	ldrh	r3, [r7, #6]
 80011a4:	461a      	mov	r2, r3
 80011a6:	68b9      	ldr	r1, [r7, #8]
 80011a8:	68f8      	ldr	r0, [r7, #12]
 80011aa:	f000 fb2a 	bl	8001802 <UART_Start_Receive_IT>
 80011ae:	4603      	mov	r3, r0
 80011b0:	e000      	b.n	80011b4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80011b2:	2302      	movs	r3, #2
  }
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3710      	adds	r7, #16
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b0ba      	sub	sp, #232	@ 0xe8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	695b      	ldr	r3, [r3, #20]
 80011de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80011e2:	2300      	movs	r3, #0
 80011e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80011e8:	2300      	movs	r3, #0
 80011ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80011ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80011f2:	f003 030f 	and.w	r3, r3, #15
 80011f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80011fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d10f      	bne.n	8001222 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001206:	f003 0320 	and.w	r3, r3, #32
 800120a:	2b00      	cmp	r3, #0
 800120c:	d009      	beq.n	8001222 <HAL_UART_IRQHandler+0x66>
 800120e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001212:	f003 0320 	and.w	r3, r3, #32
 8001216:	2b00      	cmp	r3, #0
 8001218:	d003      	beq.n	8001222 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f000 fc07 	bl	8001a2e <UART_Receive_IT>
      return;
 8001220:	e273      	b.n	800170a <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001222:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001226:	2b00      	cmp	r3, #0
 8001228:	f000 80de 	beq.w	80013e8 <HAL_UART_IRQHandler+0x22c>
 800122c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001230:	f003 0301 	and.w	r3, r3, #1
 8001234:	2b00      	cmp	r3, #0
 8001236:	d106      	bne.n	8001246 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001238:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800123c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8001240:	2b00      	cmp	r3, #0
 8001242:	f000 80d1 	beq.w	80013e8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	2b00      	cmp	r3, #0
 8001250:	d00b      	beq.n	800126a <HAL_UART_IRQHandler+0xae>
 8001252:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001256:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800125a:	2b00      	cmp	r3, #0
 800125c:	d005      	beq.n	800126a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001262:	f043 0201 	orr.w	r2, r3, #1
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800126a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800126e:	f003 0304 	and.w	r3, r3, #4
 8001272:	2b00      	cmp	r3, #0
 8001274:	d00b      	beq.n	800128e <HAL_UART_IRQHandler+0xd2>
 8001276:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	2b00      	cmp	r3, #0
 8001280:	d005      	beq.n	800128e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001286:	f043 0202 	orr.w	r2, r3, #2
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800128e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	2b00      	cmp	r3, #0
 8001298:	d00b      	beq.n	80012b2 <HAL_UART_IRQHandler+0xf6>
 800129a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d005      	beq.n	80012b2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012aa:	f043 0204 	orr.w	r2, r3, #4
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80012b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80012b6:	f003 0308 	and.w	r3, r3, #8
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d011      	beq.n	80012e2 <HAL_UART_IRQHandler+0x126>
 80012be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80012c2:	f003 0320 	and.w	r3, r3, #32
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d105      	bne.n	80012d6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80012ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d005      	beq.n	80012e2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012da:	f043 0208 	orr.w	r2, r3, #8
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	f000 820a 	beq.w	8001700 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80012ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80012f0:	f003 0320 	and.w	r3, r3, #32
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d008      	beq.n	800130a <HAL_UART_IRQHandler+0x14e>
 80012f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80012fc:	f003 0320 	and.w	r3, r3, #32
 8001300:	2b00      	cmp	r3, #0
 8001302:	d002      	beq.n	800130a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f000 fb92 	bl	8001a2e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	695b      	ldr	r3, [r3, #20]
 8001310:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001314:	2b40      	cmp	r3, #64	@ 0x40
 8001316:	bf0c      	ite	eq
 8001318:	2301      	moveq	r3, #1
 800131a:	2300      	movne	r3, #0
 800131c:	b2db      	uxtb	r3, r3
 800131e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001326:	f003 0308 	and.w	r3, r3, #8
 800132a:	2b00      	cmp	r3, #0
 800132c:	d103      	bne.n	8001336 <HAL_UART_IRQHandler+0x17a>
 800132e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001332:	2b00      	cmp	r3, #0
 8001334:	d04f      	beq.n	80013d6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f000 fa9d 	bl	8001876 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	695b      	ldr	r3, [r3, #20]
 8001342:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001346:	2b40      	cmp	r3, #64	@ 0x40
 8001348:	d141      	bne.n	80013ce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	3314      	adds	r3, #20
 8001350:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001354:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001358:	e853 3f00 	ldrex	r3, [r3]
 800135c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8001360:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001364:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001368:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	3314      	adds	r3, #20
 8001372:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8001376:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800137a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800137e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8001382:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001386:	e841 2300 	strex	r3, r2, [r1]
 800138a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800138e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d1d9      	bne.n	800134a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800139a:	2b00      	cmp	r3, #0
 800139c:	d013      	beq.n	80013c6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013a2:	4a8a      	ldr	r2, [pc, #552]	@ (80015cc <HAL_UART_IRQHandler+0x410>)
 80013a4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff fc2c 	bl	8000c08 <HAL_DMA_Abort_IT>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d016      	beq.n	80013e4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80013c0:	4610      	mov	r0, r2
 80013c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80013c4:	e00e      	b.n	80013e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f000 f9ac 	bl	8001724 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80013cc:	e00a      	b.n	80013e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f000 f9a8 	bl	8001724 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80013d4:	e006      	b.n	80013e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f000 f9a4 	bl	8001724 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80013e2:	e18d      	b.n	8001700 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80013e4:	bf00      	nop
    return;
 80013e6:	e18b      	b.n	8001700 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	f040 8167 	bne.w	80016c0 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80013f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80013f6:	f003 0310 	and.w	r3, r3, #16
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	f000 8160 	beq.w	80016c0 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8001400:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001404:	f003 0310 	and.w	r3, r3, #16
 8001408:	2b00      	cmp	r3, #0
 800140a:	f000 8159 	beq.w	80016c0 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800140e:	2300      	movs	r3, #0
 8001410:	60bb      	str	r3, [r7, #8]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	60bb      	str	r3, [r7, #8]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	60bb      	str	r3, [r7, #8]
 8001422:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	695b      	ldr	r3, [r3, #20]
 800142a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800142e:	2b40      	cmp	r3, #64	@ 0x40
 8001430:	f040 80ce 	bne.w	80015d0 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001440:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8001444:	2b00      	cmp	r3, #0
 8001446:	f000 80a9 	beq.w	800159c <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800144e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001452:	429a      	cmp	r2, r3
 8001454:	f080 80a2 	bcs.w	800159c <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800145e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001464:	69db      	ldr	r3, [r3, #28]
 8001466:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800146a:	f000 8088 	beq.w	800157e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	330c      	adds	r3, #12
 8001474:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001478:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800147c:	e853 3f00 	ldrex	r3, [r3]
 8001480:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8001484:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001488:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800148c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	330c      	adds	r3, #12
 8001496:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800149a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800149e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80014a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80014a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80014aa:	e841 2300 	strex	r3, r2, [r1]
 80014ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80014b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d1d9      	bne.n	800146e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	3314      	adds	r3, #20
 80014c0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80014c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80014c4:	e853 3f00 	ldrex	r3, [r3]
 80014c8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80014ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80014cc:	f023 0301 	bic.w	r3, r3, #1
 80014d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	3314      	adds	r3, #20
 80014da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80014de:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80014e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80014e4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80014e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80014ea:	e841 2300 	strex	r3, r2, [r1]
 80014ee:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80014f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1e1      	bne.n	80014ba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	3314      	adds	r3, #20
 80014fc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80014fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001500:	e853 3f00 	ldrex	r3, [r3]
 8001504:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8001506:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001508:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800150c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	3314      	adds	r3, #20
 8001516:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800151a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800151c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800151e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8001520:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001522:	e841 2300 	strex	r3, r2, [r1]
 8001526:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8001528:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800152a:	2b00      	cmp	r3, #0
 800152c:	d1e3      	bne.n	80014f6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2220      	movs	r2, #32
 8001532:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2200      	movs	r2, #0
 800153a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	330c      	adds	r3, #12
 8001542:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001544:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001546:	e853 3f00 	ldrex	r3, [r3]
 800154a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800154c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800154e:	f023 0310 	bic.w	r3, r3, #16
 8001552:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	330c      	adds	r3, #12
 800155c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8001560:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001562:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001564:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001566:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001568:	e841 2300 	strex	r3, r2, [r1]
 800156c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800156e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001570:	2b00      	cmp	r3, #0
 8001572:	d1e3      	bne.n	800153c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff fad5 	bl	8000b28 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2202      	movs	r2, #2
 8001582:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800158c:	b29b      	uxth	r3, r3
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	b29b      	uxth	r3, r3
 8001592:	4619      	mov	r1, r3
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f000 f8cf 	bl	8001738 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800159a:	e0b3      	b.n	8001704 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80015a0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80015a4:	429a      	cmp	r2, r3
 80015a6:	f040 80ad 	bne.w	8001704 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015ae:	69db      	ldr	r3, [r3, #28]
 80015b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80015b4:	f040 80a6 	bne.w	8001704 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2202      	movs	r2, #2
 80015bc:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80015c2:	4619      	mov	r1, r3
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f000 f8b7 	bl	8001738 <HAL_UARTEx_RxEventCallback>
      return;
 80015ca:	e09b      	b.n	8001704 <HAL_UART_IRQHandler+0x548>
 80015cc:	0800193d 	.word	0x0800193d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80015d8:	b29b      	uxth	r3, r3
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f000 808e 	beq.w	8001708 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80015ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	f000 8089 	beq.w	8001708 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	330c      	adds	r3, #12
 80015fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80015fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001600:	e853 3f00 	ldrex	r3, [r3]
 8001604:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8001606:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001608:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800160c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	330c      	adds	r3, #12
 8001616:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800161a:	647a      	str	r2, [r7, #68]	@ 0x44
 800161c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800161e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001620:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001622:	e841 2300 	strex	r3, r2, [r1]
 8001626:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8001628:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1e3      	bne.n	80015f6 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	3314      	adds	r3, #20
 8001634:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001638:	e853 3f00 	ldrex	r3, [r3]
 800163c:	623b      	str	r3, [r7, #32]
   return(result);
 800163e:	6a3b      	ldr	r3, [r7, #32]
 8001640:	f023 0301 	bic.w	r3, r3, #1
 8001644:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	3314      	adds	r3, #20
 800164e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8001652:	633a      	str	r2, [r7, #48]	@ 0x30
 8001654:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001656:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001658:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800165a:	e841 2300 	strex	r3, r2, [r1]
 800165e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8001660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001662:	2b00      	cmp	r3, #0
 8001664:	d1e3      	bne.n	800162e <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2220      	movs	r2, #32
 800166a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	330c      	adds	r3, #12
 800167a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	e853 3f00 	ldrex	r3, [r3]
 8001682:	60fb      	str	r3, [r7, #12]
   return(result);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f023 0310 	bic.w	r3, r3, #16
 800168a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	330c      	adds	r3, #12
 8001694:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8001698:	61fa      	str	r2, [r7, #28]
 800169a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800169c:	69b9      	ldr	r1, [r7, #24]
 800169e:	69fa      	ldr	r2, [r7, #28]
 80016a0:	e841 2300 	strex	r3, r2, [r1]
 80016a4:	617b      	str	r3, [r7, #20]
   return(result);
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d1e3      	bne.n	8001674 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2202      	movs	r2, #2
 80016b0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80016b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80016b6:	4619      	mov	r1, r3
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f000 f83d 	bl	8001738 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80016be:	e023      	b.n	8001708 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80016c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80016c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d009      	beq.n	80016e0 <HAL_UART_IRQHandler+0x524>
 80016cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80016d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d003      	beq.n	80016e0 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f000 f940 	bl	800195e <UART_Transmit_IT>
    return;
 80016de:	e014      	b.n	800170a <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80016e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80016e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d00e      	beq.n	800170a <HAL_UART_IRQHandler+0x54e>
 80016ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80016f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d008      	beq.n	800170a <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f000 f980 	bl	80019fe <UART_EndTransmit_IT>
    return;
 80016fe:	e004      	b.n	800170a <HAL_UART_IRQHandler+0x54e>
    return;
 8001700:	bf00      	nop
 8001702:	e002      	b.n	800170a <HAL_UART_IRQHandler+0x54e>
      return;
 8001704:	bf00      	nop
 8001706:	e000      	b.n	800170a <HAL_UART_IRQHandler+0x54e>
      return;
 8001708:	bf00      	nop
  }
}
 800170a:	37e8      	adds	r7, #232	@ 0xe8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800172c:	bf00      	nop
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	460b      	mov	r3, r1
 8001742:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001744:	bf00      	nop
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	603b      	str	r3, [r7, #0]
 800175c:	4613      	mov	r3, r2
 800175e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001760:	e03b      	b.n	80017da <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001762:	6a3b      	ldr	r3, [r7, #32]
 8001764:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001768:	d037      	beq.n	80017da <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800176a:	f7ff f8b3 	bl	80008d4 <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	6a3a      	ldr	r2, [r7, #32]
 8001776:	429a      	cmp	r2, r3
 8001778:	d302      	bcc.n	8001780 <UART_WaitOnFlagUntilTimeout+0x30>
 800177a:	6a3b      	ldr	r3, [r7, #32]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d101      	bne.n	8001784 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e03a      	b.n	80017fa <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	68db      	ldr	r3, [r3, #12]
 800178a:	f003 0304 	and.w	r3, r3, #4
 800178e:	2b00      	cmp	r3, #0
 8001790:	d023      	beq.n	80017da <UART_WaitOnFlagUntilTimeout+0x8a>
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	2b80      	cmp	r3, #128	@ 0x80
 8001796:	d020      	beq.n	80017da <UART_WaitOnFlagUntilTimeout+0x8a>
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	2b40      	cmp	r3, #64	@ 0x40
 800179c:	d01d      	beq.n	80017da <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0308 	and.w	r3, r3, #8
 80017a8:	2b08      	cmp	r3, #8
 80017aa:	d116      	bne.n	80017da <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80017ac:	2300      	movs	r3, #0
 80017ae:	617b      	str	r3, [r7, #20]
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	617b      	str	r3, [r7, #20]
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	617b      	str	r3, [r7, #20]
 80017c0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80017c2:	68f8      	ldr	r0, [r7, #12]
 80017c4:	f000 f857 	bl	8001876 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2208      	movs	r2, #8
 80017cc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	2200      	movs	r2, #0
 80017d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e00f      	b.n	80017fa <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	4013      	ands	r3, r2
 80017e4:	68ba      	ldr	r2, [r7, #8]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	bf0c      	ite	eq
 80017ea:	2301      	moveq	r3, #1
 80017ec:	2300      	movne	r3, #0
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	461a      	mov	r2, r3
 80017f2:	79fb      	ldrb	r3, [r7, #7]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d0b4      	beq.n	8001762 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3718      	adds	r7, #24
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001802:	b480      	push	{r7}
 8001804:	b085      	sub	sp, #20
 8001806:	af00      	add	r7, sp, #0
 8001808:	60f8      	str	r0, [r7, #12]
 800180a:	60b9      	str	r1, [r7, #8]
 800180c:	4613      	mov	r3, r2
 800180e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	68ba      	ldr	r2, [r7, #8]
 8001814:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	88fa      	ldrh	r2, [r7, #6]
 800181a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	88fa      	ldrh	r2, [r7, #6]
 8001820:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2200      	movs	r2, #0
 8001826:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	2222      	movs	r2, #34	@ 0x22
 800182c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	691b      	ldr	r3, [r3, #16]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d007      	beq.n	8001848 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	68da      	ldr	r2, [r3, #12]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001846:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	695a      	ldr	r2, [r3, #20]
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f042 0201 	orr.w	r2, r2, #1
 8001856:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	68da      	ldr	r2, [r3, #12]
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f042 0220 	orr.w	r2, r2, #32
 8001866:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3714      	adds	r7, #20
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001876:	b480      	push	{r7}
 8001878:	b095      	sub	sp, #84	@ 0x54
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	330c      	adds	r3, #12
 8001884:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001886:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001888:	e853 3f00 	ldrex	r3, [r3]
 800188c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800188e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001890:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001894:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	330c      	adds	r3, #12
 800189c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800189e:	643a      	str	r2, [r7, #64]	@ 0x40
 80018a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80018a2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80018a4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80018a6:	e841 2300 	strex	r3, r2, [r1]
 80018aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80018ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d1e5      	bne.n	800187e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	3314      	adds	r3, #20
 80018b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80018ba:	6a3b      	ldr	r3, [r7, #32]
 80018bc:	e853 3f00 	ldrex	r3, [r3]
 80018c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	f023 0301 	bic.w	r3, r3, #1
 80018c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	3314      	adds	r3, #20
 80018d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80018d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80018d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80018d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80018d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018da:	e841 2300 	strex	r3, r2, [r1]
 80018de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80018e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d1e5      	bne.n	80018b2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d119      	bne.n	8001922 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	330c      	adds	r3, #12
 80018f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	e853 3f00 	ldrex	r3, [r3]
 80018fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	f023 0310 	bic.w	r3, r3, #16
 8001904:	647b      	str	r3, [r7, #68]	@ 0x44
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	330c      	adds	r3, #12
 800190c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800190e:	61ba      	str	r2, [r7, #24]
 8001910:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001912:	6979      	ldr	r1, [r7, #20]
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	e841 2300 	strex	r3, r2, [r1]
 800191a:	613b      	str	r3, [r7, #16]
   return(result);
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1e5      	bne.n	80018ee <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2220      	movs	r2, #32
 8001926:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2200      	movs	r2, #0
 800192e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001930:	bf00      	nop
 8001932:	3754      	adds	r7, #84	@ 0x54
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001948:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	2200      	movs	r2, #0
 800194e:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001950:	68f8      	ldr	r0, [r7, #12]
 8001952:	f7ff fee7 	bl	8001724 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001956:	bf00      	nop
 8001958:	3710      	adds	r7, #16
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800195e:	b480      	push	{r7}
 8001960:	b085      	sub	sp, #20
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800196c:	b2db      	uxtb	r3, r3
 800196e:	2b21      	cmp	r3, #33	@ 0x21
 8001970:	d13e      	bne.n	80019f0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800197a:	d114      	bne.n	80019a6 <UART_Transmit_IT+0x48>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	691b      	ldr	r3, [r3, #16]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d110      	bne.n	80019a6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a1b      	ldr	r3, [r3, #32]
 8001988:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	881b      	ldrh	r3, [r3, #0]
 800198e:	461a      	mov	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001998:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a1b      	ldr	r3, [r3, #32]
 800199e:	1c9a      	adds	r2, r3, #2
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	621a      	str	r2, [r3, #32]
 80019a4:	e008      	b.n	80019b8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a1b      	ldr	r3, [r3, #32]
 80019aa:	1c59      	adds	r1, r3, #1
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	6211      	str	r1, [r2, #32]
 80019b0:	781a      	ldrb	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80019bc:	b29b      	uxth	r3, r3
 80019be:	3b01      	subs	r3, #1
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	4619      	mov	r1, r3
 80019c6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d10f      	bne.n	80019ec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	68da      	ldr	r2, [r3, #12]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80019da:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	68da      	ldr	r2, [r3, #12]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80019ea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80019ec:	2300      	movs	r3, #0
 80019ee:	e000      	b.n	80019f2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80019f0:	2302      	movs	r3, #2
  }
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3714      	adds	r7, #20
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr

080019fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b082      	sub	sp, #8
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	68da      	ldr	r2, [r3, #12]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001a14:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2220      	movs	r2, #32
 8001a1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f7ff fe76 	bl	8001710 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b08c      	sub	sp, #48	@ 0x30
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8001a36:	2300      	movs	r3, #0
 8001a38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	2b22      	cmp	r3, #34	@ 0x22
 8001a48:	f040 80aa 	bne.w	8001ba0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a54:	d115      	bne.n	8001a82 <UART_Receive_IT+0x54>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	691b      	ldr	r3, [r3, #16]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d111      	bne.n	8001a82 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a62:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a70:	b29a      	uxth	r2, r3
 8001a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a74:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a7a:	1c9a      	adds	r2, r3, #2
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	629a      	str	r2, [r3, #40]	@ 0x28
 8001a80:	e024      	b.n	8001acc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a86:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a90:	d007      	beq.n	8001aa2 <UART_Receive_IT+0x74>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d10a      	bne.n	8001ab0 <UART_Receive_IT+0x82>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	691b      	ldr	r3, [r3, #16]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d106      	bne.n	8001ab0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	b2da      	uxtb	r2, r3
 8001aaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001aac:	701a      	strb	r2, [r3, #0]
 8001aae:	e008      	b.n	8001ac2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001abc:	b2da      	uxtb	r2, r3
 8001abe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ac0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ac6:	1c5a      	adds	r2, r3, #1
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	4619      	mov	r1, r3
 8001ada:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d15d      	bne.n	8001b9c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	68da      	ldr	r2, [r3, #12]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f022 0220 	bic.w	r2, r2, #32
 8001aee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	68da      	ldr	r2, [r3, #12]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001afe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	695a      	ldr	r2, [r3, #20]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f022 0201 	bic.w	r2, r2, #1
 8001b0e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2220      	movs	r2, #32
 8001b14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d135      	bne.n	8001b92 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	330c      	adds	r3, #12
 8001b32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	e853 3f00 	ldrex	r3, [r3]
 8001b3a:	613b      	str	r3, [r7, #16]
   return(result);
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	f023 0310 	bic.w	r3, r3, #16
 8001b42:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	330c      	adds	r3, #12
 8001b4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b4c:	623a      	str	r2, [r7, #32]
 8001b4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b50:	69f9      	ldr	r1, [r7, #28]
 8001b52:	6a3a      	ldr	r2, [r7, #32]
 8001b54:	e841 2300 	strex	r3, r2, [r1]
 8001b58:	61bb      	str	r3, [r7, #24]
   return(result);
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d1e5      	bne.n	8001b2c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0310 	and.w	r3, r3, #16
 8001b6a:	2b10      	cmp	r3, #16
 8001b6c:	d10a      	bne.n	8001b84 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	60fb      	str	r3, [r7, #12]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001b88:	4619      	mov	r1, r3
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f7ff fdd4 	bl	8001738 <HAL_UARTEx_RxEventCallback>
 8001b90:	e002      	b.n	8001b98 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f7fe fd4e 	bl	8000634 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	e002      	b.n	8001ba2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	e000      	b.n	8001ba2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8001ba0:	2302      	movs	r3, #2
  }
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3730      	adds	r7, #48	@ 0x30
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
	...

08001bac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001bac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bb0:	b0c0      	sub	sp, #256	@ 0x100
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	691b      	ldr	r3, [r3, #16]
 8001bc0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001bc8:	68d9      	ldr	r1, [r3, #12]
 8001bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	ea40 0301 	orr.w	r3, r0, r1
 8001bd4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001bda:	689a      	ldr	r2, [r3, #8]
 8001bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	431a      	orrs	r2, r3
 8001be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001be8:	695b      	ldr	r3, [r3, #20]
 8001bea:	431a      	orrs	r2, r3
 8001bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001bf0:	69db      	ldr	r3, [r3, #28]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001c04:	f021 010c 	bic.w	r1, r1, #12
 8001c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001c12:	430b      	orrs	r3, r1
 8001c14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001c16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	695b      	ldr	r3, [r3, #20]
 8001c1e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8001c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c26:	6999      	ldr	r1, [r3, #24]
 8001c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	ea40 0301 	orr.w	r3, r0, r1
 8001c32:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	4b8f      	ldr	r3, [pc, #572]	@ (8001e78 <UART_SetConfig+0x2cc>)
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d005      	beq.n	8001c4c <UART_SetConfig+0xa0>
 8001c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	4b8d      	ldr	r3, [pc, #564]	@ (8001e7c <UART_SetConfig+0x2d0>)
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d104      	bne.n	8001c56 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001c4c:	f7ff f9a2 	bl	8000f94 <HAL_RCC_GetPCLK2Freq>
 8001c50:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001c54:	e003      	b.n	8001c5e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001c56:	f7ff f989 	bl	8000f6c <HAL_RCC_GetPCLK1Freq>
 8001c5a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c62:	69db      	ldr	r3, [r3, #28]
 8001c64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c68:	f040 810c 	bne.w	8001e84 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001c6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001c70:	2200      	movs	r2, #0
 8001c72:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001c76:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001c7a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001c7e:	4622      	mov	r2, r4
 8001c80:	462b      	mov	r3, r5
 8001c82:	1891      	adds	r1, r2, r2
 8001c84:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001c86:	415b      	adcs	r3, r3
 8001c88:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001c8a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001c8e:	4621      	mov	r1, r4
 8001c90:	eb12 0801 	adds.w	r8, r2, r1
 8001c94:	4629      	mov	r1, r5
 8001c96:	eb43 0901 	adc.w	r9, r3, r1
 8001c9a:	f04f 0200 	mov.w	r2, #0
 8001c9e:	f04f 0300 	mov.w	r3, #0
 8001ca2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ca6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001caa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001cae:	4690      	mov	r8, r2
 8001cb0:	4699      	mov	r9, r3
 8001cb2:	4623      	mov	r3, r4
 8001cb4:	eb18 0303 	adds.w	r3, r8, r3
 8001cb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001cbc:	462b      	mov	r3, r5
 8001cbe:	eb49 0303 	adc.w	r3, r9, r3
 8001cc2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001cd2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001cd6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8001cda:	460b      	mov	r3, r1
 8001cdc:	18db      	adds	r3, r3, r3
 8001cde:	653b      	str	r3, [r7, #80]	@ 0x50
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	eb42 0303 	adc.w	r3, r2, r3
 8001ce6:	657b      	str	r3, [r7, #84]	@ 0x54
 8001ce8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001cec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001cf0:	f7fe fa7a 	bl	80001e8 <__aeabi_uldivmod>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	4b61      	ldr	r3, [pc, #388]	@ (8001e80 <UART_SetConfig+0x2d4>)
 8001cfa:	fba3 2302 	umull	r2, r3, r3, r2
 8001cfe:	095b      	lsrs	r3, r3, #5
 8001d00:	011c      	lsls	r4, r3, #4
 8001d02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001d06:	2200      	movs	r2, #0
 8001d08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001d0c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001d10:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8001d14:	4642      	mov	r2, r8
 8001d16:	464b      	mov	r3, r9
 8001d18:	1891      	adds	r1, r2, r2
 8001d1a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001d1c:	415b      	adcs	r3, r3
 8001d1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001d20:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001d24:	4641      	mov	r1, r8
 8001d26:	eb12 0a01 	adds.w	sl, r2, r1
 8001d2a:	4649      	mov	r1, r9
 8001d2c:	eb43 0b01 	adc.w	fp, r3, r1
 8001d30:	f04f 0200 	mov.w	r2, #0
 8001d34:	f04f 0300 	mov.w	r3, #0
 8001d38:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001d3c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001d40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001d44:	4692      	mov	sl, r2
 8001d46:	469b      	mov	fp, r3
 8001d48:	4643      	mov	r3, r8
 8001d4a:	eb1a 0303 	adds.w	r3, sl, r3
 8001d4e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001d52:	464b      	mov	r3, r9
 8001d54:	eb4b 0303 	adc.w	r3, fp, r3
 8001d58:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001d68:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001d6c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8001d70:	460b      	mov	r3, r1
 8001d72:	18db      	adds	r3, r3, r3
 8001d74:	643b      	str	r3, [r7, #64]	@ 0x40
 8001d76:	4613      	mov	r3, r2
 8001d78:	eb42 0303 	adc.w	r3, r2, r3
 8001d7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8001d7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001d82:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8001d86:	f7fe fa2f 	bl	80001e8 <__aeabi_uldivmod>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	4611      	mov	r1, r2
 8001d90:	4b3b      	ldr	r3, [pc, #236]	@ (8001e80 <UART_SetConfig+0x2d4>)
 8001d92:	fba3 2301 	umull	r2, r3, r3, r1
 8001d96:	095b      	lsrs	r3, r3, #5
 8001d98:	2264      	movs	r2, #100	@ 0x64
 8001d9a:	fb02 f303 	mul.w	r3, r2, r3
 8001d9e:	1acb      	subs	r3, r1, r3
 8001da0:	00db      	lsls	r3, r3, #3
 8001da2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001da6:	4b36      	ldr	r3, [pc, #216]	@ (8001e80 <UART_SetConfig+0x2d4>)
 8001da8:	fba3 2302 	umull	r2, r3, r3, r2
 8001dac:	095b      	lsrs	r3, r3, #5
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8001db4:	441c      	add	r4, r3
 8001db6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001dc0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001dc4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8001dc8:	4642      	mov	r2, r8
 8001dca:	464b      	mov	r3, r9
 8001dcc:	1891      	adds	r1, r2, r2
 8001dce:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001dd0:	415b      	adcs	r3, r3
 8001dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001dd4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001dd8:	4641      	mov	r1, r8
 8001dda:	1851      	adds	r1, r2, r1
 8001ddc:	6339      	str	r1, [r7, #48]	@ 0x30
 8001dde:	4649      	mov	r1, r9
 8001de0:	414b      	adcs	r3, r1
 8001de2:	637b      	str	r3, [r7, #52]	@ 0x34
 8001de4:	f04f 0200 	mov.w	r2, #0
 8001de8:	f04f 0300 	mov.w	r3, #0
 8001dec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8001df0:	4659      	mov	r1, fp
 8001df2:	00cb      	lsls	r3, r1, #3
 8001df4:	4651      	mov	r1, sl
 8001df6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001dfa:	4651      	mov	r1, sl
 8001dfc:	00ca      	lsls	r2, r1, #3
 8001dfe:	4610      	mov	r0, r2
 8001e00:	4619      	mov	r1, r3
 8001e02:	4603      	mov	r3, r0
 8001e04:	4642      	mov	r2, r8
 8001e06:	189b      	adds	r3, r3, r2
 8001e08:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001e0c:	464b      	mov	r3, r9
 8001e0e:	460a      	mov	r2, r1
 8001e10:	eb42 0303 	adc.w	r3, r2, r3
 8001e14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001e24:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001e28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	18db      	adds	r3, r3, r3
 8001e30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e32:	4613      	mov	r3, r2
 8001e34:	eb42 0303 	adc.w	r3, r2, r3
 8001e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001e3e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8001e42:	f7fe f9d1 	bl	80001e8 <__aeabi_uldivmod>
 8001e46:	4602      	mov	r2, r0
 8001e48:	460b      	mov	r3, r1
 8001e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8001e80 <UART_SetConfig+0x2d4>)
 8001e4c:	fba3 1302 	umull	r1, r3, r3, r2
 8001e50:	095b      	lsrs	r3, r3, #5
 8001e52:	2164      	movs	r1, #100	@ 0x64
 8001e54:	fb01 f303 	mul.w	r3, r1, r3
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	3332      	adds	r3, #50	@ 0x32
 8001e5e:	4a08      	ldr	r2, [pc, #32]	@ (8001e80 <UART_SetConfig+0x2d4>)
 8001e60:	fba2 2303 	umull	r2, r3, r2, r3
 8001e64:	095b      	lsrs	r3, r3, #5
 8001e66:	f003 0207 	and.w	r2, r3, #7
 8001e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4422      	add	r2, r4
 8001e72:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001e74:	e106      	b.n	8002084 <UART_SetConfig+0x4d8>
 8001e76:	bf00      	nop
 8001e78:	40011000 	.word	0x40011000
 8001e7c:	40011400 	.word	0x40011400
 8001e80:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001e84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001e8e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001e92:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001e96:	4642      	mov	r2, r8
 8001e98:	464b      	mov	r3, r9
 8001e9a:	1891      	adds	r1, r2, r2
 8001e9c:	6239      	str	r1, [r7, #32]
 8001e9e:	415b      	adcs	r3, r3
 8001ea0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ea2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001ea6:	4641      	mov	r1, r8
 8001ea8:	1854      	adds	r4, r2, r1
 8001eaa:	4649      	mov	r1, r9
 8001eac:	eb43 0501 	adc.w	r5, r3, r1
 8001eb0:	f04f 0200 	mov.w	r2, #0
 8001eb4:	f04f 0300 	mov.w	r3, #0
 8001eb8:	00eb      	lsls	r3, r5, #3
 8001eba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ebe:	00e2      	lsls	r2, r4, #3
 8001ec0:	4614      	mov	r4, r2
 8001ec2:	461d      	mov	r5, r3
 8001ec4:	4643      	mov	r3, r8
 8001ec6:	18e3      	adds	r3, r4, r3
 8001ec8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001ecc:	464b      	mov	r3, r9
 8001ece:	eb45 0303 	adc.w	r3, r5, r3
 8001ed2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001ed6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001ee2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001ee6:	f04f 0200 	mov.w	r2, #0
 8001eea:	f04f 0300 	mov.w	r3, #0
 8001eee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001ef2:	4629      	mov	r1, r5
 8001ef4:	008b      	lsls	r3, r1, #2
 8001ef6:	4621      	mov	r1, r4
 8001ef8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001efc:	4621      	mov	r1, r4
 8001efe:	008a      	lsls	r2, r1, #2
 8001f00:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8001f04:	f7fe f970 	bl	80001e8 <__aeabi_uldivmod>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	4b60      	ldr	r3, [pc, #384]	@ (8002090 <UART_SetConfig+0x4e4>)
 8001f0e:	fba3 2302 	umull	r2, r3, r3, r2
 8001f12:	095b      	lsrs	r3, r3, #5
 8001f14:	011c      	lsls	r4, r3, #4
 8001f16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001f20:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001f24:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8001f28:	4642      	mov	r2, r8
 8001f2a:	464b      	mov	r3, r9
 8001f2c:	1891      	adds	r1, r2, r2
 8001f2e:	61b9      	str	r1, [r7, #24]
 8001f30:	415b      	adcs	r3, r3
 8001f32:	61fb      	str	r3, [r7, #28]
 8001f34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f38:	4641      	mov	r1, r8
 8001f3a:	1851      	adds	r1, r2, r1
 8001f3c:	6139      	str	r1, [r7, #16]
 8001f3e:	4649      	mov	r1, r9
 8001f40:	414b      	adcs	r3, r1
 8001f42:	617b      	str	r3, [r7, #20]
 8001f44:	f04f 0200 	mov.w	r2, #0
 8001f48:	f04f 0300 	mov.w	r3, #0
 8001f4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001f50:	4659      	mov	r1, fp
 8001f52:	00cb      	lsls	r3, r1, #3
 8001f54:	4651      	mov	r1, sl
 8001f56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f5a:	4651      	mov	r1, sl
 8001f5c:	00ca      	lsls	r2, r1, #3
 8001f5e:	4610      	mov	r0, r2
 8001f60:	4619      	mov	r1, r3
 8001f62:	4603      	mov	r3, r0
 8001f64:	4642      	mov	r2, r8
 8001f66:	189b      	adds	r3, r3, r2
 8001f68:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001f6c:	464b      	mov	r3, r9
 8001f6e:	460a      	mov	r2, r1
 8001f70:	eb42 0303 	adc.w	r3, r2, r3
 8001f74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001f82:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001f84:	f04f 0200 	mov.w	r2, #0
 8001f88:	f04f 0300 	mov.w	r3, #0
 8001f8c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8001f90:	4649      	mov	r1, r9
 8001f92:	008b      	lsls	r3, r1, #2
 8001f94:	4641      	mov	r1, r8
 8001f96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001f9a:	4641      	mov	r1, r8
 8001f9c:	008a      	lsls	r2, r1, #2
 8001f9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001fa2:	f7fe f921 	bl	80001e8 <__aeabi_uldivmod>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	460b      	mov	r3, r1
 8001faa:	4611      	mov	r1, r2
 8001fac:	4b38      	ldr	r3, [pc, #224]	@ (8002090 <UART_SetConfig+0x4e4>)
 8001fae:	fba3 2301 	umull	r2, r3, r3, r1
 8001fb2:	095b      	lsrs	r3, r3, #5
 8001fb4:	2264      	movs	r2, #100	@ 0x64
 8001fb6:	fb02 f303 	mul.w	r3, r2, r3
 8001fba:	1acb      	subs	r3, r1, r3
 8001fbc:	011b      	lsls	r3, r3, #4
 8001fbe:	3332      	adds	r3, #50	@ 0x32
 8001fc0:	4a33      	ldr	r2, [pc, #204]	@ (8002090 <UART_SetConfig+0x4e4>)
 8001fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc6:	095b      	lsrs	r3, r3, #5
 8001fc8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001fcc:	441c      	add	r4, r3
 8001fce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	673b      	str	r3, [r7, #112]	@ 0x70
 8001fd6:	677a      	str	r2, [r7, #116]	@ 0x74
 8001fd8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8001fdc:	4642      	mov	r2, r8
 8001fde:	464b      	mov	r3, r9
 8001fe0:	1891      	adds	r1, r2, r2
 8001fe2:	60b9      	str	r1, [r7, #8]
 8001fe4:	415b      	adcs	r3, r3
 8001fe6:	60fb      	str	r3, [r7, #12]
 8001fe8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fec:	4641      	mov	r1, r8
 8001fee:	1851      	adds	r1, r2, r1
 8001ff0:	6039      	str	r1, [r7, #0]
 8001ff2:	4649      	mov	r1, r9
 8001ff4:	414b      	adcs	r3, r1
 8001ff6:	607b      	str	r3, [r7, #4]
 8001ff8:	f04f 0200 	mov.w	r2, #0
 8001ffc:	f04f 0300 	mov.w	r3, #0
 8002000:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002004:	4659      	mov	r1, fp
 8002006:	00cb      	lsls	r3, r1, #3
 8002008:	4651      	mov	r1, sl
 800200a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800200e:	4651      	mov	r1, sl
 8002010:	00ca      	lsls	r2, r1, #3
 8002012:	4610      	mov	r0, r2
 8002014:	4619      	mov	r1, r3
 8002016:	4603      	mov	r3, r0
 8002018:	4642      	mov	r2, r8
 800201a:	189b      	adds	r3, r3, r2
 800201c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800201e:	464b      	mov	r3, r9
 8002020:	460a      	mov	r2, r1
 8002022:	eb42 0303 	adc.w	r3, r2, r3
 8002026:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	663b      	str	r3, [r7, #96]	@ 0x60
 8002032:	667a      	str	r2, [r7, #100]	@ 0x64
 8002034:	f04f 0200 	mov.w	r2, #0
 8002038:	f04f 0300 	mov.w	r3, #0
 800203c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002040:	4649      	mov	r1, r9
 8002042:	008b      	lsls	r3, r1, #2
 8002044:	4641      	mov	r1, r8
 8002046:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800204a:	4641      	mov	r1, r8
 800204c:	008a      	lsls	r2, r1, #2
 800204e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002052:	f7fe f8c9 	bl	80001e8 <__aeabi_uldivmod>
 8002056:	4602      	mov	r2, r0
 8002058:	460b      	mov	r3, r1
 800205a:	4b0d      	ldr	r3, [pc, #52]	@ (8002090 <UART_SetConfig+0x4e4>)
 800205c:	fba3 1302 	umull	r1, r3, r3, r2
 8002060:	095b      	lsrs	r3, r3, #5
 8002062:	2164      	movs	r1, #100	@ 0x64
 8002064:	fb01 f303 	mul.w	r3, r1, r3
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	011b      	lsls	r3, r3, #4
 800206c:	3332      	adds	r3, #50	@ 0x32
 800206e:	4a08      	ldr	r2, [pc, #32]	@ (8002090 <UART_SetConfig+0x4e4>)
 8002070:	fba2 2303 	umull	r2, r3, r2, r3
 8002074:	095b      	lsrs	r3, r3, #5
 8002076:	f003 020f 	and.w	r2, r3, #15
 800207a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4422      	add	r2, r4
 8002082:	609a      	str	r2, [r3, #8]
}
 8002084:	bf00      	nop
 8002086:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800208a:	46bd      	mov	sp, r7
 800208c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002090:	51eb851f 	.word	0x51eb851f

08002094 <memset>:
 8002094:	4402      	add	r2, r0
 8002096:	4603      	mov	r3, r0
 8002098:	4293      	cmp	r3, r2
 800209a:	d100      	bne.n	800209e <memset+0xa>
 800209c:	4770      	bx	lr
 800209e:	f803 1b01 	strb.w	r1, [r3], #1
 80020a2:	e7f9      	b.n	8002098 <memset+0x4>

080020a4 <__libc_init_array>:
 80020a4:	b570      	push	{r4, r5, r6, lr}
 80020a6:	4d0d      	ldr	r5, [pc, #52]	@ (80020dc <__libc_init_array+0x38>)
 80020a8:	4c0d      	ldr	r4, [pc, #52]	@ (80020e0 <__libc_init_array+0x3c>)
 80020aa:	1b64      	subs	r4, r4, r5
 80020ac:	10a4      	asrs	r4, r4, #2
 80020ae:	2600      	movs	r6, #0
 80020b0:	42a6      	cmp	r6, r4
 80020b2:	d109      	bne.n	80020c8 <__libc_init_array+0x24>
 80020b4:	4d0b      	ldr	r5, [pc, #44]	@ (80020e4 <__libc_init_array+0x40>)
 80020b6:	4c0c      	ldr	r4, [pc, #48]	@ (80020e8 <__libc_init_array+0x44>)
 80020b8:	f000 f818 	bl	80020ec <_init>
 80020bc:	1b64      	subs	r4, r4, r5
 80020be:	10a4      	asrs	r4, r4, #2
 80020c0:	2600      	movs	r6, #0
 80020c2:	42a6      	cmp	r6, r4
 80020c4:	d105      	bne.n	80020d2 <__libc_init_array+0x2e>
 80020c6:	bd70      	pop	{r4, r5, r6, pc}
 80020c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80020cc:	4798      	blx	r3
 80020ce:	3601      	adds	r6, #1
 80020d0:	e7ee      	b.n	80020b0 <__libc_init_array+0xc>
 80020d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80020d6:	4798      	blx	r3
 80020d8:	3601      	adds	r6, #1
 80020da:	e7f2      	b.n	80020c2 <__libc_init_array+0x1e>
 80020dc:	08002134 	.word	0x08002134
 80020e0:	08002134 	.word	0x08002134
 80020e4:	08002134 	.word	0x08002134
 80020e8:	08002138 	.word	0x08002138

080020ec <_init>:
 80020ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020ee:	bf00      	nop
 80020f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020f2:	bc08      	pop	{r3}
 80020f4:	469e      	mov	lr, r3
 80020f6:	4770      	bx	lr

080020f8 <_fini>:
 80020f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020fa:	bf00      	nop
 80020fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020fe:	bc08      	pop	{r3}
 8002100:	469e      	mov	lr, r3
 8002102:	4770      	bx	lr
