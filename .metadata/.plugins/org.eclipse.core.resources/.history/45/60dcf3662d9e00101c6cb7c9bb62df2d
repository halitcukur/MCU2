/*
 * main.c
 *
 *  Created on: Sep 29, 2025
 *      Author: halit
 */

/* Includes ---------------------------------------------------------------*/
#include "main.h"
#include <stdio.h>
#include <string.h>

/* Private Function Prototypes --------------------------------------------*/
void SystemClockConfig(uint8_t clock_freq);
void GPIO_Init(void);
void Error_Handler(void);
void TIMER2_Init(void);
void TIMER6_Init(void);
void LSE_Configuration(void);
void UART2_Init(void);

/* Private Variables ------------------------------------------------------*/
TIM_HandleTypeDef htimer2;
TIM_HandleTypeDef htimer6;
UART_HandleTypeDef huart2;

uint32_t input_captures[2];
uint8_t count = 1;
volatile uint8_t is_capture_done = FALSE;

char msg[100];

int main(void)
{
	HAL_Init();

	SystemClockConfig(SYS_CLOCK_FREQ_50_MHZ);
	UART2_Init();


	while(1);

	return 0;
}

void SystemClockConfig(uint8_t clock_freq)
{
	RCC_OscInitTypeDef osc_init = {0};

	osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE;
	osc_init.HSEState = RCC_HSE_ON;
	osc_init.PLL.PLLState = RCC_PLL_ON;
	osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSE;

	osc_init.PLL.PLLM = 8;
	osc_init.PLL.PLLN = 100;
	osc_init.PLL.PLLP = 2;

	RCC_ClkInitTypeDef clk_init = {0};

	clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK |
						RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
	clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
	clk_init.APB2CLKDivider = RCC_HCLK_DIV2;

	//__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

	if(HAL_RCC_OscConfig(&osc_init) != HAL_OK)
		Error_Handler();

	if(HAL_RCC_ClockConfig(&clk_init, FLASH_ACR_LATENCY_1WS) != HAL_OK)
		Error_Handler();

	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);

	__HAL_RCC_HSI_DISABLE();
}

void GPIO_Init(void);
void Error_Handler(void)
{
	while(1);
}

void TIMER2_Init(void);
void TIMER6_Init(void);
void LSE_Configuration(void);

void UART2_Init(void)
{
	huart2.Instance = USART2;
	huart2.Init.BaudRate = 9600;
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
	huart2.Init.StopBits = UART_STOPBITS_1;
	huart2.Init.Parity = UART_PARITY_NONE;
	huart2.Init.Mode = UART_MODE_TX_RX;
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;

	if(HAL_UART_Init(&huart2) != HAL_OK)
		Error_Handler();
}
