/*
 * main.c
 *
 *  Created on: Sep 29, 2025
 *      Author: halit
 */

/* Includes ---------------------------------------------------------------*/
#include "main.h"
#include <stdio.h>
#include <string.h>

/* Private Function Prototypes --------------------------------------------*/
void SystemClockConfig(void);
void GPIO_Init(void);
void Error_Handler(void);
void TIMER2_Init(void);
void TIMER5_Init(void);
void LSE_Configuration(void);
void UART2_Init(void);
void printClockInfo(void);

/* Private Variables ------------------------------------------------------*/
TIM_HandleTypeDef htimer2;
TIM_HandleTypeDef htimer5;
UART_HandleTypeDef huart2;

uint32_t input_captures[2];
uint8_t count = 1;
volatile uint8_t is_capture_done = FALSE;

int main(void)
{
	uint32_t capture_difference = 0;
	double timer2_cnt_freq = 0;
	double timer2_cnt_res = 0;
	double user_signal_time_period = 0;
	double user_signal_freq = 0;
	char usr_msg[100];

	HAL_Init();

	SystemClockConfig();
	GPIO_Init();
	UART2_Init();
	TIMER2_Init();
	TIMER5_Init();
	LSE_Configuration();

	HAL_TIM_Base_Start_IT(&htimer5);
	HAL_TIM_IC_Start_IT(&htimer2, TIM_CHANNEL_1);

	while(1)
	{
		if(is_capture_done)
		{
			if(input_captures[1] > input_captures[0])
			{
				capture_difference = input_captures[1] - input_captures[0];
			}
			else
			{
				capture_difference = (0xFFFFFFFF - input_captures[0]) + input_captures[1];
			}

			timer2_cnt_freq = (HAL_RCC_GetPCLK1Freq() * 2) / (htimer2.Init.Prescaler + 1);
			timer2_cnt_res = 1 / timer2_cnt_freq;

			user_signal_time_period = capture_difference * timer2_cnt_res;
			user_signal_freq = 1 / user_signal_time_period;

			sprintf(usr_msg, "Frequency of the signal applied = %.2f Hz\r\n", user_signal_freq);
		}
	}

	return 0;
}

void SystemClockConfig(void)
{
	RCC_OscInitTypeDef osc_init = {0};

	osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_LSI;
	osc_init.HSEState = RCC_HSE_ON;
	osc_init.LSIState = RCC_LSI_ON;
	osc_init.PLL.PLLState = RCC_PLL_ON;
	osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSE;

	osc_init.PLL.PLLM = 8;
	osc_init.PLL.PLLN = 100;
	osc_init.PLL.PLLP = 2;

	RCC_ClkInitTypeDef clk_init = {0};

	clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK |
						RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
	clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
	clk_init.APB2CLKDivider = RCC_HCLK_DIV2;

	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

	if(HAL_RCC_OscConfig(&osc_init) != HAL_OK)
		Error_Handler();

	if(HAL_RCC_ClockConfig(&clk_init, FLASH_ACR_LATENCY_1WS) != HAL_OK)
		Error_Handler();

	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
}

void GPIO_Init(void)
{
	__HAL_RCC_GPIOD_CLK_ENABLE();

	GPIO_InitTypeDef ledgpio;

	ledgpio.Pin = GPIO_PIN_13;
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
	ledgpio.Pull = GPIO_NOPULL;
	ledgpio.Speed = GPIO_SPEED_FREQ_HIGH;

	HAL_GPIO_Init(GPIOD, &ledgpio);
}

void Error_Handler(void)
{
	while(1);
}

void TIMER2_Init(void)
{
	htimer2.Instance = TIM2;
	htimer2.Init.CounterMode = TIM_COUNTERMODE_UP;
	htimer2.Init.Period = 0xFFFFFFFF;
	htimer2.Init.Prescaler = 1;

	if(HAL_TIM_IC_Init(&htimer2))
		Error_Handler();

	TIM_IC_InitTypeDef htimer2IC_Config = {0};

	htimer2IC_Config.ICFilter = 0;
	htimer2IC_Config.ICPolarity = TIM_ICPOLARITY_RISING;
	htimer2IC_Config.ICPrescaler = TIM_ICPSC_DIV1;
	htimer2IC_Config.ICSelection = TIM_ICSELECTION_DIRECTTI;

	if(HAL_TIM_IC_ConfigChannel(&htimer2, &htimer2IC_Config, TIM_CHANNEL_1))
		Error_Handler();
}

void TIMER5_Init(void)
{
	htimer5.Instance = TIM5;
	htimer5.Init.Prescaler = 9;
	htimer5.Init.Period = 50 - 1;

	if(HAL_TIM_Base_Init(&htimer5))
		Error_Handler();
}

void LSE_Configuration(void)
{
	HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
}

void UART2_Init(void)
{
	huart2.Instance = USART2;
	huart2.Init.BaudRate = 9600;
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
	huart2.Init.StopBits = UART_STOPBITS_1;
	huart2.Init.Parity = UART_PARITY_NONE;
	huart2.Init.Mode = UART_MODE_TX_RX;
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;

	if(HAL_UART_Init(&huart2) != HAL_OK)
		Error_Handler();
}

void printClockInfo(void)
{
	char msg[100];

	memset(msg, 0, sizeof(msg));
	sprintf(msg, "SYSCLK: %lu Hz\r\n", HAL_RCC_GetSysClockFreq());
	HAL_UART_Transmit(&huart2, (uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);

	memset(msg, 0, sizeof(msg));
	sprintf(msg, "HCLK: %lu Hz\r\n", HAL_RCC_GetHCLKFreq());
	HAL_UART_Transmit(&huart2, (uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);

	memset(msg, 0, sizeof(msg));
	sprintf(msg, "PCLK1: %lu Hz\r\n", HAL_RCC_GetPCLK1Freq());
	HAL_UART_Transmit(&huart2, (uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);

	memset(msg, 0, sizeof(msg));
	sprintf(msg, "PCLK2: %lu Hz\r\n\n", HAL_RCC_GetPCLK2Freq());
	HAL_UART_Transmit(&huart2, (uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
	if(!is_capture_done)
	{
		if(count == 1)
		{
			input_captures[0] = __HAL_TIM_GET_COMPARE(htim, TIM_CHANNEL_1);
			count++;
		}
		else if(count == 2)
		{
			input_captures[1] = __HAL_TIM_GET_COMPARE(htim, TIM_CHANNEL_1);
			count = 1;
			is_capture_done = TRUE;
		}
	}
}
