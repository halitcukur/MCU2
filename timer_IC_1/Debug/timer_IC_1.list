
timer_IC_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ea8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000404  08006048  08006048  00007048  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800644c  0800644c  000081d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800644c  0800644c  0000744c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006454  08006454  000081d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006454  08006454  00007454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006458  08006458  00007458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800645c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  200001d4  08006630  000081d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000424  08006630  00008424  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000081d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a73c  00000000  00000000  00008204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017d7  00000000  00000000  00012940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a98  00000000  00000000  00014118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000083d  00000000  00000000  00014bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016eea  00000000  00000000  000153ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b370  00000000  00000000  0002c2d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f930  00000000  00000000  00037647  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c6f77  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dcc  00000000  00000000  000c6fbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000ab  00000000  00000000  000cad88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006030 	.word	0x08006030

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	08006030 	.word	0x08006030

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bcc:	f000 b988 	b.w	8000ee0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	468e      	mov	lr, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	4688      	mov	r8, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d962      	bls.n	8000cc4 <__udivmoddi4+0xdc>
 8000bfe:	fab2 f682 	clz	r6, r2
 8000c02:	b14e      	cbz	r6, 8000c18 <__udivmoddi4+0x30>
 8000c04:	f1c6 0320 	rsb	r3, r6, #32
 8000c08:	fa01 f806 	lsl.w	r8, r1, r6
 8000c0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c10:	40b7      	lsls	r7, r6
 8000c12:	ea43 0808 	orr.w	r8, r3, r8
 8000c16:	40b4      	lsls	r4, r6
 8000c18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c1c:	fa1f fc87 	uxth.w	ip, r7
 8000c20:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c24:	0c23      	lsrs	r3, r4, #16
 8000c26:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c2a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c3c:	f080 80ea 	bcs.w	8000e14 <__udivmoddi4+0x22c>
 8000c40:	429a      	cmp	r2, r3
 8000c42:	f240 80e7 	bls.w	8000e14 <__udivmoddi4+0x22c>
 8000c46:	3902      	subs	r1, #2
 8000c48:	443b      	add	r3, r7
 8000c4a:	1a9a      	subs	r2, r3, r2
 8000c4c:	b2a3      	uxth	r3, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c5a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5e:	459c      	cmp	ip, r3
 8000c60:	d909      	bls.n	8000c76 <__udivmoddi4+0x8e>
 8000c62:	18fb      	adds	r3, r7, r3
 8000c64:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000c68:	f080 80d6 	bcs.w	8000e18 <__udivmoddi4+0x230>
 8000c6c:	459c      	cmp	ip, r3
 8000c6e:	f240 80d3 	bls.w	8000e18 <__udivmoddi4+0x230>
 8000c72:	443b      	add	r3, r7
 8000c74:	3802      	subs	r0, #2
 8000c76:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7a:	eba3 030c 	sub.w	r3, r3, ip
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11d      	cbz	r5, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40f3      	lsrs	r3, r6
 8000c84:	2200      	movs	r2, #0
 8000c86:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d905      	bls.n	8000c9e <__udivmoddi4+0xb6>
 8000c92:	b10d      	cbz	r5, 8000c98 <__udivmoddi4+0xb0>
 8000c94:	e9c5 0100 	strd	r0, r1, [r5]
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e7f5      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000c9e:	fab3 f183 	clz	r1, r3
 8000ca2:	2900      	cmp	r1, #0
 8000ca4:	d146      	bne.n	8000d34 <__udivmoddi4+0x14c>
 8000ca6:	4573      	cmp	r3, lr
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xc8>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 8105 	bhi.w	8000eba <__udivmoddi4+0x2d2>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	4690      	mov	r8, r2
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0e5      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cbe:	e9c5 4800 	strd	r4, r8, [r5]
 8000cc2:	e7e2      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f000 8090 	beq.w	8000dea <__udivmoddi4+0x202>
 8000cca:	fab2 f682 	clz	r6, r2
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	f040 80a4 	bne.w	8000e1c <__udivmoddi4+0x234>
 8000cd4:	1a8a      	subs	r2, r1, r2
 8000cd6:	0c03      	lsrs	r3, r0, #16
 8000cd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cdc:	b280      	uxth	r0, r0
 8000cde:	b2bc      	uxth	r4, r7
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ce6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cee:	fb04 f20c 	mul.w	r2, r4, ip
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d907      	bls.n	8000d06 <__udivmoddi4+0x11e>
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000cfc:	d202      	bcs.n	8000d04 <__udivmoddi4+0x11c>
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	f200 80e0 	bhi.w	8000ec4 <__udivmoddi4+0x2dc>
 8000d04:	46c4      	mov	ip, r8
 8000d06:	1a9b      	subs	r3, r3, r2
 8000d08:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d0c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d10:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d14:	fb02 f404 	mul.w	r4, r2, r4
 8000d18:	429c      	cmp	r4, r3
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x144>
 8000d1c:	18fb      	adds	r3, r7, r3
 8000d1e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x142>
 8000d24:	429c      	cmp	r4, r3
 8000d26:	f200 80ca 	bhi.w	8000ebe <__udivmoddi4+0x2d6>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	1b1b      	subs	r3, r3, r4
 8000d2e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d32:	e7a5      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d34:	f1c1 0620 	rsb	r6, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d3e:	431f      	orrs	r7, r3
 8000d40:	fa0e f401 	lsl.w	r4, lr, r1
 8000d44:	fa20 f306 	lsr.w	r3, r0, r6
 8000d48:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d4c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d50:	4323      	orrs	r3, r4
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	fa1f fc87 	uxth.w	ip, r7
 8000d5a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d5e:	0c1c      	lsrs	r4, r3, #16
 8000d60:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d64:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d68:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d6c:	45a6      	cmp	lr, r4
 8000d6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d72:	d909      	bls.n	8000d88 <__udivmoddi4+0x1a0>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000d7a:	f080 809c 	bcs.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	f240 8099 	bls.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d84:	3802      	subs	r0, #2
 8000d86:	443c      	add	r4, r7
 8000d88:	eba4 040e 	sub.w	r4, r4, lr
 8000d8c:	fa1f fe83 	uxth.w	lr, r3
 8000d90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d94:	fb09 4413 	mls	r4, r9, r3, r4
 8000d98:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d9c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da0:	45a4      	cmp	ip, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x1ce>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000daa:	f080 8082 	bcs.w	8000eb2 <__udivmoddi4+0x2ca>
 8000dae:	45a4      	cmp	ip, r4
 8000db0:	d97f      	bls.n	8000eb2 <__udivmoddi4+0x2ca>
 8000db2:	3b02      	subs	r3, #2
 8000db4:	443c      	add	r4, r7
 8000db6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dba:	eba4 040c 	sub.w	r4, r4, ip
 8000dbe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dc2:	4564      	cmp	r4, ip
 8000dc4:	4673      	mov	r3, lr
 8000dc6:	46e1      	mov	r9, ip
 8000dc8:	d362      	bcc.n	8000e90 <__udivmoddi4+0x2a8>
 8000dca:	d05f      	beq.n	8000e8c <__udivmoddi4+0x2a4>
 8000dcc:	b15d      	cbz	r5, 8000de6 <__udivmoddi4+0x1fe>
 8000dce:	ebb8 0203 	subs.w	r2, r8, r3
 8000dd2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dda:	fa22 f301 	lsr.w	r3, r2, r1
 8000dde:	431e      	orrs	r6, r3
 8000de0:	40cc      	lsrs	r4, r1
 8000de2:	e9c5 6400 	strd	r6, r4, [r5]
 8000de6:	2100      	movs	r1, #0
 8000de8:	e74f      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000dea:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dee:	0c01      	lsrs	r1, r0, #16
 8000df0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000df4:	b280      	uxth	r0, r0
 8000df6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	4638      	mov	r0, r7
 8000dfe:	463c      	mov	r4, r7
 8000e00:	46b8      	mov	r8, r7
 8000e02:	46be      	mov	lr, r7
 8000e04:	2620      	movs	r6, #32
 8000e06:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e0a:	eba2 0208 	sub.w	r2, r2, r8
 8000e0e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e12:	e766      	b.n	8000ce2 <__udivmoddi4+0xfa>
 8000e14:	4601      	mov	r1, r0
 8000e16:	e718      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e18:	4610      	mov	r0, r2
 8000e1a:	e72c      	b.n	8000c76 <__udivmoddi4+0x8e>
 8000e1c:	f1c6 0220 	rsb	r2, r6, #32
 8000e20:	fa2e f302 	lsr.w	r3, lr, r2
 8000e24:	40b7      	lsls	r7, r6
 8000e26:	40b1      	lsls	r1, r6
 8000e28:	fa20 f202 	lsr.w	r2, r0, r2
 8000e2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e30:	430a      	orrs	r2, r1
 8000e32:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e36:	b2bc      	uxth	r4, r7
 8000e38:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e42:	fb08 f904 	mul.w	r9, r8, r4
 8000e46:	40b0      	lsls	r0, r6
 8000e48:	4589      	cmp	r9, r1
 8000e4a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e4e:	b280      	uxth	r0, r0
 8000e50:	d93e      	bls.n	8000ed0 <__udivmoddi4+0x2e8>
 8000e52:	1879      	adds	r1, r7, r1
 8000e54:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000e58:	d201      	bcs.n	8000e5e <__udivmoddi4+0x276>
 8000e5a:	4589      	cmp	r9, r1
 8000e5c:	d81f      	bhi.n	8000e9e <__udivmoddi4+0x2b6>
 8000e5e:	eba1 0109 	sub.w	r1, r1, r9
 8000e62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e66:	fb09 f804 	mul.w	r8, r9, r4
 8000e6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e6e:	b292      	uxth	r2, r2
 8000e70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e74:	4542      	cmp	r2, r8
 8000e76:	d229      	bcs.n	8000ecc <__udivmoddi4+0x2e4>
 8000e78:	18ba      	adds	r2, r7, r2
 8000e7a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000e7e:	d2c4      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e80:	4542      	cmp	r2, r8
 8000e82:	d2c2      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e84:	f1a9 0102 	sub.w	r1, r9, #2
 8000e88:	443a      	add	r2, r7
 8000e8a:	e7be      	b.n	8000e0a <__udivmoddi4+0x222>
 8000e8c:	45f0      	cmp	r8, lr
 8000e8e:	d29d      	bcs.n	8000dcc <__udivmoddi4+0x1e4>
 8000e90:	ebbe 0302 	subs.w	r3, lr, r2
 8000e94:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e98:	3801      	subs	r0, #1
 8000e9a:	46e1      	mov	r9, ip
 8000e9c:	e796      	b.n	8000dcc <__udivmoddi4+0x1e4>
 8000e9e:	eba7 0909 	sub.w	r9, r7, r9
 8000ea2:	4449      	add	r1, r9
 8000ea4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ea8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eac:	fb09 f804 	mul.w	r8, r9, r4
 8000eb0:	e7db      	b.n	8000e6a <__udivmoddi4+0x282>
 8000eb2:	4673      	mov	r3, lr
 8000eb4:	e77f      	b.n	8000db6 <__udivmoddi4+0x1ce>
 8000eb6:	4650      	mov	r0, sl
 8000eb8:	e766      	b.n	8000d88 <__udivmoddi4+0x1a0>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e6fd      	b.n	8000cba <__udivmoddi4+0xd2>
 8000ebe:	443b      	add	r3, r7
 8000ec0:	3a02      	subs	r2, #2
 8000ec2:	e733      	b.n	8000d2c <__udivmoddi4+0x144>
 8000ec4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec8:	443b      	add	r3, r7
 8000eca:	e71c      	b.n	8000d06 <__udivmoddi4+0x11e>
 8000ecc:	4649      	mov	r1, r9
 8000ece:	e79c      	b.n	8000e0a <__udivmoddi4+0x222>
 8000ed0:	eba1 0109 	sub.w	r1, r1, r9
 8000ed4:	46c4      	mov	ip, r8
 8000ed6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eda:	fb09 f804 	mul.w	r8, r9, r4
 8000ede:	e7c4      	b.n	8000e6a <__udivmoddi4+0x282>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <SysTick_Handler>:
 */

#include "main.h"

void SysTick_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
	//HAL_IncTick();
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
	...

08000ef4 <main>:
uint32_t input_captures[2];
uint8_t count = 1;
volatile uint8_t is_capture_done = FALSE;

int main(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b0a4      	sub	sp, #144	@ 0x90
 8000ef8:	af00      	add	r7, sp, #0
	uint32_t capture_difference = 0;
 8000efa:	2300      	movs	r3, #0
 8000efc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	double timer2_cnt_freq = 0;
 8000f00:	f04f 0200 	mov.w	r2, #0
 8000f04:	f04f 0300 	mov.w	r3, #0
 8000f08:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
	double timer2_cnt_res = 0;
 8000f0c:	f04f 0200 	mov.w	r2, #0
 8000f10:	f04f 0300 	mov.w	r3, #0
 8000f14:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
	double user_signal_time_period = 0;
 8000f18:	f04f 0200 	mov.w	r2, #0
 8000f1c:	f04f 0300 	mov.w	r3, #0
 8000f20:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
	double user_signal_freq = 0;
 8000f24:	f04f 0200 	mov.w	r2, #0
 8000f28:	f04f 0300 	mov.w	r3, #0
 8000f2c:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	char usr_msg[100];

	HAL_Init();
 8000f30:	f000 fafa 	bl	8001528 <HAL_Init>

	SystemClockConfig();
 8000f34:	f000 f874 	bl	8001020 <SystemClockConfig>
	GPIO_Init();
 8000f38:	f000 f8da 	bl	80010f0 <GPIO_Init>
	UART2_Init();
 8000f3c:	f000 f960 	bl	8001200 <UART2_Init>
	TIMER2_Init();
 8000f40:	f000 f902 	bl	8001148 <TIMER2_Init>
	TIMER5_Init();
 8000f44:	f000 f938 	bl	80011b8 <TIMER5_Init>
	LSE_Configuration();
 8000f48:	f000 f950 	bl	80011ec <LSE_Configuration>

	HAL_TIM_Base_Start_IT(&htimer5);
 8000f4c:	482e      	ldr	r0, [pc, #184]	@ (8001008 <main+0x114>)
 8000f4e:	f001 fb29 	bl	80025a4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(&htimer2, TIM_CHANNEL_1);
 8000f52:	2100      	movs	r1, #0
 8000f54:	482d      	ldr	r0, [pc, #180]	@ (800100c <main+0x118>)
 8000f56:	f001 fbe1 	bl	800271c <HAL_TIM_IC_Start_IT>

	while(1)
	{
		if(is_capture_done)
 8000f5a:	4b2d      	ldr	r3, [pc, #180]	@ (8001010 <main+0x11c>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d0fa      	beq.n	8000f5a <main+0x66>
		{
			if(input_captures[1] > input_captures[0])
 8000f64:	4b2b      	ldr	r3, [pc, #172]	@ (8001014 <main+0x120>)
 8000f66:	685a      	ldr	r2, [r3, #4]
 8000f68:	4b2a      	ldr	r3, [pc, #168]	@ (8001014 <main+0x120>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d907      	bls.n	8000f80 <main+0x8c>
			{
				capture_difference = input_captures[1] - input_captures[0];
 8000f70:	4b28      	ldr	r3, [pc, #160]	@ (8001014 <main+0x120>)
 8000f72:	685a      	ldr	r2, [r3, #4]
 8000f74:	4b27      	ldr	r3, [pc, #156]	@ (8001014 <main+0x120>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000f7e:	e007      	b.n	8000f90 <main+0x9c>
			}
			else
			{
				capture_difference = (0xFFFFFFFF - input_captures[0]) + input_captures[1];
 8000f80:	4b24      	ldr	r3, [pc, #144]	@ (8001014 <main+0x120>)
 8000f82:	685a      	ldr	r2, [r3, #4]
 8000f84:	4b23      	ldr	r3, [pc, #140]	@ (8001014 <main+0x120>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			}

			timer2_cnt_freq = (HAL_RCC_GetPCLK1Freq() * 2) / (htimer2.Init.Prescaler + 1);
 8000f90:	f001 fa86 	bl	80024a0 <HAL_RCC_GetPCLK1Freq>
 8000f94:	4603      	mov	r3, r0
 8000f96:	005a      	lsls	r2, r3, #1
 8000f98:	4b1c      	ldr	r3, [pc, #112]	@ (800100c <main+0x118>)
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff fab6 	bl	8000514 <__aeabi_ui2d>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	460b      	mov	r3, r1
 8000fac:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
			timer2_cnt_res = 1 / timer2_cnt_freq;
 8000fb0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8000fb4:	f04f 0000 	mov.w	r0, #0
 8000fb8:	4917      	ldr	r1, [pc, #92]	@ (8001018 <main+0x124>)
 8000fba:	f7ff fc4f 	bl	800085c <__aeabi_ddiv>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78

			user_signal_time_period = capture_difference * timer2_cnt_res;
 8000fc6:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8000fca:	f7ff faa3 	bl	8000514 <__aeabi_ui2d>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8000fd6:	f7ff fb17 	bl	8000608 <__aeabi_dmul>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	460b      	mov	r3, r1
 8000fde:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
			user_signal_freq = 1 / user_signal_time_period;
 8000fe2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8000fe6:	f04f 0000 	mov.w	r0, #0
 8000fea:	490b      	ldr	r1, [pc, #44]	@ (8001018 <main+0x124>)
 8000fec:	f7ff fc36 	bl	800085c <__aeabi_ddiv>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	460b      	mov	r3, r1
 8000ff4:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68

			sprintf(usr_msg, "Frequency of the signal applied = %.2f Hz\r\n", user_signal_freq);
 8000ff8:	1d38      	adds	r0, r7, #4
 8000ffa:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8000ffe:	4907      	ldr	r1, [pc, #28]	@ (800101c <main+0x128>)
 8001000:	f002 fee4 	bl	8003dcc <siprintf>
		if(is_capture_done)
 8001004:	e7a9      	b.n	8000f5a <main+0x66>
 8001006:	bf00      	nop
 8001008:	20000238 	.word	0x20000238
 800100c:	200001f0 	.word	0x200001f0
 8001010:	200002cc 	.word	0x200002cc
 8001014:	200002c4 	.word	0x200002c4
 8001018:	3ff00000 	.word	0x3ff00000
 800101c:	08006048 	.word	0x08006048

08001020 <SystemClockConfig>:

	return 0;
}

void SystemClockConfig(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b092      	sub	sp, #72	@ 0x48
 8001024:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef osc_init = {0};
 8001026:	f107 0318 	add.w	r3, r7, #24
 800102a:	2230      	movs	r2, #48	@ 0x30
 800102c:	2100      	movs	r1, #0
 800102e:	4618      	mov	r0, r3
 8001030:	f002 ff31 	bl	8003e96 <memset>

	osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_LSI;
 8001034:	2309      	movs	r3, #9
 8001036:	61bb      	str	r3, [r7, #24]
	osc_init.HSEState = RCC_HSE_ON;
 8001038:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800103c:	61fb      	str	r3, [r7, #28]
	osc_init.LSIState = RCC_LSI_ON;
 800103e:	2301      	movs	r3, #1
 8001040:	62fb      	str	r3, [r7, #44]	@ 0x2c
	osc_init.PLL.PLLState = RCC_PLL_ON;
 8001042:	2302      	movs	r3, #2
 8001044:	633b      	str	r3, [r7, #48]	@ 0x30
	osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001046:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800104a:	637b      	str	r3, [r7, #52]	@ 0x34

	osc_init.PLL.PLLM = 8;
 800104c:	2308      	movs	r3, #8
 800104e:	63bb      	str	r3, [r7, #56]	@ 0x38
	osc_init.PLL.PLLN = 100;
 8001050:	2364      	movs	r3, #100	@ 0x64
 8001052:	63fb      	str	r3, [r7, #60]	@ 0x3c
	osc_init.PLL.PLLP = 2;
 8001054:	2302      	movs	r3, #2
 8001056:	643b      	str	r3, [r7, #64]	@ 0x40

	RCC_ClkInitTypeDef clk_init = {0};
 8001058:	1d3b      	adds	r3, r7, #4
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]
 8001060:	609a      	str	r2, [r3, #8]
 8001062:	60da      	str	r2, [r3, #12]
 8001064:	611a      	str	r2, [r3, #16]

	clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK |
 8001066:	230f      	movs	r3, #15
 8001068:	607b      	str	r3, [r7, #4]
						RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800106a:	2302      	movs	r3, #2
 800106c:	60bb      	str	r3, [r7, #8]
	clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800106e:	2300      	movs	r3, #0
 8001070:	60fb      	str	r3, [r7, #12]
	clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 8001072:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001076:	613b      	str	r3, [r7, #16]
	clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 8001078:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800107c:	617b      	str	r3, [r7, #20]

	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800107e:	2300      	movs	r3, #0
 8001080:	603b      	str	r3, [r7, #0]
 8001082:	4b19      	ldr	r3, [pc, #100]	@ (80010e8 <SystemClockConfig+0xc8>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800108a:	4a17      	ldr	r2, [pc, #92]	@ (80010e8 <SystemClockConfig+0xc8>)
 800108c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001090:	6013      	str	r3, [r2, #0]
 8001092:	4b15      	ldr	r3, [pc, #84]	@ (80010e8 <SystemClockConfig+0xc8>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800109a:	603b      	str	r3, [r7, #0]
 800109c:	683b      	ldr	r3, [r7, #0]

	if(HAL_RCC_OscConfig(&osc_init) != HAL_OK)
 800109e:	f107 0318 	add.w	r3, r7, #24
 80010a2:	4618      	mov	r0, r3
 80010a4:	f000 fd24 	bl	8001af0 <HAL_RCC_OscConfig>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <SystemClockConfig+0x92>
		Error_Handler();
 80010ae:	f000 f847 	bl	8001140 <Error_Handler>

	if(HAL_RCC_ClockConfig(&clk_init, FLASH_ACR_LATENCY_1WS) != HAL_OK)
 80010b2:	1d3b      	adds	r3, r7, #4
 80010b4:	2101      	movs	r1, #1
 80010b6:	4618      	mov	r0, r3
 80010b8:	f000 ff92 	bl	8001fe0 <HAL_RCC_ClockConfig>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <SystemClockConfig+0xa6>
		Error_Handler();
 80010c2:	f000 f83d 	bl	8001140 <Error_Handler>

	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80010c6:	2004      	movs	r0, #4
 80010c8:	f000 fb72 	bl	80017b0 <HAL_SYSTICK_CLKSourceConfig>
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 80010cc:	f001 f9dc 	bl	8002488 <HAL_RCC_GetHCLKFreq>
 80010d0:	4603      	mov	r3, r0
 80010d2:	4a06      	ldr	r2, [pc, #24]	@ (80010ec <SystemClockConfig+0xcc>)
 80010d4:	fba2 2303 	umull	r2, r3, r2, r3
 80010d8:	099b      	lsrs	r3, r3, #6
 80010da:	4618      	mov	r0, r3
 80010dc:	f000 fb5b 	bl	8001796 <HAL_SYSTICK_Config>
}
 80010e0:	bf00      	nop
 80010e2:	3748      	adds	r7, #72	@ 0x48
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	40007000 	.word	0x40007000
 80010ec:	10624dd3 	.word	0x10624dd3

080010f0 <GPIO_Init>:

void GPIO_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	603b      	str	r3, [r7, #0]
 80010fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001138 <GPIO_Init+0x48>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fe:	4a0e      	ldr	r2, [pc, #56]	@ (8001138 <GPIO_Init+0x48>)
 8001100:	f043 0308 	orr.w	r3, r3, #8
 8001104:	6313      	str	r3, [r2, #48]	@ 0x30
 8001106:	4b0c      	ldr	r3, [pc, #48]	@ (8001138 <GPIO_Init+0x48>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110a:	f003 0308 	and.w	r3, r3, #8
 800110e:	603b      	str	r3, [r7, #0]
 8001110:	683b      	ldr	r3, [r7, #0]

	GPIO_InitTypeDef ledgpio;

	ledgpio.Pin = GPIO_PIN_13;
 8001112:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001116:	607b      	str	r3, [r7, #4]
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 8001118:	2301      	movs	r3, #1
 800111a:	60bb      	str	r3, [r7, #8]
	ledgpio.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	60fb      	str	r3, [r7, #12]
	ledgpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8001120:	2302      	movs	r3, #2
 8001122:	613b      	str	r3, [r7, #16]

	HAL_GPIO_Init(GPIOD, &ledgpio);
 8001124:	1d3b      	adds	r3, r7, #4
 8001126:	4619      	mov	r1, r3
 8001128:	4804      	ldr	r0, [pc, #16]	@ (800113c <GPIO_Init+0x4c>)
 800112a:	f000 fb5d 	bl	80017e8 <HAL_GPIO_Init>
}
 800112e:	bf00      	nop
 8001130:	3718      	adds	r7, #24
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40023800 	.word	0x40023800
 800113c:	40020c00 	.word	0x40020c00

08001140 <Error_Handler>:

void Error_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
	while(1);
 8001144:	bf00      	nop
 8001146:	e7fd      	b.n	8001144 <Error_Handler+0x4>

08001148 <TIMER2_Init>:
}

void TIMER2_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
	htimer2.Instance = TIM2;
 800114e:	4b19      	ldr	r3, [pc, #100]	@ (80011b4 <TIMER2_Init+0x6c>)
 8001150:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001154:	601a      	str	r2, [r3, #0]
	htimer2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001156:	4b17      	ldr	r3, [pc, #92]	@ (80011b4 <TIMER2_Init+0x6c>)
 8001158:	2200      	movs	r2, #0
 800115a:	609a      	str	r2, [r3, #8]
	htimer2.Init.Period = 0xFFFFFFFF;
 800115c:	4b15      	ldr	r3, [pc, #84]	@ (80011b4 <TIMER2_Init+0x6c>)
 800115e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001162:	60da      	str	r2, [r3, #12]
	htimer2.Init.Prescaler = 1;
 8001164:	4b13      	ldr	r3, [pc, #76]	@ (80011b4 <TIMER2_Init+0x6c>)
 8001166:	2201      	movs	r2, #1
 8001168:	605a      	str	r2, [r3, #4]

	if(HAL_TIM_IC_Init(&htimer2))
 800116a:	4812      	ldr	r0, [pc, #72]	@ (80011b4 <TIMER2_Init+0x6c>)
 800116c:	f001 fa7c 	bl	8002668 <HAL_TIM_IC_Init>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <TIMER2_Init+0x32>
		Error_Handler();
 8001176:	f7ff ffe3 	bl	8001140 <Error_Handler>

	TIM_IC_InitTypeDef htimer2IC_Config = {0};
 800117a:	463b      	mov	r3, r7
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]

	htimer2IC_Config.ICFilter = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	60fb      	str	r3, [r7, #12]
	htimer2IC_Config.ICPolarity = TIM_ICPOLARITY_RISING;
 800118a:	2300      	movs	r3, #0
 800118c:	603b      	str	r3, [r7, #0]
	htimer2IC_Config.ICPrescaler = TIM_ICPSC_DIV1;
 800118e:	2300      	movs	r3, #0
 8001190:	60bb      	str	r3, [r7, #8]
	htimer2IC_Config.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001192:	2301      	movs	r3, #1
 8001194:	607b      	str	r3, [r7, #4]

	if(HAL_TIM_IC_ConfigChannel(&htimer2, &htimer2IC_Config, TIM_CHANNEL_1))
 8001196:	463b      	mov	r3, r7
 8001198:	2200      	movs	r2, #0
 800119a:	4619      	mov	r1, r3
 800119c:	4805      	ldr	r0, [pc, #20]	@ (80011b4 <TIMER2_Init+0x6c>)
 800119e:	f001 fbd7 	bl	8002950 <HAL_TIM_IC_ConfigChannel>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <TIMER2_Init+0x64>
		Error_Handler();
 80011a8:	f7ff ffca 	bl	8001140 <Error_Handler>
}
 80011ac:	bf00      	nop
 80011ae:	3710      	adds	r7, #16
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	200001f0 	.word	0x200001f0

080011b8 <TIMER5_Init>:

void TIMER5_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
	htimer5.Instance = TIM5;
 80011bc:	4b09      	ldr	r3, [pc, #36]	@ (80011e4 <TIMER5_Init+0x2c>)
 80011be:	4a0a      	ldr	r2, [pc, #40]	@ (80011e8 <TIMER5_Init+0x30>)
 80011c0:	601a      	str	r2, [r3, #0]
	htimer5.Init.Prescaler = 9;
 80011c2:	4b08      	ldr	r3, [pc, #32]	@ (80011e4 <TIMER5_Init+0x2c>)
 80011c4:	2209      	movs	r2, #9
 80011c6:	605a      	str	r2, [r3, #4]
	htimer5.Init.Period = 50 - 1;
 80011c8:	4b06      	ldr	r3, [pc, #24]	@ (80011e4 <TIMER5_Init+0x2c>)
 80011ca:	2231      	movs	r2, #49	@ 0x31
 80011cc:	60da      	str	r2, [r3, #12]

	if(HAL_TIM_Base_Init(&htimer5))
 80011ce:	4805      	ldr	r0, [pc, #20]	@ (80011e4 <TIMER5_Init+0x2c>)
 80011d0:	f001 f98e 	bl	80024f0 <HAL_TIM_Base_Init>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <TIMER5_Init+0x26>
		Error_Handler();
 80011da:	f7ff ffb1 	bl	8001140 <Error_Handler>
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000238 	.word	0x20000238
 80011e8:	40000c00 	.word	0x40000c00

080011ec <LSE_Configuration>:

void LSE_Configuration(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
	HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_4);
 80011f0:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80011f4:	2100      	movs	r1, #0
 80011f6:	2000      	movs	r0, #0
 80011f8:	f000 ffd8 	bl	80021ac <HAL_RCC_MCOConfig>
}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}

08001200 <UART2_Init>:

void UART2_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 8001204:	4b11      	ldr	r3, [pc, #68]	@ (800124c <UART2_Init+0x4c>)
 8001206:	4a12      	ldr	r2, [pc, #72]	@ (8001250 <UART2_Init+0x50>)
 8001208:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 800120a:	4b10      	ldr	r3, [pc, #64]	@ (800124c <UART2_Init+0x4c>)
 800120c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001210:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001212:	4b0e      	ldr	r3, [pc, #56]	@ (800124c <UART2_Init+0x4c>)
 8001214:	2200      	movs	r2, #0
 8001216:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001218:	4b0c      	ldr	r3, [pc, #48]	@ (800124c <UART2_Init+0x4c>)
 800121a:	2200      	movs	r2, #0
 800121c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800121e:	4b0b      	ldr	r3, [pc, #44]	@ (800124c <UART2_Init+0x4c>)
 8001220:	2200      	movs	r2, #0
 8001222:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001224:	4b09      	ldr	r3, [pc, #36]	@ (800124c <UART2_Init+0x4c>)
 8001226:	220c      	movs	r2, #12
 8001228:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800122a:	4b08      	ldr	r3, [pc, #32]	@ (800124c <UART2_Init+0x4c>)
 800122c:	2200      	movs	r2, #0
 800122e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001230:	4b06      	ldr	r3, [pc, #24]	@ (800124c <UART2_Init+0x4c>)
 8001232:	2200      	movs	r2, #0
 8001234:	61da      	str	r2, [r3, #28]

	if(HAL_UART_Init(&huart2) != HAL_OK)
 8001236:	4805      	ldr	r0, [pc, #20]	@ (800124c <UART2_Init+0x4c>)
 8001238:	f001 fdef 	bl	8002e1a <HAL_UART_Init>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <UART2_Init+0x46>
		Error_Handler();
 8001242:	f7ff ff7d 	bl	8001140 <Error_Handler>
}
 8001246:	bf00      	nop
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20000280 	.word	0x20000280
 8001250:	40004400 	.word	0x40004400

08001254 <HAL_MspInit>:
 */

#include "main.h"

void HAL_MspInit(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	607b      	str	r3, [r7, #4]
 800125e:	4b10      	ldr	r3, [pc, #64]	@ (80012a0 <HAL_MspInit+0x4c>)
 8001260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001262:	4a0f      	ldr	r2, [pc, #60]	@ (80012a0 <HAL_MspInit+0x4c>)
 8001264:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001268:	6453      	str	r3, [r2, #68]	@ 0x44
 800126a:	4b0d      	ldr	r3, [pc, #52]	@ (80012a0 <HAL_MspInit+0x4c>)
 800126c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800126e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001272:	607b      	str	r3, [r7, #4]
 8001274:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_PWR_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	603b      	str	r3, [r7, #0]
 800127a:	4b09      	ldr	r3, [pc, #36]	@ (80012a0 <HAL_MspInit+0x4c>)
 800127c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800127e:	4a08      	ldr	r2, [pc, #32]	@ (80012a0 <HAL_MspInit+0x4c>)
 8001280:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001284:	6413      	str	r3, [r2, #64]	@ 0x40
 8001286:	4b06      	ldr	r3, [pc, #24]	@ (80012a0 <HAL_MspInit+0x4c>)
 8001288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800128a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800128e:	603b      	str	r3, [r7, #0]
 8001290:	683b      	ldr	r3, [r7, #0]

	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001292:	2007      	movs	r0, #7
 8001294:	f000 fa58 	bl	8001748 <HAL_NVIC_SetPriorityGrouping>
}
 8001298:	bf00      	nop
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40023800 	.word	0x40023800

080012a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08a      	sub	sp, #40	@ 0x28
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80012ac:	2300      	movs	r3, #0
 80012ae:	613b      	str	r3, [r7, #16]
 80012b0:	4b1a      	ldr	r3, [pc, #104]	@ (800131c <HAL_UART_MspInit+0x78>)
 80012b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b4:	4a19      	ldr	r2, [pc, #100]	@ (800131c <HAL_UART_MspInit+0x78>)
 80012b6:	f043 0301 	orr.w	r3, r3, #1
 80012ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80012bc:	4b17      	ldr	r3, [pc, #92]	@ (800131c <HAL_UART_MspInit+0x78>)
 80012be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c0:	f003 0301 	and.w	r3, r3, #1
 80012c4:	613b      	str	r3, [r7, #16]
 80012c6:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_USART2_CLK_ENABLE();
 80012c8:	2300      	movs	r3, #0
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	4b13      	ldr	r3, [pc, #76]	@ (800131c <HAL_UART_MspInit+0x78>)
 80012ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d0:	4a12      	ldr	r2, [pc, #72]	@ (800131c <HAL_UART_MspInit+0x78>)
 80012d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80012d8:	4b10      	ldr	r3, [pc, #64]	@ (800131c <HAL_UART_MspInit+0x78>)
 80012da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	68fb      	ldr	r3, [r7, #12]

	GPIO_InitTypeDef gpio_init = {0};
 80012e4:	f107 0314 	add.w	r3, r7, #20
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
 80012f2:	611a      	str	r2, [r3, #16]

	gpio_init.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 80012f4:	230c      	movs	r3, #12
 80012f6:	617b      	str	r3, [r7, #20]
	gpio_init.Mode = GPIO_MODE_AF_PP;
 80012f8:	2302      	movs	r3, #2
 80012fa:	61bb      	str	r3, [r7, #24]
	gpio_init.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	61fb      	str	r3, [r7, #28]
	gpio_init.Speed = GPIO_SPEED_FREQ_HIGH;
 8001300:	2302      	movs	r3, #2
 8001302:	623b      	str	r3, [r7, #32]
	gpio_init.Alternate = GPIO_AF7_USART2;
 8001304:	2307      	movs	r3, #7
 8001306:	627b      	str	r3, [r7, #36]	@ 0x24

	HAL_GPIO_Init(GPIOA, &gpio_init);
 8001308:	f107 0314 	add.w	r3, r7, #20
 800130c:	4619      	mov	r1, r3
 800130e:	4804      	ldr	r0, [pc, #16]	@ (8001320 <HAL_UART_MspInit+0x7c>)
 8001310:	f000 fa6a 	bl	80017e8 <HAL_GPIO_Init>
}
 8001314:	bf00      	nop
 8001316:	3728      	adds	r7, #40	@ 0x28
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	40023800 	.word	0x40023800
 8001320:	40020000 	.word	0x40020000

08001324 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  return 1;
 8001328:	2301      	movs	r3, #1
}
 800132a:	4618      	mov	r0, r3
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <_kill>:

int _kill(int pid, int sig)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800133e:	f002 fdfd 	bl	8003f3c <__errno>
 8001342:	4603      	mov	r3, r0
 8001344:	2216      	movs	r2, #22
 8001346:	601a      	str	r2, [r3, #0]
  return -1;
 8001348:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800134c:	4618      	mov	r0, r3
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}

08001354 <_exit>:

void _exit (int status)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800135c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f7ff ffe7 	bl	8001334 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001366:	bf00      	nop
 8001368:	e7fd      	b.n	8001366 <_exit+0x12>

0800136a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b086      	sub	sp, #24
 800136e:	af00      	add	r7, sp, #0
 8001370:	60f8      	str	r0, [r7, #12]
 8001372:	60b9      	str	r1, [r7, #8]
 8001374:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001376:	2300      	movs	r3, #0
 8001378:	617b      	str	r3, [r7, #20]
 800137a:	e00a      	b.n	8001392 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800137c:	f3af 8000 	nop.w
 8001380:	4601      	mov	r1, r0
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	1c5a      	adds	r2, r3, #1
 8001386:	60ba      	str	r2, [r7, #8]
 8001388:	b2ca      	uxtb	r2, r1
 800138a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	3301      	adds	r3, #1
 8001390:	617b      	str	r3, [r7, #20]
 8001392:	697a      	ldr	r2, [r7, #20]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	429a      	cmp	r2, r3
 8001398:	dbf0      	blt.n	800137c <_read+0x12>
  }

  return len;
 800139a:	687b      	ldr	r3, [r7, #4]
}
 800139c:	4618      	mov	r0, r3
 800139e:	3718      	adds	r7, #24
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b0:	2300      	movs	r3, #0
 80013b2:	617b      	str	r3, [r7, #20]
 80013b4:	e009      	b.n	80013ca <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	1c5a      	adds	r2, r3, #1
 80013ba:	60ba      	str	r2, [r7, #8]
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	4618      	mov	r0, r3
 80013c0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	3301      	adds	r3, #1
 80013c8:	617b      	str	r3, [r7, #20]
 80013ca:	697a      	ldr	r2, [r7, #20]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	429a      	cmp	r2, r3
 80013d0:	dbf1      	blt.n	80013b6 <_write+0x12>
  }
  return len;
 80013d2:	687b      	ldr	r3, [r7, #4]
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3718      	adds	r7, #24
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <_close>:

int _close(int file)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001404:	605a      	str	r2, [r3, #4]
  return 0;
 8001406:	2300      	movs	r3, #0
}
 8001408:	4618      	mov	r0, r3
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <_isatty>:

int _isatty(int file)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800141c:	2301      	movs	r3, #1
}
 800141e:	4618      	mov	r0, r3
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr

0800142a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800142a:	b480      	push	{r7}
 800142c:	b085      	sub	sp, #20
 800142e:	af00      	add	r7, sp, #0
 8001430:	60f8      	str	r0, [r7, #12]
 8001432:	60b9      	str	r1, [r7, #8]
 8001434:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001436:	2300      	movs	r3, #0
}
 8001438:	4618      	mov	r0, r3
 800143a:	3714      	adds	r7, #20
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800144c:	4a14      	ldr	r2, [pc, #80]	@ (80014a0 <_sbrk+0x5c>)
 800144e:	4b15      	ldr	r3, [pc, #84]	@ (80014a4 <_sbrk+0x60>)
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001458:	4b13      	ldr	r3, [pc, #76]	@ (80014a8 <_sbrk+0x64>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d102      	bne.n	8001466 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001460:	4b11      	ldr	r3, [pc, #68]	@ (80014a8 <_sbrk+0x64>)
 8001462:	4a12      	ldr	r2, [pc, #72]	@ (80014ac <_sbrk+0x68>)
 8001464:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001466:	4b10      	ldr	r3, [pc, #64]	@ (80014a8 <_sbrk+0x64>)
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4413      	add	r3, r2
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	429a      	cmp	r2, r3
 8001472:	d207      	bcs.n	8001484 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001474:	f002 fd62 	bl	8003f3c <__errno>
 8001478:	4603      	mov	r3, r0
 800147a:	220c      	movs	r2, #12
 800147c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800147e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001482:	e009      	b.n	8001498 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001484:	4b08      	ldr	r3, [pc, #32]	@ (80014a8 <_sbrk+0x64>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800148a:	4b07      	ldr	r3, [pc, #28]	@ (80014a8 <_sbrk+0x64>)
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4413      	add	r3, r2
 8001492:	4a05      	ldr	r2, [pc, #20]	@ (80014a8 <_sbrk+0x64>)
 8001494:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001496:	68fb      	ldr	r3, [r7, #12]
}
 8001498:	4618      	mov	r0, r3
 800149a:	3718      	adds	r7, #24
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	20020000 	.word	0x20020000
 80014a4:	00000400 	.word	0x00000400
 80014a8:	200002d0 	.word	0x200002d0
 80014ac:	20000428 	.word	0x20000428

080014b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014b4:	4b06      	ldr	r3, [pc, #24]	@ (80014d0 <SystemInit+0x20>)
 80014b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014ba:	4a05      	ldr	r2, [pc, #20]	@ (80014d0 <SystemInit+0x20>)
 80014bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	e000ed00 	.word	0xe000ed00

080014d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80014d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800150c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014d8:	f7ff ffea 	bl	80014b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014dc:	480c      	ldr	r0, [pc, #48]	@ (8001510 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014de:	490d      	ldr	r1, [pc, #52]	@ (8001514 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001518 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014e4:	e002      	b.n	80014ec <LoopCopyDataInit>

080014e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ea:	3304      	adds	r3, #4

080014ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014f0:	d3f9      	bcc.n	80014e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014f2:	4a0a      	ldr	r2, [pc, #40]	@ (800151c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014f4:	4c0a      	ldr	r4, [pc, #40]	@ (8001520 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014f8:	e001      	b.n	80014fe <LoopFillZerobss>

080014fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014fc:	3204      	adds	r2, #4

080014fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001500:	d3fb      	bcc.n	80014fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001502:	f002 fd21 	bl	8003f48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001506:	f7ff fcf5 	bl	8000ef4 <main>
  bx  lr    
 800150a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800150c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001510:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001514:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001518:	0800645c 	.word	0x0800645c
  ldr r2, =_sbss
 800151c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001520:	20000424 	.word	0x20000424

08001524 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001524:	e7fe      	b.n	8001524 <ADC_IRQHandler>
	...

08001528 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800152c:	4b0e      	ldr	r3, [pc, #56]	@ (8001568 <HAL_Init+0x40>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a0d      	ldr	r2, [pc, #52]	@ (8001568 <HAL_Init+0x40>)
 8001532:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001536:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001538:	4b0b      	ldr	r3, [pc, #44]	@ (8001568 <HAL_Init+0x40>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a0a      	ldr	r2, [pc, #40]	@ (8001568 <HAL_Init+0x40>)
 800153e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001542:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001544:	4b08      	ldr	r3, [pc, #32]	@ (8001568 <HAL_Init+0x40>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a07      	ldr	r2, [pc, #28]	@ (8001568 <HAL_Init+0x40>)
 800154a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800154e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001550:	2003      	movs	r0, #3
 8001552:	f000 f8f9 	bl	8001748 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001556:	2000      	movs	r0, #0
 8001558:	f000 f808 	bl	800156c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800155c:	f7ff fe7a 	bl	8001254 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40023c00 	.word	0x40023c00

0800156c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001574:	4b12      	ldr	r3, [pc, #72]	@ (80015c0 <HAL_InitTick+0x54>)
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	4b12      	ldr	r3, [pc, #72]	@ (80015c4 <HAL_InitTick+0x58>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	4619      	mov	r1, r3
 800157e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001582:	fbb3 f3f1 	udiv	r3, r3, r1
 8001586:	fbb2 f3f3 	udiv	r3, r2, r3
 800158a:	4618      	mov	r0, r3
 800158c:	f000 f903 	bl	8001796 <HAL_SYSTICK_Config>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e00e      	b.n	80015b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2b0f      	cmp	r3, #15
 800159e:	d80a      	bhi.n	80015b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015a0:	2200      	movs	r2, #0
 80015a2:	6879      	ldr	r1, [r7, #4]
 80015a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80015a8:	f000 f8d9 	bl	800175e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015ac:	4a06      	ldr	r2, [pc, #24]	@ (80015c8 <HAL_InitTick+0x5c>)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015b2:	2300      	movs	r3, #0
 80015b4:	e000      	b.n	80015b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3708      	adds	r7, #8
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	20000000 	.word	0x20000000
 80015c4:	20000008 	.word	0x20000008
 80015c8:	20000004 	.word	0x20000004

080015cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  return uwTick;
 80015d0:	4b03      	ldr	r3, [pc, #12]	@ (80015e0 <HAL_GetTick+0x14>)
 80015d2:	681b      	ldr	r3, [r3, #0]
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	200002d4 	.word	0x200002d4

080015e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f003 0307 	and.w	r3, r3, #7
 80015f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001628 <__NVIC_SetPriorityGrouping+0x44>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015fa:	68ba      	ldr	r2, [r7, #8]
 80015fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001600:	4013      	ands	r3, r2
 8001602:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800160c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001610:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001614:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001616:	4a04      	ldr	r2, [pc, #16]	@ (8001628 <__NVIC_SetPriorityGrouping+0x44>)
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	60d3      	str	r3, [r2, #12]
}
 800161c:	bf00      	nop
 800161e:	3714      	adds	r7, #20
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001630:	4b04      	ldr	r3, [pc, #16]	@ (8001644 <__NVIC_GetPriorityGrouping+0x18>)
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	0a1b      	lsrs	r3, r3, #8
 8001636:	f003 0307 	and.w	r3, r3, #7
}
 800163a:	4618      	mov	r0, r3
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	e000ed00 	.word	0xe000ed00

08001648 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	6039      	str	r1, [r7, #0]
 8001652:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001658:	2b00      	cmp	r3, #0
 800165a:	db0a      	blt.n	8001672 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	b2da      	uxtb	r2, r3
 8001660:	490c      	ldr	r1, [pc, #48]	@ (8001694 <__NVIC_SetPriority+0x4c>)
 8001662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001666:	0112      	lsls	r2, r2, #4
 8001668:	b2d2      	uxtb	r2, r2
 800166a:	440b      	add	r3, r1
 800166c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001670:	e00a      	b.n	8001688 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	b2da      	uxtb	r2, r3
 8001676:	4908      	ldr	r1, [pc, #32]	@ (8001698 <__NVIC_SetPriority+0x50>)
 8001678:	79fb      	ldrb	r3, [r7, #7]
 800167a:	f003 030f 	and.w	r3, r3, #15
 800167e:	3b04      	subs	r3, #4
 8001680:	0112      	lsls	r2, r2, #4
 8001682:	b2d2      	uxtb	r2, r2
 8001684:	440b      	add	r3, r1
 8001686:	761a      	strb	r2, [r3, #24]
}
 8001688:	bf00      	nop
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	e000e100 	.word	0xe000e100
 8001698:	e000ed00 	.word	0xe000ed00

0800169c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800169c:	b480      	push	{r7}
 800169e:	b089      	sub	sp, #36	@ 0x24
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	60b9      	str	r1, [r7, #8]
 80016a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f003 0307 	and.w	r3, r3, #7
 80016ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	f1c3 0307 	rsb	r3, r3, #7
 80016b6:	2b04      	cmp	r3, #4
 80016b8:	bf28      	it	cs
 80016ba:	2304      	movcs	r3, #4
 80016bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	3304      	adds	r3, #4
 80016c2:	2b06      	cmp	r3, #6
 80016c4:	d902      	bls.n	80016cc <NVIC_EncodePriority+0x30>
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	3b03      	subs	r3, #3
 80016ca:	e000      	b.n	80016ce <NVIC_EncodePriority+0x32>
 80016cc:	2300      	movs	r3, #0
 80016ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	43da      	mvns	r2, r3
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	401a      	ands	r2, r3
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016e4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	fa01 f303 	lsl.w	r3, r1, r3
 80016ee:	43d9      	mvns	r1, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f4:	4313      	orrs	r3, r2
         );
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3724      	adds	r7, #36	@ 0x24
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
	...

08001704 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	3b01      	subs	r3, #1
 8001710:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001714:	d301      	bcc.n	800171a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001716:	2301      	movs	r3, #1
 8001718:	e00f      	b.n	800173a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800171a:	4a0a      	ldr	r2, [pc, #40]	@ (8001744 <SysTick_Config+0x40>)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	3b01      	subs	r3, #1
 8001720:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001722:	210f      	movs	r1, #15
 8001724:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001728:	f7ff ff8e 	bl	8001648 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800172c:	4b05      	ldr	r3, [pc, #20]	@ (8001744 <SysTick_Config+0x40>)
 800172e:	2200      	movs	r2, #0
 8001730:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001732:	4b04      	ldr	r3, [pc, #16]	@ (8001744 <SysTick_Config+0x40>)
 8001734:	2207      	movs	r2, #7
 8001736:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	e000e010 	.word	0xe000e010

08001748 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f7ff ff47 	bl	80015e4 <__NVIC_SetPriorityGrouping>
}
 8001756:	bf00      	nop
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800175e:	b580      	push	{r7, lr}
 8001760:	b086      	sub	sp, #24
 8001762:	af00      	add	r7, sp, #0
 8001764:	4603      	mov	r3, r0
 8001766:	60b9      	str	r1, [r7, #8]
 8001768:	607a      	str	r2, [r7, #4]
 800176a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800176c:	2300      	movs	r3, #0
 800176e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001770:	f7ff ff5c 	bl	800162c <__NVIC_GetPriorityGrouping>
 8001774:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	68b9      	ldr	r1, [r7, #8]
 800177a:	6978      	ldr	r0, [r7, #20]
 800177c:	f7ff ff8e 	bl	800169c <NVIC_EncodePriority>
 8001780:	4602      	mov	r2, r0
 8001782:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001786:	4611      	mov	r1, r2
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff ff5d 	bl	8001648 <__NVIC_SetPriority>
}
 800178e:	bf00      	nop
 8001790:	3718      	adds	r7, #24
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b082      	sub	sp, #8
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f7ff ffb0 	bl	8001704 <SysTick_Config>
 80017a4:	4603      	mov	r3, r0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
	...

080017b0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2b04      	cmp	r3, #4
 80017bc:	d106      	bne.n	80017cc <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80017be:	4b09      	ldr	r3, [pc, #36]	@ (80017e4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a08      	ldr	r2, [pc, #32]	@ (80017e4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80017c4:	f043 0304 	orr.w	r3, r3, #4
 80017c8:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80017ca:	e005      	b.n	80017d8 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80017cc:	4b05      	ldr	r3, [pc, #20]	@ (80017e4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a04      	ldr	r2, [pc, #16]	@ (80017e4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80017d2:	f023 0304 	bic.w	r3, r3, #4
 80017d6:	6013      	str	r3, [r2, #0]
}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	e000e010 	.word	0xe000e010

080017e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b089      	sub	sp, #36	@ 0x24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017f2:	2300      	movs	r3, #0
 80017f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017f6:	2300      	movs	r3, #0
 80017f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017fa:	2300      	movs	r3, #0
 80017fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017fe:	2300      	movs	r3, #0
 8001800:	61fb      	str	r3, [r7, #28]
 8001802:	e159      	b.n	8001ab8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001804:	2201      	movs	r2, #1
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	697a      	ldr	r2, [r7, #20]
 8001814:	4013      	ands	r3, r2
 8001816:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001818:	693a      	ldr	r2, [r7, #16]
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	429a      	cmp	r2, r3
 800181e:	f040 8148 	bne.w	8001ab2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f003 0303 	and.w	r3, r3, #3
 800182a:	2b01      	cmp	r3, #1
 800182c:	d005      	beq.n	800183a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001836:	2b02      	cmp	r3, #2
 8001838:	d130      	bne.n	800189c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	2203      	movs	r2, #3
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	43db      	mvns	r3, r3
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	4013      	ands	r3, r2
 8001850:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	68da      	ldr	r2, [r3, #12]
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	fa02 f303 	lsl.w	r3, r2, r3
 800185e:	69ba      	ldr	r2, [r7, #24]
 8001860:	4313      	orrs	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001870:	2201      	movs	r2, #1
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	43db      	mvns	r3, r3
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	4013      	ands	r3, r2
 800187e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	091b      	lsrs	r3, r3, #4
 8001886:	f003 0201 	and.w	r2, r3, #1
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	4313      	orrs	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f003 0303 	and.w	r3, r3, #3
 80018a4:	2b03      	cmp	r3, #3
 80018a6:	d017      	beq.n	80018d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	2203      	movs	r2, #3
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	43db      	mvns	r3, r3
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	4013      	ands	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	689a      	ldr	r2, [r3, #8]
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f003 0303 	and.w	r3, r3, #3
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d123      	bne.n	800192c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	08da      	lsrs	r2, r3, #3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	3208      	adds	r2, #8
 80018ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	f003 0307 	and.w	r3, r3, #7
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	220f      	movs	r2, #15
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	43db      	mvns	r3, r3
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	4013      	ands	r3, r2
 8001906:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	691a      	ldr	r2, [r3, #16]
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	4313      	orrs	r3, r2
 800191c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	08da      	lsrs	r2, r3, #3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	3208      	adds	r2, #8
 8001926:	69b9      	ldr	r1, [r7, #24]
 8001928:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	2203      	movs	r2, #3
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	43db      	mvns	r3, r3
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	4013      	ands	r3, r2
 8001942:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f003 0203 	and.w	r2, r3, #3
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	4313      	orrs	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001968:	2b00      	cmp	r3, #0
 800196a:	f000 80a2 	beq.w	8001ab2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	4b57      	ldr	r3, [pc, #348]	@ (8001ad0 <HAL_GPIO_Init+0x2e8>)
 8001974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001976:	4a56      	ldr	r2, [pc, #344]	@ (8001ad0 <HAL_GPIO_Init+0x2e8>)
 8001978:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800197c:	6453      	str	r3, [r2, #68]	@ 0x44
 800197e:	4b54      	ldr	r3, [pc, #336]	@ (8001ad0 <HAL_GPIO_Init+0x2e8>)
 8001980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001982:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800198a:	4a52      	ldr	r2, [pc, #328]	@ (8001ad4 <HAL_GPIO_Init+0x2ec>)
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	089b      	lsrs	r3, r3, #2
 8001990:	3302      	adds	r3, #2
 8001992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001996:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	f003 0303 	and.w	r3, r3, #3
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	220f      	movs	r2, #15
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	43db      	mvns	r3, r3
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	4013      	ands	r3, r2
 80019ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a49      	ldr	r2, [pc, #292]	@ (8001ad8 <HAL_GPIO_Init+0x2f0>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d019      	beq.n	80019ea <HAL_GPIO_Init+0x202>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a48      	ldr	r2, [pc, #288]	@ (8001adc <HAL_GPIO_Init+0x2f4>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d013      	beq.n	80019e6 <HAL_GPIO_Init+0x1fe>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a47      	ldr	r2, [pc, #284]	@ (8001ae0 <HAL_GPIO_Init+0x2f8>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d00d      	beq.n	80019e2 <HAL_GPIO_Init+0x1fa>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a46      	ldr	r2, [pc, #280]	@ (8001ae4 <HAL_GPIO_Init+0x2fc>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d007      	beq.n	80019de <HAL_GPIO_Init+0x1f6>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a45      	ldr	r2, [pc, #276]	@ (8001ae8 <HAL_GPIO_Init+0x300>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d101      	bne.n	80019da <HAL_GPIO_Init+0x1f2>
 80019d6:	2304      	movs	r3, #4
 80019d8:	e008      	b.n	80019ec <HAL_GPIO_Init+0x204>
 80019da:	2307      	movs	r3, #7
 80019dc:	e006      	b.n	80019ec <HAL_GPIO_Init+0x204>
 80019de:	2303      	movs	r3, #3
 80019e0:	e004      	b.n	80019ec <HAL_GPIO_Init+0x204>
 80019e2:	2302      	movs	r3, #2
 80019e4:	e002      	b.n	80019ec <HAL_GPIO_Init+0x204>
 80019e6:	2301      	movs	r3, #1
 80019e8:	e000      	b.n	80019ec <HAL_GPIO_Init+0x204>
 80019ea:	2300      	movs	r3, #0
 80019ec:	69fa      	ldr	r2, [r7, #28]
 80019ee:	f002 0203 	and.w	r2, r2, #3
 80019f2:	0092      	lsls	r2, r2, #2
 80019f4:	4093      	lsls	r3, r2
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019fc:	4935      	ldr	r1, [pc, #212]	@ (8001ad4 <HAL_GPIO_Init+0x2ec>)
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	089b      	lsrs	r3, r3, #2
 8001a02:	3302      	adds	r3, #2
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a0a:	4b38      	ldr	r3, [pc, #224]	@ (8001aec <HAL_GPIO_Init+0x304>)
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	43db      	mvns	r3, r3
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	4013      	ands	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d003      	beq.n	8001a2e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a2e:	4a2f      	ldr	r2, [pc, #188]	@ (8001aec <HAL_GPIO_Init+0x304>)
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a34:	4b2d      	ldr	r3, [pc, #180]	@ (8001aec <HAL_GPIO_Init+0x304>)
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	4013      	ands	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d003      	beq.n	8001a58 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a58:	4a24      	ldr	r2, [pc, #144]	@ (8001aec <HAL_GPIO_Init+0x304>)
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a5e:	4b23      	ldr	r3, [pc, #140]	@ (8001aec <HAL_GPIO_Init+0x304>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	43db      	mvns	r3, r3
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d003      	beq.n	8001a82 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a82:	4a1a      	ldr	r2, [pc, #104]	@ (8001aec <HAL_GPIO_Init+0x304>)
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a88:	4b18      	ldr	r3, [pc, #96]	@ (8001aec <HAL_GPIO_Init+0x304>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	43db      	mvns	r3, r3
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	4013      	ands	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d003      	beq.n	8001aac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001aac:	4a0f      	ldr	r2, [pc, #60]	@ (8001aec <HAL_GPIO_Init+0x304>)
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	61fb      	str	r3, [r7, #28]
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	2b0f      	cmp	r3, #15
 8001abc:	f67f aea2 	bls.w	8001804 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ac0:	bf00      	nop
 8001ac2:	bf00      	nop
 8001ac4:	3724      	adds	r7, #36	@ 0x24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	40023800 	.word	0x40023800
 8001ad4:	40013800 	.word	0x40013800
 8001ad8:	40020000 	.word	0x40020000
 8001adc:	40020400 	.word	0x40020400
 8001ae0:	40020800 	.word	0x40020800
 8001ae4:	40020c00 	.word	0x40020c00
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	40013c00 	.word	0x40013c00

08001af0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e267      	b.n	8001fd2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d075      	beq.n	8001bfa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001b0e:	4b88      	ldr	r3, [pc, #544]	@ (8001d30 <HAL_RCC_OscConfig+0x240>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f003 030c 	and.w	r3, r3, #12
 8001b16:	2b04      	cmp	r3, #4
 8001b18:	d00c      	beq.n	8001b34 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b1a:	4b85      	ldr	r3, [pc, #532]	@ (8001d30 <HAL_RCC_OscConfig+0x240>)
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001b22:	2b08      	cmp	r3, #8
 8001b24:	d112      	bne.n	8001b4c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b26:	4b82      	ldr	r3, [pc, #520]	@ (8001d30 <HAL_RCC_OscConfig+0x240>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b2e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001b32:	d10b      	bne.n	8001b4c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b34:	4b7e      	ldr	r3, [pc, #504]	@ (8001d30 <HAL_RCC_OscConfig+0x240>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d05b      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x108>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d157      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e242      	b.n	8001fd2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b54:	d106      	bne.n	8001b64 <HAL_RCC_OscConfig+0x74>
 8001b56:	4b76      	ldr	r3, [pc, #472]	@ (8001d30 <HAL_RCC_OscConfig+0x240>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a75      	ldr	r2, [pc, #468]	@ (8001d30 <HAL_RCC_OscConfig+0x240>)
 8001b5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b60:	6013      	str	r3, [r2, #0]
 8001b62:	e01d      	b.n	8001ba0 <HAL_RCC_OscConfig+0xb0>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b6c:	d10c      	bne.n	8001b88 <HAL_RCC_OscConfig+0x98>
 8001b6e:	4b70      	ldr	r3, [pc, #448]	@ (8001d30 <HAL_RCC_OscConfig+0x240>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a6f      	ldr	r2, [pc, #444]	@ (8001d30 <HAL_RCC_OscConfig+0x240>)
 8001b74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b78:	6013      	str	r3, [r2, #0]
 8001b7a:	4b6d      	ldr	r3, [pc, #436]	@ (8001d30 <HAL_RCC_OscConfig+0x240>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a6c      	ldr	r2, [pc, #432]	@ (8001d30 <HAL_RCC_OscConfig+0x240>)
 8001b80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b84:	6013      	str	r3, [r2, #0]
 8001b86:	e00b      	b.n	8001ba0 <HAL_RCC_OscConfig+0xb0>
 8001b88:	4b69      	ldr	r3, [pc, #420]	@ (8001d30 <HAL_RCC_OscConfig+0x240>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a68      	ldr	r2, [pc, #416]	@ (8001d30 <HAL_RCC_OscConfig+0x240>)
 8001b8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b92:	6013      	str	r3, [r2, #0]
 8001b94:	4b66      	ldr	r3, [pc, #408]	@ (8001d30 <HAL_RCC_OscConfig+0x240>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a65      	ldr	r2, [pc, #404]	@ (8001d30 <HAL_RCC_OscConfig+0x240>)
 8001b9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d013      	beq.n	8001bd0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba8:	f7ff fd10 	bl	80015cc <HAL_GetTick>
 8001bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bae:	e008      	b.n	8001bc2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bb0:	f7ff fd0c 	bl	80015cc <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b64      	cmp	r3, #100	@ 0x64
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e207      	b.n	8001fd2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bc2:	4b5b      	ldr	r3, [pc, #364]	@ (8001d30 <HAL_RCC_OscConfig+0x240>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d0f0      	beq.n	8001bb0 <HAL_RCC_OscConfig+0xc0>
 8001bce:	e014      	b.n	8001bfa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd0:	f7ff fcfc 	bl	80015cc <HAL_GetTick>
 8001bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bd6:	e008      	b.n	8001bea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bd8:	f7ff fcf8 	bl	80015cc <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b64      	cmp	r3, #100	@ 0x64
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e1f3      	b.n	8001fd2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bea:	4b51      	ldr	r3, [pc, #324]	@ (8001d30 <HAL_RCC_OscConfig+0x240>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d1f0      	bne.n	8001bd8 <HAL_RCC_OscConfig+0xe8>
 8001bf6:	e000      	b.n	8001bfa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d063      	beq.n	8001cce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001c06:	4b4a      	ldr	r3, [pc, #296]	@ (8001d30 <HAL_RCC_OscConfig+0x240>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f003 030c 	and.w	r3, r3, #12
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d00b      	beq.n	8001c2a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c12:	4b47      	ldr	r3, [pc, #284]	@ (8001d30 <HAL_RCC_OscConfig+0x240>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001c1a:	2b08      	cmp	r3, #8
 8001c1c:	d11c      	bne.n	8001c58 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c1e:	4b44      	ldr	r3, [pc, #272]	@ (8001d30 <HAL_RCC_OscConfig+0x240>)
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d116      	bne.n	8001c58 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c2a:	4b41      	ldr	r3, [pc, #260]	@ (8001d30 <HAL_RCC_OscConfig+0x240>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d005      	beq.n	8001c42 <HAL_RCC_OscConfig+0x152>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d001      	beq.n	8001c42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e1c7      	b.n	8001fd2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c42:	4b3b      	ldr	r3, [pc, #236]	@ (8001d30 <HAL_RCC_OscConfig+0x240>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	00db      	lsls	r3, r3, #3
 8001c50:	4937      	ldr	r1, [pc, #220]	@ (8001d30 <HAL_RCC_OscConfig+0x240>)
 8001c52:	4313      	orrs	r3, r2
 8001c54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c56:	e03a      	b.n	8001cce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d020      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c60:	4b34      	ldr	r3, [pc, #208]	@ (8001d34 <HAL_RCC_OscConfig+0x244>)
 8001c62:	2201      	movs	r2, #1
 8001c64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c66:	f7ff fcb1 	bl	80015cc <HAL_GetTick>
 8001c6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c6c:	e008      	b.n	8001c80 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c6e:	f7ff fcad 	bl	80015cc <HAL_GetTick>
 8001c72:	4602      	mov	r2, r0
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d901      	bls.n	8001c80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e1a8      	b.n	8001fd2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c80:	4b2b      	ldr	r3, [pc, #172]	@ (8001d30 <HAL_RCC_OscConfig+0x240>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0302 	and.w	r3, r3, #2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d0f0      	beq.n	8001c6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c8c:	4b28      	ldr	r3, [pc, #160]	@ (8001d30 <HAL_RCC_OscConfig+0x240>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	691b      	ldr	r3, [r3, #16]
 8001c98:	00db      	lsls	r3, r3, #3
 8001c9a:	4925      	ldr	r1, [pc, #148]	@ (8001d30 <HAL_RCC_OscConfig+0x240>)
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	600b      	str	r3, [r1, #0]
 8001ca0:	e015      	b.n	8001cce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ca2:	4b24      	ldr	r3, [pc, #144]	@ (8001d34 <HAL_RCC_OscConfig+0x244>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca8:	f7ff fc90 	bl	80015cc <HAL_GetTick>
 8001cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cb0:	f7ff fc8c 	bl	80015cc <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e187      	b.n	8001fd2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cc2:	4b1b      	ldr	r3, [pc, #108]	@ (8001d30 <HAL_RCC_OscConfig+0x240>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d1f0      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0308 	and.w	r3, r3, #8
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d036      	beq.n	8001d48 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	695b      	ldr	r3, [r3, #20]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d016      	beq.n	8001d10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ce2:	4b15      	ldr	r3, [pc, #84]	@ (8001d38 <HAL_RCC_OscConfig+0x248>)
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce8:	f7ff fc70 	bl	80015cc <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cee:	e008      	b.n	8001d02 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cf0:	f7ff fc6c 	bl	80015cc <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e167      	b.n	8001fd2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d02:	4b0b      	ldr	r3, [pc, #44]	@ (8001d30 <HAL_RCC_OscConfig+0x240>)
 8001d04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d0f0      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x200>
 8001d0e:	e01b      	b.n	8001d48 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d10:	4b09      	ldr	r3, [pc, #36]	@ (8001d38 <HAL_RCC_OscConfig+0x248>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d16:	f7ff fc59 	bl	80015cc <HAL_GetTick>
 8001d1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d1c:	e00e      	b.n	8001d3c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d1e:	f7ff fc55 	bl	80015cc <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d907      	bls.n	8001d3c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e150      	b.n	8001fd2 <HAL_RCC_OscConfig+0x4e2>
 8001d30:	40023800 	.word	0x40023800
 8001d34:	42470000 	.word	0x42470000
 8001d38:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d3c:	4b88      	ldr	r3, [pc, #544]	@ (8001f60 <HAL_RCC_OscConfig+0x470>)
 8001d3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d1ea      	bne.n	8001d1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0304 	and.w	r3, r3, #4
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	f000 8097 	beq.w	8001e84 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d56:	2300      	movs	r3, #0
 8001d58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d5a:	4b81      	ldr	r3, [pc, #516]	@ (8001f60 <HAL_RCC_OscConfig+0x470>)
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d10f      	bne.n	8001d86 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d66:	2300      	movs	r3, #0
 8001d68:	60bb      	str	r3, [r7, #8]
 8001d6a:	4b7d      	ldr	r3, [pc, #500]	@ (8001f60 <HAL_RCC_OscConfig+0x470>)
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d6e:	4a7c      	ldr	r2, [pc, #496]	@ (8001f60 <HAL_RCC_OscConfig+0x470>)
 8001d70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d74:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d76:	4b7a      	ldr	r3, [pc, #488]	@ (8001f60 <HAL_RCC_OscConfig+0x470>)
 8001d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d7e:	60bb      	str	r3, [r7, #8]
 8001d80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d82:	2301      	movs	r3, #1
 8001d84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d86:	4b77      	ldr	r3, [pc, #476]	@ (8001f64 <HAL_RCC_OscConfig+0x474>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d118      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d92:	4b74      	ldr	r3, [pc, #464]	@ (8001f64 <HAL_RCC_OscConfig+0x474>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a73      	ldr	r2, [pc, #460]	@ (8001f64 <HAL_RCC_OscConfig+0x474>)
 8001d98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d9e:	f7ff fc15 	bl	80015cc <HAL_GetTick>
 8001da2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da4:	e008      	b.n	8001db8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001da6:	f7ff fc11 	bl	80015cc <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d901      	bls.n	8001db8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e10c      	b.n	8001fd2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db8:	4b6a      	ldr	r3, [pc, #424]	@ (8001f64 <HAL_RCC_OscConfig+0x474>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d0f0      	beq.n	8001da6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d106      	bne.n	8001dda <HAL_RCC_OscConfig+0x2ea>
 8001dcc:	4b64      	ldr	r3, [pc, #400]	@ (8001f60 <HAL_RCC_OscConfig+0x470>)
 8001dce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dd0:	4a63      	ldr	r2, [pc, #396]	@ (8001f60 <HAL_RCC_OscConfig+0x470>)
 8001dd2:	f043 0301 	orr.w	r3, r3, #1
 8001dd6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dd8:	e01c      	b.n	8001e14 <HAL_RCC_OscConfig+0x324>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	2b05      	cmp	r3, #5
 8001de0:	d10c      	bne.n	8001dfc <HAL_RCC_OscConfig+0x30c>
 8001de2:	4b5f      	ldr	r3, [pc, #380]	@ (8001f60 <HAL_RCC_OscConfig+0x470>)
 8001de4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001de6:	4a5e      	ldr	r2, [pc, #376]	@ (8001f60 <HAL_RCC_OscConfig+0x470>)
 8001de8:	f043 0304 	orr.w	r3, r3, #4
 8001dec:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dee:	4b5c      	ldr	r3, [pc, #368]	@ (8001f60 <HAL_RCC_OscConfig+0x470>)
 8001df0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001df2:	4a5b      	ldr	r2, [pc, #364]	@ (8001f60 <HAL_RCC_OscConfig+0x470>)
 8001df4:	f043 0301 	orr.w	r3, r3, #1
 8001df8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dfa:	e00b      	b.n	8001e14 <HAL_RCC_OscConfig+0x324>
 8001dfc:	4b58      	ldr	r3, [pc, #352]	@ (8001f60 <HAL_RCC_OscConfig+0x470>)
 8001dfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e00:	4a57      	ldr	r2, [pc, #348]	@ (8001f60 <HAL_RCC_OscConfig+0x470>)
 8001e02:	f023 0301 	bic.w	r3, r3, #1
 8001e06:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e08:	4b55      	ldr	r3, [pc, #340]	@ (8001f60 <HAL_RCC_OscConfig+0x470>)
 8001e0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e0c:	4a54      	ldr	r2, [pc, #336]	@ (8001f60 <HAL_RCC_OscConfig+0x470>)
 8001e0e:	f023 0304 	bic.w	r3, r3, #4
 8001e12:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d015      	beq.n	8001e48 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e1c:	f7ff fbd6 	bl	80015cc <HAL_GetTick>
 8001e20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e22:	e00a      	b.n	8001e3a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e24:	f7ff fbd2 	bl	80015cc <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e0cb      	b.n	8001fd2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e3a:	4b49      	ldr	r3, [pc, #292]	@ (8001f60 <HAL_RCC_OscConfig+0x470>)
 8001e3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d0ee      	beq.n	8001e24 <HAL_RCC_OscConfig+0x334>
 8001e46:	e014      	b.n	8001e72 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e48:	f7ff fbc0 	bl	80015cc <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e4e:	e00a      	b.n	8001e66 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e50:	f7ff fbbc 	bl	80015cc <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e0b5      	b.n	8001fd2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e66:	4b3e      	ldr	r3, [pc, #248]	@ (8001f60 <HAL_RCC_OscConfig+0x470>)
 8001e68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d1ee      	bne.n	8001e50 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e72:	7dfb      	ldrb	r3, [r7, #23]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d105      	bne.n	8001e84 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e78:	4b39      	ldr	r3, [pc, #228]	@ (8001f60 <HAL_RCC_OscConfig+0x470>)
 8001e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e7c:	4a38      	ldr	r2, [pc, #224]	@ (8001f60 <HAL_RCC_OscConfig+0x470>)
 8001e7e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e82:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	f000 80a1 	beq.w	8001fd0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e8e:	4b34      	ldr	r3, [pc, #208]	@ (8001f60 <HAL_RCC_OscConfig+0x470>)
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	f003 030c 	and.w	r3, r3, #12
 8001e96:	2b08      	cmp	r3, #8
 8001e98:	d05c      	beq.n	8001f54 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	699b      	ldr	r3, [r3, #24]
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d141      	bne.n	8001f26 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ea2:	4b31      	ldr	r3, [pc, #196]	@ (8001f68 <HAL_RCC_OscConfig+0x478>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea8:	f7ff fb90 	bl	80015cc <HAL_GetTick>
 8001eac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eae:	e008      	b.n	8001ec2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eb0:	f7ff fb8c 	bl	80015cc <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e087      	b.n	8001fd2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ec2:	4b27      	ldr	r3, [pc, #156]	@ (8001f60 <HAL_RCC_OscConfig+0x470>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1f0      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	69da      	ldr	r2, [r3, #28]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6a1b      	ldr	r3, [r3, #32]
 8001ed6:	431a      	orrs	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001edc:	019b      	lsls	r3, r3, #6
 8001ede:	431a      	orrs	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ee4:	085b      	lsrs	r3, r3, #1
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	041b      	lsls	r3, r3, #16
 8001eea:	431a      	orrs	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ef0:	061b      	lsls	r3, r3, #24
 8001ef2:	491b      	ldr	r1, [pc, #108]	@ (8001f60 <HAL_RCC_OscConfig+0x470>)
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ef8:	4b1b      	ldr	r3, [pc, #108]	@ (8001f68 <HAL_RCC_OscConfig+0x478>)
 8001efa:	2201      	movs	r2, #1
 8001efc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efe:	f7ff fb65 	bl	80015cc <HAL_GetTick>
 8001f02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f04:	e008      	b.n	8001f18 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f06:	f7ff fb61 	bl	80015cc <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d901      	bls.n	8001f18 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e05c      	b.n	8001fd2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f18:	4b11      	ldr	r3, [pc, #68]	@ (8001f60 <HAL_RCC_OscConfig+0x470>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d0f0      	beq.n	8001f06 <HAL_RCC_OscConfig+0x416>
 8001f24:	e054      	b.n	8001fd0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f26:	4b10      	ldr	r3, [pc, #64]	@ (8001f68 <HAL_RCC_OscConfig+0x478>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2c:	f7ff fb4e 	bl	80015cc <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f34:	f7ff fb4a 	bl	80015cc <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e045      	b.n	8001fd2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f46:	4b06      	ldr	r3, [pc, #24]	@ (8001f60 <HAL_RCC_OscConfig+0x470>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1f0      	bne.n	8001f34 <HAL_RCC_OscConfig+0x444>
 8001f52:	e03d      	b.n	8001fd0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d107      	bne.n	8001f6c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e038      	b.n	8001fd2 <HAL_RCC_OscConfig+0x4e2>
 8001f60:	40023800 	.word	0x40023800
 8001f64:	40007000 	.word	0x40007000
 8001f68:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f6c:	4b1b      	ldr	r3, [pc, #108]	@ (8001fdc <HAL_RCC_OscConfig+0x4ec>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d028      	beq.n	8001fcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d121      	bne.n	8001fcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d11a      	bne.n	8001fcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001fa2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d111      	bne.n	8001fcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fb2:	085b      	lsrs	r3, r3, #1
 8001fb4:	3b01      	subs	r3, #1
 8001fb6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d107      	bne.n	8001fcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fc6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d001      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e000      	b.n	8001fd2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3718      	adds	r7, #24
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	40023800 	.word	0x40023800

08001fe0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d101      	bne.n	8001ff4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e0cc      	b.n	800218e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ff4:	4b68      	ldr	r3, [pc, #416]	@ (8002198 <HAL_RCC_ClockConfig+0x1b8>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0307 	and.w	r3, r3, #7
 8001ffc:	683a      	ldr	r2, [r7, #0]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d90c      	bls.n	800201c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002002:	4b65      	ldr	r3, [pc, #404]	@ (8002198 <HAL_RCC_ClockConfig+0x1b8>)
 8002004:	683a      	ldr	r2, [r7, #0]
 8002006:	b2d2      	uxtb	r2, r2
 8002008:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800200a:	4b63      	ldr	r3, [pc, #396]	@ (8002198 <HAL_RCC_ClockConfig+0x1b8>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0307 	and.w	r3, r3, #7
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	429a      	cmp	r2, r3
 8002016:	d001      	beq.n	800201c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e0b8      	b.n	800218e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d020      	beq.n	800206a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0304 	and.w	r3, r3, #4
 8002030:	2b00      	cmp	r3, #0
 8002032:	d005      	beq.n	8002040 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002034:	4b59      	ldr	r3, [pc, #356]	@ (800219c <HAL_RCC_ClockConfig+0x1bc>)
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	4a58      	ldr	r2, [pc, #352]	@ (800219c <HAL_RCC_ClockConfig+0x1bc>)
 800203a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800203e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0308 	and.w	r3, r3, #8
 8002048:	2b00      	cmp	r3, #0
 800204a:	d005      	beq.n	8002058 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800204c:	4b53      	ldr	r3, [pc, #332]	@ (800219c <HAL_RCC_ClockConfig+0x1bc>)
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	4a52      	ldr	r2, [pc, #328]	@ (800219c <HAL_RCC_ClockConfig+0x1bc>)
 8002052:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002056:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002058:	4b50      	ldr	r3, [pc, #320]	@ (800219c <HAL_RCC_ClockConfig+0x1bc>)
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	494d      	ldr	r1, [pc, #308]	@ (800219c <HAL_RCC_ClockConfig+0x1bc>)
 8002066:	4313      	orrs	r3, r2
 8002068:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	2b00      	cmp	r3, #0
 8002074:	d044      	beq.n	8002100 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d107      	bne.n	800208e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800207e:	4b47      	ldr	r3, [pc, #284]	@ (800219c <HAL_RCC_ClockConfig+0x1bc>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d119      	bne.n	80020be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e07f      	b.n	800218e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	2b02      	cmp	r3, #2
 8002094:	d003      	beq.n	800209e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800209a:	2b03      	cmp	r3, #3
 800209c:	d107      	bne.n	80020ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800209e:	4b3f      	ldr	r3, [pc, #252]	@ (800219c <HAL_RCC_ClockConfig+0x1bc>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d109      	bne.n	80020be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e06f      	b.n	800218e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ae:	4b3b      	ldr	r3, [pc, #236]	@ (800219c <HAL_RCC_ClockConfig+0x1bc>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e067      	b.n	800218e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020be:	4b37      	ldr	r3, [pc, #220]	@ (800219c <HAL_RCC_ClockConfig+0x1bc>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f023 0203 	bic.w	r2, r3, #3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	4934      	ldr	r1, [pc, #208]	@ (800219c <HAL_RCC_ClockConfig+0x1bc>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020d0:	f7ff fa7c 	bl	80015cc <HAL_GetTick>
 80020d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020d6:	e00a      	b.n	80020ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020d8:	f7ff fa78 	bl	80015cc <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e04f      	b.n	800218e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ee:	4b2b      	ldr	r3, [pc, #172]	@ (800219c <HAL_RCC_ClockConfig+0x1bc>)
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f003 020c 	and.w	r2, r3, #12
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d1eb      	bne.n	80020d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002100:	4b25      	ldr	r3, [pc, #148]	@ (8002198 <HAL_RCC_ClockConfig+0x1b8>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0307 	and.w	r3, r3, #7
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	429a      	cmp	r2, r3
 800210c:	d20c      	bcs.n	8002128 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800210e:	4b22      	ldr	r3, [pc, #136]	@ (8002198 <HAL_RCC_ClockConfig+0x1b8>)
 8002110:	683a      	ldr	r2, [r7, #0]
 8002112:	b2d2      	uxtb	r2, r2
 8002114:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002116:	4b20      	ldr	r3, [pc, #128]	@ (8002198 <HAL_RCC_ClockConfig+0x1b8>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0307 	and.w	r3, r3, #7
 800211e:	683a      	ldr	r2, [r7, #0]
 8002120:	429a      	cmp	r2, r3
 8002122:	d001      	beq.n	8002128 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e032      	b.n	800218e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0304 	and.w	r3, r3, #4
 8002130:	2b00      	cmp	r3, #0
 8002132:	d008      	beq.n	8002146 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002134:	4b19      	ldr	r3, [pc, #100]	@ (800219c <HAL_RCC_ClockConfig+0x1bc>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	4916      	ldr	r1, [pc, #88]	@ (800219c <HAL_RCC_ClockConfig+0x1bc>)
 8002142:	4313      	orrs	r3, r2
 8002144:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0308 	and.w	r3, r3, #8
 800214e:	2b00      	cmp	r3, #0
 8002150:	d009      	beq.n	8002166 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002152:	4b12      	ldr	r3, [pc, #72]	@ (800219c <HAL_RCC_ClockConfig+0x1bc>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	490e      	ldr	r1, [pc, #56]	@ (800219c <HAL_RCC_ClockConfig+0x1bc>)
 8002162:	4313      	orrs	r3, r2
 8002164:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002166:	f000 f889 	bl	800227c <HAL_RCC_GetSysClockFreq>
 800216a:	4602      	mov	r2, r0
 800216c:	4b0b      	ldr	r3, [pc, #44]	@ (800219c <HAL_RCC_ClockConfig+0x1bc>)
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	091b      	lsrs	r3, r3, #4
 8002172:	f003 030f 	and.w	r3, r3, #15
 8002176:	490a      	ldr	r1, [pc, #40]	@ (80021a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002178:	5ccb      	ldrb	r3, [r1, r3]
 800217a:	fa22 f303 	lsr.w	r3, r2, r3
 800217e:	4a09      	ldr	r2, [pc, #36]	@ (80021a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002180:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002182:	4b09      	ldr	r3, [pc, #36]	@ (80021a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f7ff f9f0 	bl	800156c <HAL_InitTick>

  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	40023c00 	.word	0x40023c00
 800219c:	40023800 	.word	0x40023800
 80021a0:	080060bc 	.word	0x080060bc
 80021a4:	20000000 	.word	0x20000000
 80021a8:	20000004 	.word	0x20000004

080021ac <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b08c      	sub	sp, #48	@ 0x30
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d129      	bne.n	8002212 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 80021be:	2300      	movs	r3, #0
 80021c0:	61bb      	str	r3, [r7, #24]
 80021c2:	4b2b      	ldr	r3, [pc, #172]	@ (8002270 <HAL_RCC_MCOConfig+0xc4>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c6:	4a2a      	ldr	r2, [pc, #168]	@ (8002270 <HAL_RCC_MCOConfig+0xc4>)
 80021c8:	f043 0301 	orr.w	r3, r3, #1
 80021cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80021ce:	4b28      	ldr	r3, [pc, #160]	@ (8002270 <HAL_RCC_MCOConfig+0xc4>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	61bb      	str	r3, [r7, #24]
 80021d8:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80021da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80021de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e0:	2302      	movs	r3, #2
 80021e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e4:	2303      	movs	r3, #3
 80021e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e8:	2300      	movs	r3, #0
 80021ea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80021ec:	2300      	movs	r3, #0
 80021ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80021f0:	f107 031c 	add.w	r3, r7, #28
 80021f4:	4619      	mov	r1, r3
 80021f6:	481f      	ldr	r0, [pc, #124]	@ (8002274 <HAL_RCC_MCOConfig+0xc8>)
 80021f8:	f7ff faf6 	bl	80017e8 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80021fc:	4b1c      	ldr	r3, [pc, #112]	@ (8002270 <HAL_RCC_MCOConfig+0xc4>)
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f023 62ec 	bic.w	r2, r3, #123731968	@ 0x7600000
 8002204:	68b9      	ldr	r1, [r7, #8]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	430b      	orrs	r3, r1
 800220a:	4919      	ldr	r1, [pc, #100]	@ (8002270 <HAL_RCC_MCOConfig+0xc4>)
 800220c:	4313      	orrs	r3, r2
 800220e:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8002210:	e029      	b.n	8002266 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8002212:	2300      	movs	r3, #0
 8002214:	617b      	str	r3, [r7, #20]
 8002216:	4b16      	ldr	r3, [pc, #88]	@ (8002270 <HAL_RCC_MCOConfig+0xc4>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221a:	4a15      	ldr	r2, [pc, #84]	@ (8002270 <HAL_RCC_MCOConfig+0xc4>)
 800221c:	f043 0304 	orr.w	r3, r3, #4
 8002220:	6313      	str	r3, [r2, #48]	@ 0x30
 8002222:	4b13      	ldr	r3, [pc, #76]	@ (8002270 <HAL_RCC_MCOConfig+0xc4>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002226:	f003 0304 	and.w	r3, r3, #4
 800222a:	617b      	str	r3, [r7, #20]
 800222c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800222e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002232:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002234:	2302      	movs	r3, #2
 8002236:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002238:	2303      	movs	r3, #3
 800223a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223c:	2300      	movs	r3, #0
 800223e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002240:	2300      	movs	r3, #0
 8002242:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8002244:	f107 031c 	add.w	r3, r7, #28
 8002248:	4619      	mov	r1, r3
 800224a:	480b      	ldr	r0, [pc, #44]	@ (8002278 <HAL_RCC_MCOConfig+0xcc>)
 800224c:	f7ff facc 	bl	80017e8 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8002250:	4b07      	ldr	r3, [pc, #28]	@ (8002270 <HAL_RCC_MCOConfig+0xc4>)
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	00d9      	lsls	r1, r3, #3
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	430b      	orrs	r3, r1
 8002260:	4903      	ldr	r1, [pc, #12]	@ (8002270 <HAL_RCC_MCOConfig+0xc4>)
 8002262:	4313      	orrs	r3, r2
 8002264:	608b      	str	r3, [r1, #8]
}
 8002266:	bf00      	nop
 8002268:	3730      	adds	r7, #48	@ 0x30
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	40023800 	.word	0x40023800
 8002274:	40020000 	.word	0x40020000
 8002278:	40020800 	.word	0x40020800

0800227c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800227c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002280:	b094      	sub	sp, #80	@ 0x50
 8002282:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002284:	2300      	movs	r3, #0
 8002286:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002288:	2300      	movs	r3, #0
 800228a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800228c:	2300      	movs	r3, #0
 800228e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002290:	2300      	movs	r3, #0
 8002292:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002294:	4b79      	ldr	r3, [pc, #484]	@ (800247c <HAL_RCC_GetSysClockFreq+0x200>)
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f003 030c 	and.w	r3, r3, #12
 800229c:	2b08      	cmp	r3, #8
 800229e:	d00d      	beq.n	80022bc <HAL_RCC_GetSysClockFreq+0x40>
 80022a0:	2b08      	cmp	r3, #8
 80022a2:	f200 80e1 	bhi.w	8002468 <HAL_RCC_GetSysClockFreq+0x1ec>
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d002      	beq.n	80022b0 <HAL_RCC_GetSysClockFreq+0x34>
 80022aa:	2b04      	cmp	r3, #4
 80022ac:	d003      	beq.n	80022b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80022ae:	e0db      	b.n	8002468 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022b0:	4b73      	ldr	r3, [pc, #460]	@ (8002480 <HAL_RCC_GetSysClockFreq+0x204>)
 80022b2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80022b4:	e0db      	b.n	800246e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022b6:	4b73      	ldr	r3, [pc, #460]	@ (8002484 <HAL_RCC_GetSysClockFreq+0x208>)
 80022b8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80022ba:	e0d8      	b.n	800246e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022bc:	4b6f      	ldr	r3, [pc, #444]	@ (800247c <HAL_RCC_GetSysClockFreq+0x200>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80022c4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022c6:	4b6d      	ldr	r3, [pc, #436]	@ (800247c <HAL_RCC_GetSysClockFreq+0x200>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d063      	beq.n	800239a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022d2:	4b6a      	ldr	r3, [pc, #424]	@ (800247c <HAL_RCC_GetSysClockFreq+0x200>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	099b      	lsrs	r3, r3, #6
 80022d8:	2200      	movs	r2, #0
 80022da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80022dc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80022de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80022e6:	2300      	movs	r3, #0
 80022e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80022ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80022ee:	4622      	mov	r2, r4
 80022f0:	462b      	mov	r3, r5
 80022f2:	f04f 0000 	mov.w	r0, #0
 80022f6:	f04f 0100 	mov.w	r1, #0
 80022fa:	0159      	lsls	r1, r3, #5
 80022fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002300:	0150      	lsls	r0, r2, #5
 8002302:	4602      	mov	r2, r0
 8002304:	460b      	mov	r3, r1
 8002306:	4621      	mov	r1, r4
 8002308:	1a51      	subs	r1, r2, r1
 800230a:	6139      	str	r1, [r7, #16]
 800230c:	4629      	mov	r1, r5
 800230e:	eb63 0301 	sbc.w	r3, r3, r1
 8002312:	617b      	str	r3, [r7, #20]
 8002314:	f04f 0200 	mov.w	r2, #0
 8002318:	f04f 0300 	mov.w	r3, #0
 800231c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002320:	4659      	mov	r1, fp
 8002322:	018b      	lsls	r3, r1, #6
 8002324:	4651      	mov	r1, sl
 8002326:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800232a:	4651      	mov	r1, sl
 800232c:	018a      	lsls	r2, r1, #6
 800232e:	4651      	mov	r1, sl
 8002330:	ebb2 0801 	subs.w	r8, r2, r1
 8002334:	4659      	mov	r1, fp
 8002336:	eb63 0901 	sbc.w	r9, r3, r1
 800233a:	f04f 0200 	mov.w	r2, #0
 800233e:	f04f 0300 	mov.w	r3, #0
 8002342:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002346:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800234a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800234e:	4690      	mov	r8, r2
 8002350:	4699      	mov	r9, r3
 8002352:	4623      	mov	r3, r4
 8002354:	eb18 0303 	adds.w	r3, r8, r3
 8002358:	60bb      	str	r3, [r7, #8]
 800235a:	462b      	mov	r3, r5
 800235c:	eb49 0303 	adc.w	r3, r9, r3
 8002360:	60fb      	str	r3, [r7, #12]
 8002362:	f04f 0200 	mov.w	r2, #0
 8002366:	f04f 0300 	mov.w	r3, #0
 800236a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800236e:	4629      	mov	r1, r5
 8002370:	024b      	lsls	r3, r1, #9
 8002372:	4621      	mov	r1, r4
 8002374:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002378:	4621      	mov	r1, r4
 800237a:	024a      	lsls	r2, r1, #9
 800237c:	4610      	mov	r0, r2
 800237e:	4619      	mov	r1, r3
 8002380:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002382:	2200      	movs	r2, #0
 8002384:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002386:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002388:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800238c:	f7fe fc14 	bl	8000bb8 <__aeabi_uldivmod>
 8002390:	4602      	mov	r2, r0
 8002392:	460b      	mov	r3, r1
 8002394:	4613      	mov	r3, r2
 8002396:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002398:	e058      	b.n	800244c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800239a:	4b38      	ldr	r3, [pc, #224]	@ (800247c <HAL_RCC_GetSysClockFreq+0x200>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	099b      	lsrs	r3, r3, #6
 80023a0:	2200      	movs	r2, #0
 80023a2:	4618      	mov	r0, r3
 80023a4:	4611      	mov	r1, r2
 80023a6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80023aa:	623b      	str	r3, [r7, #32]
 80023ac:	2300      	movs	r3, #0
 80023ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80023b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80023b4:	4642      	mov	r2, r8
 80023b6:	464b      	mov	r3, r9
 80023b8:	f04f 0000 	mov.w	r0, #0
 80023bc:	f04f 0100 	mov.w	r1, #0
 80023c0:	0159      	lsls	r1, r3, #5
 80023c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023c6:	0150      	lsls	r0, r2, #5
 80023c8:	4602      	mov	r2, r0
 80023ca:	460b      	mov	r3, r1
 80023cc:	4641      	mov	r1, r8
 80023ce:	ebb2 0a01 	subs.w	sl, r2, r1
 80023d2:	4649      	mov	r1, r9
 80023d4:	eb63 0b01 	sbc.w	fp, r3, r1
 80023d8:	f04f 0200 	mov.w	r2, #0
 80023dc:	f04f 0300 	mov.w	r3, #0
 80023e0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80023e4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80023e8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80023ec:	ebb2 040a 	subs.w	r4, r2, sl
 80023f0:	eb63 050b 	sbc.w	r5, r3, fp
 80023f4:	f04f 0200 	mov.w	r2, #0
 80023f8:	f04f 0300 	mov.w	r3, #0
 80023fc:	00eb      	lsls	r3, r5, #3
 80023fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002402:	00e2      	lsls	r2, r4, #3
 8002404:	4614      	mov	r4, r2
 8002406:	461d      	mov	r5, r3
 8002408:	4643      	mov	r3, r8
 800240a:	18e3      	adds	r3, r4, r3
 800240c:	603b      	str	r3, [r7, #0]
 800240e:	464b      	mov	r3, r9
 8002410:	eb45 0303 	adc.w	r3, r5, r3
 8002414:	607b      	str	r3, [r7, #4]
 8002416:	f04f 0200 	mov.w	r2, #0
 800241a:	f04f 0300 	mov.w	r3, #0
 800241e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002422:	4629      	mov	r1, r5
 8002424:	028b      	lsls	r3, r1, #10
 8002426:	4621      	mov	r1, r4
 8002428:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800242c:	4621      	mov	r1, r4
 800242e:	028a      	lsls	r2, r1, #10
 8002430:	4610      	mov	r0, r2
 8002432:	4619      	mov	r1, r3
 8002434:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002436:	2200      	movs	r2, #0
 8002438:	61bb      	str	r3, [r7, #24]
 800243a:	61fa      	str	r2, [r7, #28]
 800243c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002440:	f7fe fbba 	bl	8000bb8 <__aeabi_uldivmod>
 8002444:	4602      	mov	r2, r0
 8002446:	460b      	mov	r3, r1
 8002448:	4613      	mov	r3, r2
 800244a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800244c:	4b0b      	ldr	r3, [pc, #44]	@ (800247c <HAL_RCC_GetSysClockFreq+0x200>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	0c1b      	lsrs	r3, r3, #16
 8002452:	f003 0303 	and.w	r3, r3, #3
 8002456:	3301      	adds	r3, #1
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800245c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800245e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002460:	fbb2 f3f3 	udiv	r3, r2, r3
 8002464:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002466:	e002      	b.n	800246e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002468:	4b05      	ldr	r3, [pc, #20]	@ (8002480 <HAL_RCC_GetSysClockFreq+0x204>)
 800246a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800246c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800246e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002470:	4618      	mov	r0, r3
 8002472:	3750      	adds	r7, #80	@ 0x50
 8002474:	46bd      	mov	sp, r7
 8002476:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800247a:	bf00      	nop
 800247c:	40023800 	.word	0x40023800
 8002480:	00f42400 	.word	0x00f42400
 8002484:	007a1200 	.word	0x007a1200

08002488 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800248c:	4b03      	ldr	r3, [pc, #12]	@ (800249c <HAL_RCC_GetHCLKFreq+0x14>)
 800248e:	681b      	ldr	r3, [r3, #0]
}
 8002490:	4618      	mov	r0, r3
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	20000000 	.word	0x20000000

080024a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80024a4:	f7ff fff0 	bl	8002488 <HAL_RCC_GetHCLKFreq>
 80024a8:	4602      	mov	r2, r0
 80024aa:	4b05      	ldr	r3, [pc, #20]	@ (80024c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	0a9b      	lsrs	r3, r3, #10
 80024b0:	f003 0307 	and.w	r3, r3, #7
 80024b4:	4903      	ldr	r1, [pc, #12]	@ (80024c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024b6:	5ccb      	ldrb	r3, [r1, r3]
 80024b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024bc:	4618      	mov	r0, r3
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	40023800 	.word	0x40023800
 80024c4:	080060cc 	.word	0x080060cc

080024c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80024cc:	f7ff ffdc 	bl	8002488 <HAL_RCC_GetHCLKFreq>
 80024d0:	4602      	mov	r2, r0
 80024d2:	4b05      	ldr	r3, [pc, #20]	@ (80024e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	0b5b      	lsrs	r3, r3, #13
 80024d8:	f003 0307 	and.w	r3, r3, #7
 80024dc:	4903      	ldr	r1, [pc, #12]	@ (80024ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80024de:	5ccb      	ldrb	r3, [r1, r3]
 80024e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	40023800 	.word	0x40023800
 80024ec:	080060cc 	.word	0x080060cc

080024f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e041      	b.n	8002586 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b00      	cmp	r3, #0
 800250c:	d106      	bne.n	800251c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f000 f839 	bl	800258e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2202      	movs	r2, #2
 8002520:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	3304      	adds	r3, #4
 800252c:	4619      	mov	r1, r3
 800252e:	4610      	mov	r0, r2
 8002530:	f000 faaa 	bl	8002a88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800258e:	b480      	push	{r7}
 8002590:	b083      	sub	sp, #12
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002596:	bf00      	nop
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
	...

080025a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d001      	beq.n	80025bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e044      	b.n	8002646 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2202      	movs	r2, #2
 80025c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68da      	ldr	r2, [r3, #12]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f042 0201 	orr.w	r2, r2, #1
 80025d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a1e      	ldr	r2, [pc, #120]	@ (8002654 <HAL_TIM_Base_Start_IT+0xb0>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d018      	beq.n	8002610 <HAL_TIM_Base_Start_IT+0x6c>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025e6:	d013      	beq.n	8002610 <HAL_TIM_Base_Start_IT+0x6c>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a1a      	ldr	r2, [pc, #104]	@ (8002658 <HAL_TIM_Base_Start_IT+0xb4>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d00e      	beq.n	8002610 <HAL_TIM_Base_Start_IT+0x6c>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a19      	ldr	r2, [pc, #100]	@ (800265c <HAL_TIM_Base_Start_IT+0xb8>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d009      	beq.n	8002610 <HAL_TIM_Base_Start_IT+0x6c>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a17      	ldr	r2, [pc, #92]	@ (8002660 <HAL_TIM_Base_Start_IT+0xbc>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d004      	beq.n	8002610 <HAL_TIM_Base_Start_IT+0x6c>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a16      	ldr	r2, [pc, #88]	@ (8002664 <HAL_TIM_Base_Start_IT+0xc0>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d111      	bne.n	8002634 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f003 0307 	and.w	r3, r3, #7
 800261a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2b06      	cmp	r3, #6
 8002620:	d010      	beq.n	8002644 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f042 0201 	orr.w	r2, r2, #1
 8002630:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002632:	e007      	b.n	8002644 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f042 0201 	orr.w	r2, r2, #1
 8002642:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002644:	2300      	movs	r3, #0
}
 8002646:	4618      	mov	r0, r3
 8002648:	3714      	adds	r7, #20
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	40010000 	.word	0x40010000
 8002658:	40000400 	.word	0x40000400
 800265c:	40000800 	.word	0x40000800
 8002660:	40000c00 	.word	0x40000c00
 8002664:	40014000 	.word	0x40014000

08002668 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e041      	b.n	80026fe <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2b00      	cmp	r3, #0
 8002684:	d106      	bne.n	8002694 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 f839 	bl	8002706 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2202      	movs	r2, #2
 8002698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	3304      	adds	r3, #4
 80026a4:	4619      	mov	r1, r3
 80026a6:	4610      	mov	r0, r2
 80026a8:	f000 f9ee 	bl	8002a88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002706:	b480      	push	{r7}
 8002708:	b083      	sub	sp, #12
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
	...

0800271c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002726:	2300      	movs	r3, #0
 8002728:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d104      	bne.n	800273a <HAL_TIM_IC_Start_IT+0x1e>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002736:	b2db      	uxtb	r3, r3
 8002738:	e013      	b.n	8002762 <HAL_TIM_IC_Start_IT+0x46>
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	2b04      	cmp	r3, #4
 800273e:	d104      	bne.n	800274a <HAL_TIM_IC_Start_IT+0x2e>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002746:	b2db      	uxtb	r3, r3
 8002748:	e00b      	b.n	8002762 <HAL_TIM_IC_Start_IT+0x46>
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	2b08      	cmp	r3, #8
 800274e:	d104      	bne.n	800275a <HAL_TIM_IC_Start_IT+0x3e>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002756:	b2db      	uxtb	r3, r3
 8002758:	e003      	b.n	8002762 <HAL_TIM_IC_Start_IT+0x46>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002760:	b2db      	uxtb	r3, r3
 8002762:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d104      	bne.n	8002774 <HAL_TIM_IC_Start_IT+0x58>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002770:	b2db      	uxtb	r3, r3
 8002772:	e013      	b.n	800279c <HAL_TIM_IC_Start_IT+0x80>
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	2b04      	cmp	r3, #4
 8002778:	d104      	bne.n	8002784 <HAL_TIM_IC_Start_IT+0x68>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002780:	b2db      	uxtb	r3, r3
 8002782:	e00b      	b.n	800279c <HAL_TIM_IC_Start_IT+0x80>
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	2b08      	cmp	r3, #8
 8002788:	d104      	bne.n	8002794 <HAL_TIM_IC_Start_IT+0x78>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002790:	b2db      	uxtb	r3, r3
 8002792:	e003      	b.n	800279c <HAL_TIM_IC_Start_IT+0x80>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800279a:	b2db      	uxtb	r3, r3
 800279c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800279e:	7bbb      	ldrb	r3, [r7, #14]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d102      	bne.n	80027aa <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80027a4:	7b7b      	ldrb	r3, [r7, #13]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d001      	beq.n	80027ae <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e0c2      	b.n	8002934 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d104      	bne.n	80027be <HAL_TIM_IC_Start_IT+0xa2>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2202      	movs	r2, #2
 80027b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80027bc:	e013      	b.n	80027e6 <HAL_TIM_IC_Start_IT+0xca>
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	2b04      	cmp	r3, #4
 80027c2:	d104      	bne.n	80027ce <HAL_TIM_IC_Start_IT+0xb2>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2202      	movs	r2, #2
 80027c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80027cc:	e00b      	b.n	80027e6 <HAL_TIM_IC_Start_IT+0xca>
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	2b08      	cmp	r3, #8
 80027d2:	d104      	bne.n	80027de <HAL_TIM_IC_Start_IT+0xc2>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2202      	movs	r2, #2
 80027d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80027dc:	e003      	b.n	80027e6 <HAL_TIM_IC_Start_IT+0xca>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2202      	movs	r2, #2
 80027e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d104      	bne.n	80027f6 <HAL_TIM_IC_Start_IT+0xda>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2202      	movs	r2, #2
 80027f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80027f4:	e013      	b.n	800281e <HAL_TIM_IC_Start_IT+0x102>
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	2b04      	cmp	r3, #4
 80027fa:	d104      	bne.n	8002806 <HAL_TIM_IC_Start_IT+0xea>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2202      	movs	r2, #2
 8002800:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002804:	e00b      	b.n	800281e <HAL_TIM_IC_Start_IT+0x102>
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	2b08      	cmp	r3, #8
 800280a:	d104      	bne.n	8002816 <HAL_TIM_IC_Start_IT+0xfa>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2202      	movs	r2, #2
 8002810:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002814:	e003      	b.n	800281e <HAL_TIM_IC_Start_IT+0x102>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2202      	movs	r2, #2
 800281a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	2b0c      	cmp	r3, #12
 8002822:	d841      	bhi.n	80028a8 <HAL_TIM_IC_Start_IT+0x18c>
 8002824:	a201      	add	r2, pc, #4	@ (adr r2, 800282c <HAL_TIM_IC_Start_IT+0x110>)
 8002826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800282a:	bf00      	nop
 800282c:	08002861 	.word	0x08002861
 8002830:	080028a9 	.word	0x080028a9
 8002834:	080028a9 	.word	0x080028a9
 8002838:	080028a9 	.word	0x080028a9
 800283c:	08002873 	.word	0x08002873
 8002840:	080028a9 	.word	0x080028a9
 8002844:	080028a9 	.word	0x080028a9
 8002848:	080028a9 	.word	0x080028a9
 800284c:	08002885 	.word	0x08002885
 8002850:	080028a9 	.word	0x080028a9
 8002854:	080028a9 	.word	0x080028a9
 8002858:	080028a9 	.word	0x080028a9
 800285c:	08002897 	.word	0x08002897
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68da      	ldr	r2, [r3, #12]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f042 0202 	orr.w	r2, r2, #2
 800286e:	60da      	str	r2, [r3, #12]
      break;
 8002870:	e01d      	b.n	80028ae <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68da      	ldr	r2, [r3, #12]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f042 0204 	orr.w	r2, r2, #4
 8002880:	60da      	str	r2, [r3, #12]
      break;
 8002882:	e014      	b.n	80028ae <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	68da      	ldr	r2, [r3, #12]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f042 0208 	orr.w	r2, r2, #8
 8002892:	60da      	str	r2, [r3, #12]
      break;
 8002894:	e00b      	b.n	80028ae <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	68da      	ldr	r2, [r3, #12]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f042 0210 	orr.w	r2, r2, #16
 80028a4:	60da      	str	r2, [r3, #12]
      break;
 80028a6:	e002      	b.n	80028ae <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	73fb      	strb	r3, [r7, #15]
      break;
 80028ac:	bf00      	nop
  }

  if (status == HAL_OK)
 80028ae:	7bfb      	ldrb	r3, [r7, #15]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d13e      	bne.n	8002932 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2201      	movs	r2, #1
 80028ba:	6839      	ldr	r1, [r7, #0]
 80028bc:	4618      	mov	r0, r3
 80028be:	f000 fa87 	bl	8002dd0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a1d      	ldr	r2, [pc, #116]	@ (800293c <HAL_TIM_IC_Start_IT+0x220>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d018      	beq.n	80028fe <HAL_TIM_IC_Start_IT+0x1e2>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028d4:	d013      	beq.n	80028fe <HAL_TIM_IC_Start_IT+0x1e2>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a19      	ldr	r2, [pc, #100]	@ (8002940 <HAL_TIM_IC_Start_IT+0x224>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d00e      	beq.n	80028fe <HAL_TIM_IC_Start_IT+0x1e2>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a17      	ldr	r2, [pc, #92]	@ (8002944 <HAL_TIM_IC_Start_IT+0x228>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d009      	beq.n	80028fe <HAL_TIM_IC_Start_IT+0x1e2>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a16      	ldr	r2, [pc, #88]	@ (8002948 <HAL_TIM_IC_Start_IT+0x22c>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d004      	beq.n	80028fe <HAL_TIM_IC_Start_IT+0x1e2>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a14      	ldr	r2, [pc, #80]	@ (800294c <HAL_TIM_IC_Start_IT+0x230>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d111      	bne.n	8002922 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f003 0307 	and.w	r3, r3, #7
 8002908:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	2b06      	cmp	r3, #6
 800290e:	d010      	beq.n	8002932 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f042 0201 	orr.w	r2, r2, #1
 800291e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002920:	e007      	b.n	8002932 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f042 0201 	orr.w	r2, r2, #1
 8002930:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002932:	7bfb      	ldrb	r3, [r7, #15]
}
 8002934:	4618      	mov	r0, r3
 8002936:	3710      	adds	r7, #16
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	40010000 	.word	0x40010000
 8002940:	40000400 	.word	0x40000400
 8002944:	40000800 	.word	0x40000800
 8002948:	40000c00 	.word	0x40000c00
 800294c:	40014000 	.word	0x40014000

08002950 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800295c:	2300      	movs	r3, #0
 800295e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002966:	2b01      	cmp	r3, #1
 8002968:	d101      	bne.n	800296e <HAL_TIM_IC_ConfigChannel+0x1e>
 800296a:	2302      	movs	r3, #2
 800296c:	e088      	b.n	8002a80 <HAL_TIM_IC_ConfigChannel+0x130>
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2201      	movs	r2, #1
 8002972:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d11b      	bne.n	80029b4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800298c:	f000 f902 	bl	8002b94 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	699a      	ldr	r2, [r3, #24]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f022 020c 	bic.w	r2, r2, #12
 800299e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	6999      	ldr	r1, [r3, #24]
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	689a      	ldr	r2, [r3, #8]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	430a      	orrs	r2, r1
 80029b0:	619a      	str	r2, [r3, #24]
 80029b2:	e060      	b.n	8002a76 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2b04      	cmp	r3, #4
 80029b8:	d11c      	bne.n	80029f4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80029ca:	f000 f94b 	bl	8002c64 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	699a      	ldr	r2, [r3, #24]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80029dc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	6999      	ldr	r1, [r3, #24]
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	021a      	lsls	r2, r3, #8
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	430a      	orrs	r2, r1
 80029f0:	619a      	str	r2, [r3, #24]
 80029f2:	e040      	b.n	8002a76 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2b08      	cmp	r3, #8
 80029f8:	d11b      	bne.n	8002a32 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8002a0a:	f000 f968 	bl	8002cde <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	69da      	ldr	r2, [r3, #28]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f022 020c 	bic.w	r2, r2, #12
 8002a1c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	69d9      	ldr	r1, [r3, #28]
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	689a      	ldr	r2, [r3, #8]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	61da      	str	r2, [r3, #28]
 8002a30:	e021      	b.n	8002a76 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2b0c      	cmp	r3, #12
 8002a36:	d11c      	bne.n	8002a72 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002a48:	f000 f985 	bl	8002d56 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	69da      	ldr	r2, [r3, #28]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002a5a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	69d9      	ldr	r1, [r3, #28]
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	021a      	lsls	r2, r3, #8
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	61da      	str	r2, [r3, #28]
 8002a70:	e001      	b.n	8002a76 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002a7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3718      	adds	r7, #24
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	4a37      	ldr	r2, [pc, #220]	@ (8002b78 <TIM_Base_SetConfig+0xf0>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d00f      	beq.n	8002ac0 <TIM_Base_SetConfig+0x38>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002aa6:	d00b      	beq.n	8002ac0 <TIM_Base_SetConfig+0x38>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4a34      	ldr	r2, [pc, #208]	@ (8002b7c <TIM_Base_SetConfig+0xf4>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d007      	beq.n	8002ac0 <TIM_Base_SetConfig+0x38>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4a33      	ldr	r2, [pc, #204]	@ (8002b80 <TIM_Base_SetConfig+0xf8>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d003      	beq.n	8002ac0 <TIM_Base_SetConfig+0x38>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	4a32      	ldr	r2, [pc, #200]	@ (8002b84 <TIM_Base_SetConfig+0xfc>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d108      	bne.n	8002ad2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ac6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	68fa      	ldr	r2, [r7, #12]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a28      	ldr	r2, [pc, #160]	@ (8002b78 <TIM_Base_SetConfig+0xf0>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d01b      	beq.n	8002b12 <TIM_Base_SetConfig+0x8a>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ae0:	d017      	beq.n	8002b12 <TIM_Base_SetConfig+0x8a>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a25      	ldr	r2, [pc, #148]	@ (8002b7c <TIM_Base_SetConfig+0xf4>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d013      	beq.n	8002b12 <TIM_Base_SetConfig+0x8a>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a24      	ldr	r2, [pc, #144]	@ (8002b80 <TIM_Base_SetConfig+0xf8>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d00f      	beq.n	8002b12 <TIM_Base_SetConfig+0x8a>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a23      	ldr	r2, [pc, #140]	@ (8002b84 <TIM_Base_SetConfig+0xfc>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d00b      	beq.n	8002b12 <TIM_Base_SetConfig+0x8a>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a22      	ldr	r2, [pc, #136]	@ (8002b88 <TIM_Base_SetConfig+0x100>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d007      	beq.n	8002b12 <TIM_Base_SetConfig+0x8a>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a21      	ldr	r2, [pc, #132]	@ (8002b8c <TIM_Base_SetConfig+0x104>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d003      	beq.n	8002b12 <TIM_Base_SetConfig+0x8a>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a20      	ldr	r2, [pc, #128]	@ (8002b90 <TIM_Base_SetConfig+0x108>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d108      	bne.n	8002b24 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	689a      	ldr	r2, [r3, #8]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a0c      	ldr	r2, [pc, #48]	@ (8002b78 <TIM_Base_SetConfig+0xf0>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d103      	bne.n	8002b52 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	691a      	ldr	r2, [r3, #16]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f043 0204 	orr.w	r2, r3, #4
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2201      	movs	r2, #1
 8002b62:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	601a      	str	r2, [r3, #0]
}
 8002b6a:	bf00      	nop
 8002b6c:	3714      	adds	r7, #20
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	40010000 	.word	0x40010000
 8002b7c:	40000400 	.word	0x40000400
 8002b80:	40000800 	.word	0x40000800
 8002b84:	40000c00 	.word	0x40000c00
 8002b88:	40014000 	.word	0x40014000
 8002b8c:	40014400 	.word	0x40014400
 8002b90:	40014800 	.word	0x40014800

08002b94 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b087      	sub	sp, #28
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	607a      	str	r2, [r7, #4]
 8002ba0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6a1b      	ldr	r3, [r3, #32]
 8002ba6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6a1b      	ldr	r3, [r3, #32]
 8002bac:	f023 0201 	bic.w	r2, r3, #1
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	4a24      	ldr	r2, [pc, #144]	@ (8002c50 <TIM_TI1_SetConfig+0xbc>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d013      	beq.n	8002bea <TIM_TI1_SetConfig+0x56>
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bc8:	d00f      	beq.n	8002bea <TIM_TI1_SetConfig+0x56>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	4a21      	ldr	r2, [pc, #132]	@ (8002c54 <TIM_TI1_SetConfig+0xc0>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d00b      	beq.n	8002bea <TIM_TI1_SetConfig+0x56>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	4a20      	ldr	r2, [pc, #128]	@ (8002c58 <TIM_TI1_SetConfig+0xc4>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d007      	beq.n	8002bea <TIM_TI1_SetConfig+0x56>
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	4a1f      	ldr	r2, [pc, #124]	@ (8002c5c <TIM_TI1_SetConfig+0xc8>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d003      	beq.n	8002bea <TIM_TI1_SetConfig+0x56>
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	4a1e      	ldr	r2, [pc, #120]	@ (8002c60 <TIM_TI1_SetConfig+0xcc>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d101      	bne.n	8002bee <TIM_TI1_SetConfig+0x5a>
 8002bea:	2301      	movs	r3, #1
 8002bec:	e000      	b.n	8002bf0 <TIM_TI1_SetConfig+0x5c>
 8002bee:	2300      	movs	r3, #0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d008      	beq.n	8002c06 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	f023 0303 	bic.w	r3, r3, #3
 8002bfa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002bfc:	697a      	ldr	r2, [r7, #20]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	617b      	str	r3, [r7, #20]
 8002c04:	e003      	b.n	8002c0e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	f043 0301 	orr.w	r3, r3, #1
 8002c0c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002c14:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	011b      	lsls	r3, r3, #4
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	697a      	ldr	r2, [r7, #20]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	f023 030a 	bic.w	r3, r3, #10
 8002c28:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	f003 030a 	and.w	r3, r3, #10
 8002c30:	693a      	ldr	r2, [r7, #16]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	697a      	ldr	r2, [r7, #20]
 8002c3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	693a      	ldr	r2, [r7, #16]
 8002c40:	621a      	str	r2, [r3, #32]
}
 8002c42:	bf00      	nop
 8002c44:	371c      	adds	r7, #28
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	40010000 	.word	0x40010000
 8002c54:	40000400 	.word	0x40000400
 8002c58:	40000800 	.word	0x40000800
 8002c5c:	40000c00 	.word	0x40000c00
 8002c60:	40014000 	.word	0x40014000

08002c64 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b087      	sub	sp, #28
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	607a      	str	r2, [r7, #4]
 8002c70:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6a1b      	ldr	r3, [r3, #32]
 8002c76:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6a1b      	ldr	r3, [r3, #32]
 8002c7c:	f023 0210 	bic.w	r2, r3, #16
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	021b      	lsls	r3, r3, #8
 8002c96:	693a      	ldr	r2, [r7, #16]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002ca2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	031b      	lsls	r3, r3, #12
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002cb6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	011b      	lsls	r3, r3, #4
 8002cbc:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8002cc0:	697a      	ldr	r2, [r7, #20]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	693a      	ldr	r2, [r7, #16]
 8002cca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	697a      	ldr	r2, [r7, #20]
 8002cd0:	621a      	str	r2, [r3, #32]
}
 8002cd2:	bf00      	nop
 8002cd4:	371c      	adds	r7, #28
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr

08002cde <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002cde:	b480      	push	{r7}
 8002ce0:	b087      	sub	sp, #28
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	60f8      	str	r0, [r7, #12]
 8002ce6:	60b9      	str	r1, [r7, #8]
 8002ce8:	607a      	str	r2, [r7, #4]
 8002cea:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6a1b      	ldr	r3, [r3, #32]
 8002cf0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6a1b      	ldr	r3, [r3, #32]
 8002cf6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	69db      	ldr	r3, [r3, #28]
 8002d02:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	f023 0303 	bic.w	r3, r3, #3
 8002d0a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8002d0c:	693a      	ldr	r2, [r7, #16]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d1a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	011b      	lsls	r3, r3, #4
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	693a      	ldr	r2, [r7, #16]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8002d2e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	021b      	lsls	r3, r3, #8
 8002d34:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8002d38:	697a      	ldr	r2, [r7, #20]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	693a      	ldr	r2, [r7, #16]
 8002d42:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	697a      	ldr	r2, [r7, #20]
 8002d48:	621a      	str	r2, [r3, #32]
}
 8002d4a:	bf00      	nop
 8002d4c:	371c      	adds	r7, #28
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr

08002d56 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002d56:	b480      	push	{r7}
 8002d58:	b087      	sub	sp, #28
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	60f8      	str	r0, [r7, #12]
 8002d5e:	60b9      	str	r1, [r7, #8]
 8002d60:	607a      	str	r2, [r7, #4]
 8002d62:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6a1b      	ldr	r3, [r3, #32]
 8002d68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6a1b      	ldr	r3, [r3, #32]
 8002d6e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	69db      	ldr	r3, [r3, #28]
 8002d7a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d82:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	021b      	lsls	r3, r3, #8
 8002d88:	693a      	ldr	r2, [r7, #16]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002d94:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	031b      	lsls	r3, r3, #12
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	693a      	ldr	r2, [r7, #16]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8002da8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	031b      	lsls	r3, r3, #12
 8002dae:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8002db2:	697a      	ldr	r2, [r7, #20]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	693a      	ldr	r2, [r7, #16]
 8002dbc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	697a      	ldr	r2, [r7, #20]
 8002dc2:	621a      	str	r2, [r3, #32]
}
 8002dc4:	bf00      	nop
 8002dc6:	371c      	adds	r7, #28
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b087      	sub	sp, #28
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	f003 031f 	and.w	r3, r3, #31
 8002de2:	2201      	movs	r2, #1
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
 8002de8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6a1a      	ldr	r2, [r3, #32]
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	43db      	mvns	r3, r3
 8002df2:	401a      	ands	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6a1a      	ldr	r2, [r3, #32]
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	f003 031f 	and.w	r3, r3, #31
 8002e02:	6879      	ldr	r1, [r7, #4]
 8002e04:	fa01 f303 	lsl.w	r3, r1, r3
 8002e08:	431a      	orrs	r2, r3
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	621a      	str	r2, [r3, #32]
}
 8002e0e:	bf00      	nop
 8002e10:	371c      	adds	r7, #28
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr

08002e1a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b082      	sub	sp, #8
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d101      	bne.n	8002e2c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e03f      	b.n	8002eac <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d106      	bne.n	8002e46 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f7fe fa2f 	bl	80012a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2224      	movs	r2, #36	@ 0x24
 8002e4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68da      	ldr	r2, [r3, #12]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002e5c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 f828 	bl	8002eb4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	691a      	ldr	r2, [r3, #16]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e72:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	695a      	ldr	r2, [r3, #20]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e82:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68da      	ldr	r2, [r3, #12]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002e92:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2220      	movs	r2, #32
 8002e9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2220      	movs	r2, #32
 8002ea6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002eaa:	2300      	movs	r3, #0
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3708      	adds	r7, #8
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002eb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002eb8:	b0c0      	sub	sp, #256	@ 0x100
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ed0:	68d9      	ldr	r1, [r3, #12]
 8002ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	ea40 0301 	orr.w	r3, r0, r1
 8002edc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002ede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ee2:	689a      	ldr	r2, [r3, #8]
 8002ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	431a      	orrs	r2, r3
 8002eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ef8:	69db      	ldr	r3, [r3, #28]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002f0c:	f021 010c 	bic.w	r1, r1, #12
 8002f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002f1a:	430b      	orrs	r3, r1
 8002f1c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f2e:	6999      	ldr	r1, [r3, #24]
 8002f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	ea40 0301 	orr.w	r3, r0, r1
 8002f3a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	4b8f      	ldr	r3, [pc, #572]	@ (8003180 <UART_SetConfig+0x2cc>)
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d005      	beq.n	8002f54 <UART_SetConfig+0xa0>
 8002f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	4b8d      	ldr	r3, [pc, #564]	@ (8003184 <UART_SetConfig+0x2d0>)
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d104      	bne.n	8002f5e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f54:	f7ff fab8 	bl	80024c8 <HAL_RCC_GetPCLK2Freq>
 8002f58:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002f5c:	e003      	b.n	8002f66 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f5e:	f7ff fa9f 	bl	80024a0 <HAL_RCC_GetPCLK1Freq>
 8002f62:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f6a:	69db      	ldr	r3, [r3, #28]
 8002f6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f70:	f040 810c 	bne.w	800318c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002f7e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002f82:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002f86:	4622      	mov	r2, r4
 8002f88:	462b      	mov	r3, r5
 8002f8a:	1891      	adds	r1, r2, r2
 8002f8c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002f8e:	415b      	adcs	r3, r3
 8002f90:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002f92:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002f96:	4621      	mov	r1, r4
 8002f98:	eb12 0801 	adds.w	r8, r2, r1
 8002f9c:	4629      	mov	r1, r5
 8002f9e:	eb43 0901 	adc.w	r9, r3, r1
 8002fa2:	f04f 0200 	mov.w	r2, #0
 8002fa6:	f04f 0300 	mov.w	r3, #0
 8002faa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fb6:	4690      	mov	r8, r2
 8002fb8:	4699      	mov	r9, r3
 8002fba:	4623      	mov	r3, r4
 8002fbc:	eb18 0303 	adds.w	r3, r8, r3
 8002fc0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002fc4:	462b      	mov	r3, r5
 8002fc6:	eb49 0303 	adc.w	r3, r9, r3
 8002fca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002fda:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002fde:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002fe2:	460b      	mov	r3, r1
 8002fe4:	18db      	adds	r3, r3, r3
 8002fe6:	653b      	str	r3, [r7, #80]	@ 0x50
 8002fe8:	4613      	mov	r3, r2
 8002fea:	eb42 0303 	adc.w	r3, r2, r3
 8002fee:	657b      	str	r3, [r7, #84]	@ 0x54
 8002ff0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002ff4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002ff8:	f7fd fdde 	bl	8000bb8 <__aeabi_uldivmod>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	460b      	mov	r3, r1
 8003000:	4b61      	ldr	r3, [pc, #388]	@ (8003188 <UART_SetConfig+0x2d4>)
 8003002:	fba3 2302 	umull	r2, r3, r3, r2
 8003006:	095b      	lsrs	r3, r3, #5
 8003008:	011c      	lsls	r4, r3, #4
 800300a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800300e:	2200      	movs	r2, #0
 8003010:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003014:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003018:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800301c:	4642      	mov	r2, r8
 800301e:	464b      	mov	r3, r9
 8003020:	1891      	adds	r1, r2, r2
 8003022:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003024:	415b      	adcs	r3, r3
 8003026:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003028:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800302c:	4641      	mov	r1, r8
 800302e:	eb12 0a01 	adds.w	sl, r2, r1
 8003032:	4649      	mov	r1, r9
 8003034:	eb43 0b01 	adc.w	fp, r3, r1
 8003038:	f04f 0200 	mov.w	r2, #0
 800303c:	f04f 0300 	mov.w	r3, #0
 8003040:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003044:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003048:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800304c:	4692      	mov	sl, r2
 800304e:	469b      	mov	fp, r3
 8003050:	4643      	mov	r3, r8
 8003052:	eb1a 0303 	adds.w	r3, sl, r3
 8003056:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800305a:	464b      	mov	r3, r9
 800305c:	eb4b 0303 	adc.w	r3, fp, r3
 8003060:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003070:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003074:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003078:	460b      	mov	r3, r1
 800307a:	18db      	adds	r3, r3, r3
 800307c:	643b      	str	r3, [r7, #64]	@ 0x40
 800307e:	4613      	mov	r3, r2
 8003080:	eb42 0303 	adc.w	r3, r2, r3
 8003084:	647b      	str	r3, [r7, #68]	@ 0x44
 8003086:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800308a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800308e:	f7fd fd93 	bl	8000bb8 <__aeabi_uldivmod>
 8003092:	4602      	mov	r2, r0
 8003094:	460b      	mov	r3, r1
 8003096:	4611      	mov	r1, r2
 8003098:	4b3b      	ldr	r3, [pc, #236]	@ (8003188 <UART_SetConfig+0x2d4>)
 800309a:	fba3 2301 	umull	r2, r3, r3, r1
 800309e:	095b      	lsrs	r3, r3, #5
 80030a0:	2264      	movs	r2, #100	@ 0x64
 80030a2:	fb02 f303 	mul.w	r3, r2, r3
 80030a6:	1acb      	subs	r3, r1, r3
 80030a8:	00db      	lsls	r3, r3, #3
 80030aa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80030ae:	4b36      	ldr	r3, [pc, #216]	@ (8003188 <UART_SetConfig+0x2d4>)
 80030b0:	fba3 2302 	umull	r2, r3, r3, r2
 80030b4:	095b      	lsrs	r3, r3, #5
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80030bc:	441c      	add	r4, r3
 80030be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030c2:	2200      	movs	r2, #0
 80030c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80030c8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80030cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80030d0:	4642      	mov	r2, r8
 80030d2:	464b      	mov	r3, r9
 80030d4:	1891      	adds	r1, r2, r2
 80030d6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80030d8:	415b      	adcs	r3, r3
 80030da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80030dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80030e0:	4641      	mov	r1, r8
 80030e2:	1851      	adds	r1, r2, r1
 80030e4:	6339      	str	r1, [r7, #48]	@ 0x30
 80030e6:	4649      	mov	r1, r9
 80030e8:	414b      	adcs	r3, r1
 80030ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80030ec:	f04f 0200 	mov.w	r2, #0
 80030f0:	f04f 0300 	mov.w	r3, #0
 80030f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80030f8:	4659      	mov	r1, fp
 80030fa:	00cb      	lsls	r3, r1, #3
 80030fc:	4651      	mov	r1, sl
 80030fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003102:	4651      	mov	r1, sl
 8003104:	00ca      	lsls	r2, r1, #3
 8003106:	4610      	mov	r0, r2
 8003108:	4619      	mov	r1, r3
 800310a:	4603      	mov	r3, r0
 800310c:	4642      	mov	r2, r8
 800310e:	189b      	adds	r3, r3, r2
 8003110:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003114:	464b      	mov	r3, r9
 8003116:	460a      	mov	r2, r1
 8003118:	eb42 0303 	adc.w	r3, r2, r3
 800311c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800312c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003130:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003134:	460b      	mov	r3, r1
 8003136:	18db      	adds	r3, r3, r3
 8003138:	62bb      	str	r3, [r7, #40]	@ 0x28
 800313a:	4613      	mov	r3, r2
 800313c:	eb42 0303 	adc.w	r3, r2, r3
 8003140:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003142:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003146:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800314a:	f7fd fd35 	bl	8000bb8 <__aeabi_uldivmod>
 800314e:	4602      	mov	r2, r0
 8003150:	460b      	mov	r3, r1
 8003152:	4b0d      	ldr	r3, [pc, #52]	@ (8003188 <UART_SetConfig+0x2d4>)
 8003154:	fba3 1302 	umull	r1, r3, r3, r2
 8003158:	095b      	lsrs	r3, r3, #5
 800315a:	2164      	movs	r1, #100	@ 0x64
 800315c:	fb01 f303 	mul.w	r3, r1, r3
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	00db      	lsls	r3, r3, #3
 8003164:	3332      	adds	r3, #50	@ 0x32
 8003166:	4a08      	ldr	r2, [pc, #32]	@ (8003188 <UART_SetConfig+0x2d4>)
 8003168:	fba2 2303 	umull	r2, r3, r2, r3
 800316c:	095b      	lsrs	r3, r3, #5
 800316e:	f003 0207 	and.w	r2, r3, #7
 8003172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4422      	add	r2, r4
 800317a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800317c:	e106      	b.n	800338c <UART_SetConfig+0x4d8>
 800317e:	bf00      	nop
 8003180:	40011000 	.word	0x40011000
 8003184:	40011400 	.word	0x40011400
 8003188:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800318c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003190:	2200      	movs	r2, #0
 8003192:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003196:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800319a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800319e:	4642      	mov	r2, r8
 80031a0:	464b      	mov	r3, r9
 80031a2:	1891      	adds	r1, r2, r2
 80031a4:	6239      	str	r1, [r7, #32]
 80031a6:	415b      	adcs	r3, r3
 80031a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80031aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80031ae:	4641      	mov	r1, r8
 80031b0:	1854      	adds	r4, r2, r1
 80031b2:	4649      	mov	r1, r9
 80031b4:	eb43 0501 	adc.w	r5, r3, r1
 80031b8:	f04f 0200 	mov.w	r2, #0
 80031bc:	f04f 0300 	mov.w	r3, #0
 80031c0:	00eb      	lsls	r3, r5, #3
 80031c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031c6:	00e2      	lsls	r2, r4, #3
 80031c8:	4614      	mov	r4, r2
 80031ca:	461d      	mov	r5, r3
 80031cc:	4643      	mov	r3, r8
 80031ce:	18e3      	adds	r3, r4, r3
 80031d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80031d4:	464b      	mov	r3, r9
 80031d6:	eb45 0303 	adc.w	r3, r5, r3
 80031da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80031de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80031ea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80031ee:	f04f 0200 	mov.w	r2, #0
 80031f2:	f04f 0300 	mov.w	r3, #0
 80031f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80031fa:	4629      	mov	r1, r5
 80031fc:	008b      	lsls	r3, r1, #2
 80031fe:	4621      	mov	r1, r4
 8003200:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003204:	4621      	mov	r1, r4
 8003206:	008a      	lsls	r2, r1, #2
 8003208:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800320c:	f7fd fcd4 	bl	8000bb8 <__aeabi_uldivmod>
 8003210:	4602      	mov	r2, r0
 8003212:	460b      	mov	r3, r1
 8003214:	4b60      	ldr	r3, [pc, #384]	@ (8003398 <UART_SetConfig+0x4e4>)
 8003216:	fba3 2302 	umull	r2, r3, r3, r2
 800321a:	095b      	lsrs	r3, r3, #5
 800321c:	011c      	lsls	r4, r3, #4
 800321e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003222:	2200      	movs	r2, #0
 8003224:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003228:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800322c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003230:	4642      	mov	r2, r8
 8003232:	464b      	mov	r3, r9
 8003234:	1891      	adds	r1, r2, r2
 8003236:	61b9      	str	r1, [r7, #24]
 8003238:	415b      	adcs	r3, r3
 800323a:	61fb      	str	r3, [r7, #28]
 800323c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003240:	4641      	mov	r1, r8
 8003242:	1851      	adds	r1, r2, r1
 8003244:	6139      	str	r1, [r7, #16]
 8003246:	4649      	mov	r1, r9
 8003248:	414b      	adcs	r3, r1
 800324a:	617b      	str	r3, [r7, #20]
 800324c:	f04f 0200 	mov.w	r2, #0
 8003250:	f04f 0300 	mov.w	r3, #0
 8003254:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003258:	4659      	mov	r1, fp
 800325a:	00cb      	lsls	r3, r1, #3
 800325c:	4651      	mov	r1, sl
 800325e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003262:	4651      	mov	r1, sl
 8003264:	00ca      	lsls	r2, r1, #3
 8003266:	4610      	mov	r0, r2
 8003268:	4619      	mov	r1, r3
 800326a:	4603      	mov	r3, r0
 800326c:	4642      	mov	r2, r8
 800326e:	189b      	adds	r3, r3, r2
 8003270:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003274:	464b      	mov	r3, r9
 8003276:	460a      	mov	r2, r1
 8003278:	eb42 0303 	adc.w	r3, r2, r3
 800327c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	67bb      	str	r3, [r7, #120]	@ 0x78
 800328a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800328c:	f04f 0200 	mov.w	r2, #0
 8003290:	f04f 0300 	mov.w	r3, #0
 8003294:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003298:	4649      	mov	r1, r9
 800329a:	008b      	lsls	r3, r1, #2
 800329c:	4641      	mov	r1, r8
 800329e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032a2:	4641      	mov	r1, r8
 80032a4:	008a      	lsls	r2, r1, #2
 80032a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80032aa:	f7fd fc85 	bl	8000bb8 <__aeabi_uldivmod>
 80032ae:	4602      	mov	r2, r0
 80032b0:	460b      	mov	r3, r1
 80032b2:	4611      	mov	r1, r2
 80032b4:	4b38      	ldr	r3, [pc, #224]	@ (8003398 <UART_SetConfig+0x4e4>)
 80032b6:	fba3 2301 	umull	r2, r3, r3, r1
 80032ba:	095b      	lsrs	r3, r3, #5
 80032bc:	2264      	movs	r2, #100	@ 0x64
 80032be:	fb02 f303 	mul.w	r3, r2, r3
 80032c2:	1acb      	subs	r3, r1, r3
 80032c4:	011b      	lsls	r3, r3, #4
 80032c6:	3332      	adds	r3, #50	@ 0x32
 80032c8:	4a33      	ldr	r2, [pc, #204]	@ (8003398 <UART_SetConfig+0x4e4>)
 80032ca:	fba2 2303 	umull	r2, r3, r2, r3
 80032ce:	095b      	lsrs	r3, r3, #5
 80032d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80032d4:	441c      	add	r4, r3
 80032d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032da:	2200      	movs	r2, #0
 80032dc:	673b      	str	r3, [r7, #112]	@ 0x70
 80032de:	677a      	str	r2, [r7, #116]	@ 0x74
 80032e0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80032e4:	4642      	mov	r2, r8
 80032e6:	464b      	mov	r3, r9
 80032e8:	1891      	adds	r1, r2, r2
 80032ea:	60b9      	str	r1, [r7, #8]
 80032ec:	415b      	adcs	r3, r3
 80032ee:	60fb      	str	r3, [r7, #12]
 80032f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032f4:	4641      	mov	r1, r8
 80032f6:	1851      	adds	r1, r2, r1
 80032f8:	6039      	str	r1, [r7, #0]
 80032fa:	4649      	mov	r1, r9
 80032fc:	414b      	adcs	r3, r1
 80032fe:	607b      	str	r3, [r7, #4]
 8003300:	f04f 0200 	mov.w	r2, #0
 8003304:	f04f 0300 	mov.w	r3, #0
 8003308:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800330c:	4659      	mov	r1, fp
 800330e:	00cb      	lsls	r3, r1, #3
 8003310:	4651      	mov	r1, sl
 8003312:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003316:	4651      	mov	r1, sl
 8003318:	00ca      	lsls	r2, r1, #3
 800331a:	4610      	mov	r0, r2
 800331c:	4619      	mov	r1, r3
 800331e:	4603      	mov	r3, r0
 8003320:	4642      	mov	r2, r8
 8003322:	189b      	adds	r3, r3, r2
 8003324:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003326:	464b      	mov	r3, r9
 8003328:	460a      	mov	r2, r1
 800332a:	eb42 0303 	adc.w	r3, r2, r3
 800332e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	663b      	str	r3, [r7, #96]	@ 0x60
 800333a:	667a      	str	r2, [r7, #100]	@ 0x64
 800333c:	f04f 0200 	mov.w	r2, #0
 8003340:	f04f 0300 	mov.w	r3, #0
 8003344:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003348:	4649      	mov	r1, r9
 800334a:	008b      	lsls	r3, r1, #2
 800334c:	4641      	mov	r1, r8
 800334e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003352:	4641      	mov	r1, r8
 8003354:	008a      	lsls	r2, r1, #2
 8003356:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800335a:	f7fd fc2d 	bl	8000bb8 <__aeabi_uldivmod>
 800335e:	4602      	mov	r2, r0
 8003360:	460b      	mov	r3, r1
 8003362:	4b0d      	ldr	r3, [pc, #52]	@ (8003398 <UART_SetConfig+0x4e4>)
 8003364:	fba3 1302 	umull	r1, r3, r3, r2
 8003368:	095b      	lsrs	r3, r3, #5
 800336a:	2164      	movs	r1, #100	@ 0x64
 800336c:	fb01 f303 	mul.w	r3, r1, r3
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	011b      	lsls	r3, r3, #4
 8003374:	3332      	adds	r3, #50	@ 0x32
 8003376:	4a08      	ldr	r2, [pc, #32]	@ (8003398 <UART_SetConfig+0x4e4>)
 8003378:	fba2 2303 	umull	r2, r3, r2, r3
 800337c:	095b      	lsrs	r3, r3, #5
 800337e:	f003 020f 	and.w	r2, r3, #15
 8003382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4422      	add	r2, r4
 800338a:	609a      	str	r2, [r3, #8]
}
 800338c:	bf00      	nop
 800338e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003392:	46bd      	mov	sp, r7
 8003394:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003398:	51eb851f 	.word	0x51eb851f

0800339c <__cvt>:
 800339c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80033a0:	ec57 6b10 	vmov	r6, r7, d0
 80033a4:	2f00      	cmp	r7, #0
 80033a6:	460c      	mov	r4, r1
 80033a8:	4619      	mov	r1, r3
 80033aa:	463b      	mov	r3, r7
 80033ac:	bfbb      	ittet	lt
 80033ae:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80033b2:	461f      	movlt	r7, r3
 80033b4:	2300      	movge	r3, #0
 80033b6:	232d      	movlt	r3, #45	@ 0x2d
 80033b8:	700b      	strb	r3, [r1, #0]
 80033ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80033bc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80033c0:	4691      	mov	r9, r2
 80033c2:	f023 0820 	bic.w	r8, r3, #32
 80033c6:	bfbc      	itt	lt
 80033c8:	4632      	movlt	r2, r6
 80033ca:	4616      	movlt	r6, r2
 80033cc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80033d0:	d005      	beq.n	80033de <__cvt+0x42>
 80033d2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80033d6:	d100      	bne.n	80033da <__cvt+0x3e>
 80033d8:	3401      	adds	r4, #1
 80033da:	2102      	movs	r1, #2
 80033dc:	e000      	b.n	80033e0 <__cvt+0x44>
 80033de:	2103      	movs	r1, #3
 80033e0:	ab03      	add	r3, sp, #12
 80033e2:	9301      	str	r3, [sp, #4]
 80033e4:	ab02      	add	r3, sp, #8
 80033e6:	9300      	str	r3, [sp, #0]
 80033e8:	ec47 6b10 	vmov	d0, r6, r7
 80033ec:	4653      	mov	r3, sl
 80033ee:	4622      	mov	r2, r4
 80033f0:	f000 fe5a 	bl	80040a8 <_dtoa_r>
 80033f4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80033f8:	4605      	mov	r5, r0
 80033fa:	d119      	bne.n	8003430 <__cvt+0x94>
 80033fc:	f019 0f01 	tst.w	r9, #1
 8003400:	d00e      	beq.n	8003420 <__cvt+0x84>
 8003402:	eb00 0904 	add.w	r9, r0, r4
 8003406:	2200      	movs	r2, #0
 8003408:	2300      	movs	r3, #0
 800340a:	4630      	mov	r0, r6
 800340c:	4639      	mov	r1, r7
 800340e:	f7fd fb63 	bl	8000ad8 <__aeabi_dcmpeq>
 8003412:	b108      	cbz	r0, 8003418 <__cvt+0x7c>
 8003414:	f8cd 900c 	str.w	r9, [sp, #12]
 8003418:	2230      	movs	r2, #48	@ 0x30
 800341a:	9b03      	ldr	r3, [sp, #12]
 800341c:	454b      	cmp	r3, r9
 800341e:	d31e      	bcc.n	800345e <__cvt+0xc2>
 8003420:	9b03      	ldr	r3, [sp, #12]
 8003422:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003424:	1b5b      	subs	r3, r3, r5
 8003426:	4628      	mov	r0, r5
 8003428:	6013      	str	r3, [r2, #0]
 800342a:	b004      	add	sp, #16
 800342c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003430:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003434:	eb00 0904 	add.w	r9, r0, r4
 8003438:	d1e5      	bne.n	8003406 <__cvt+0x6a>
 800343a:	7803      	ldrb	r3, [r0, #0]
 800343c:	2b30      	cmp	r3, #48	@ 0x30
 800343e:	d10a      	bne.n	8003456 <__cvt+0xba>
 8003440:	2200      	movs	r2, #0
 8003442:	2300      	movs	r3, #0
 8003444:	4630      	mov	r0, r6
 8003446:	4639      	mov	r1, r7
 8003448:	f7fd fb46 	bl	8000ad8 <__aeabi_dcmpeq>
 800344c:	b918      	cbnz	r0, 8003456 <__cvt+0xba>
 800344e:	f1c4 0401 	rsb	r4, r4, #1
 8003452:	f8ca 4000 	str.w	r4, [sl]
 8003456:	f8da 3000 	ldr.w	r3, [sl]
 800345a:	4499      	add	r9, r3
 800345c:	e7d3      	b.n	8003406 <__cvt+0x6a>
 800345e:	1c59      	adds	r1, r3, #1
 8003460:	9103      	str	r1, [sp, #12]
 8003462:	701a      	strb	r2, [r3, #0]
 8003464:	e7d9      	b.n	800341a <__cvt+0x7e>

08003466 <__exponent>:
 8003466:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003468:	2900      	cmp	r1, #0
 800346a:	bfba      	itte	lt
 800346c:	4249      	neglt	r1, r1
 800346e:	232d      	movlt	r3, #45	@ 0x2d
 8003470:	232b      	movge	r3, #43	@ 0x2b
 8003472:	2909      	cmp	r1, #9
 8003474:	7002      	strb	r2, [r0, #0]
 8003476:	7043      	strb	r3, [r0, #1]
 8003478:	dd29      	ble.n	80034ce <__exponent+0x68>
 800347a:	f10d 0307 	add.w	r3, sp, #7
 800347e:	461d      	mov	r5, r3
 8003480:	270a      	movs	r7, #10
 8003482:	461a      	mov	r2, r3
 8003484:	fbb1 f6f7 	udiv	r6, r1, r7
 8003488:	fb07 1416 	mls	r4, r7, r6, r1
 800348c:	3430      	adds	r4, #48	@ 0x30
 800348e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003492:	460c      	mov	r4, r1
 8003494:	2c63      	cmp	r4, #99	@ 0x63
 8003496:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800349a:	4631      	mov	r1, r6
 800349c:	dcf1      	bgt.n	8003482 <__exponent+0x1c>
 800349e:	3130      	adds	r1, #48	@ 0x30
 80034a0:	1e94      	subs	r4, r2, #2
 80034a2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80034a6:	1c41      	adds	r1, r0, #1
 80034a8:	4623      	mov	r3, r4
 80034aa:	42ab      	cmp	r3, r5
 80034ac:	d30a      	bcc.n	80034c4 <__exponent+0x5e>
 80034ae:	f10d 0309 	add.w	r3, sp, #9
 80034b2:	1a9b      	subs	r3, r3, r2
 80034b4:	42ac      	cmp	r4, r5
 80034b6:	bf88      	it	hi
 80034b8:	2300      	movhi	r3, #0
 80034ba:	3302      	adds	r3, #2
 80034bc:	4403      	add	r3, r0
 80034be:	1a18      	subs	r0, r3, r0
 80034c0:	b003      	add	sp, #12
 80034c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034c4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80034c8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80034cc:	e7ed      	b.n	80034aa <__exponent+0x44>
 80034ce:	2330      	movs	r3, #48	@ 0x30
 80034d0:	3130      	adds	r1, #48	@ 0x30
 80034d2:	7083      	strb	r3, [r0, #2]
 80034d4:	70c1      	strb	r1, [r0, #3]
 80034d6:	1d03      	adds	r3, r0, #4
 80034d8:	e7f1      	b.n	80034be <__exponent+0x58>
	...

080034dc <_printf_float>:
 80034dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034e0:	b08d      	sub	sp, #52	@ 0x34
 80034e2:	460c      	mov	r4, r1
 80034e4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80034e8:	4616      	mov	r6, r2
 80034ea:	461f      	mov	r7, r3
 80034ec:	4605      	mov	r5, r0
 80034ee:	f000 fcdb 	bl	8003ea8 <_localeconv_r>
 80034f2:	6803      	ldr	r3, [r0, #0]
 80034f4:	9304      	str	r3, [sp, #16]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7fc fec2 	bl	8000280 <strlen>
 80034fc:	2300      	movs	r3, #0
 80034fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8003500:	f8d8 3000 	ldr.w	r3, [r8]
 8003504:	9005      	str	r0, [sp, #20]
 8003506:	3307      	adds	r3, #7
 8003508:	f023 0307 	bic.w	r3, r3, #7
 800350c:	f103 0208 	add.w	r2, r3, #8
 8003510:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003514:	f8d4 b000 	ldr.w	fp, [r4]
 8003518:	f8c8 2000 	str.w	r2, [r8]
 800351c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003520:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003524:	9307      	str	r3, [sp, #28]
 8003526:	f8cd 8018 	str.w	r8, [sp, #24]
 800352a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800352e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003532:	4b9c      	ldr	r3, [pc, #624]	@ (80037a4 <_printf_float+0x2c8>)
 8003534:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003538:	f7fd fb00 	bl	8000b3c <__aeabi_dcmpun>
 800353c:	bb70      	cbnz	r0, 800359c <_printf_float+0xc0>
 800353e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003542:	4b98      	ldr	r3, [pc, #608]	@ (80037a4 <_printf_float+0x2c8>)
 8003544:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003548:	f7fd fada 	bl	8000b00 <__aeabi_dcmple>
 800354c:	bb30      	cbnz	r0, 800359c <_printf_float+0xc0>
 800354e:	2200      	movs	r2, #0
 8003550:	2300      	movs	r3, #0
 8003552:	4640      	mov	r0, r8
 8003554:	4649      	mov	r1, r9
 8003556:	f7fd fac9 	bl	8000aec <__aeabi_dcmplt>
 800355a:	b110      	cbz	r0, 8003562 <_printf_float+0x86>
 800355c:	232d      	movs	r3, #45	@ 0x2d
 800355e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003562:	4a91      	ldr	r2, [pc, #580]	@ (80037a8 <_printf_float+0x2cc>)
 8003564:	4b91      	ldr	r3, [pc, #580]	@ (80037ac <_printf_float+0x2d0>)
 8003566:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800356a:	bf8c      	ite	hi
 800356c:	4690      	movhi	r8, r2
 800356e:	4698      	movls	r8, r3
 8003570:	2303      	movs	r3, #3
 8003572:	6123      	str	r3, [r4, #16]
 8003574:	f02b 0304 	bic.w	r3, fp, #4
 8003578:	6023      	str	r3, [r4, #0]
 800357a:	f04f 0900 	mov.w	r9, #0
 800357e:	9700      	str	r7, [sp, #0]
 8003580:	4633      	mov	r3, r6
 8003582:	aa0b      	add	r2, sp, #44	@ 0x2c
 8003584:	4621      	mov	r1, r4
 8003586:	4628      	mov	r0, r5
 8003588:	f000 f9d2 	bl	8003930 <_printf_common>
 800358c:	3001      	adds	r0, #1
 800358e:	f040 808d 	bne.w	80036ac <_printf_float+0x1d0>
 8003592:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003596:	b00d      	add	sp, #52	@ 0x34
 8003598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800359c:	4642      	mov	r2, r8
 800359e:	464b      	mov	r3, r9
 80035a0:	4640      	mov	r0, r8
 80035a2:	4649      	mov	r1, r9
 80035a4:	f7fd faca 	bl	8000b3c <__aeabi_dcmpun>
 80035a8:	b140      	cbz	r0, 80035bc <_printf_float+0xe0>
 80035aa:	464b      	mov	r3, r9
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	bfbc      	itt	lt
 80035b0:	232d      	movlt	r3, #45	@ 0x2d
 80035b2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80035b6:	4a7e      	ldr	r2, [pc, #504]	@ (80037b0 <_printf_float+0x2d4>)
 80035b8:	4b7e      	ldr	r3, [pc, #504]	@ (80037b4 <_printf_float+0x2d8>)
 80035ba:	e7d4      	b.n	8003566 <_printf_float+0x8a>
 80035bc:	6863      	ldr	r3, [r4, #4]
 80035be:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80035c2:	9206      	str	r2, [sp, #24]
 80035c4:	1c5a      	adds	r2, r3, #1
 80035c6:	d13b      	bne.n	8003640 <_printf_float+0x164>
 80035c8:	2306      	movs	r3, #6
 80035ca:	6063      	str	r3, [r4, #4]
 80035cc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80035d0:	2300      	movs	r3, #0
 80035d2:	6022      	str	r2, [r4, #0]
 80035d4:	9303      	str	r3, [sp, #12]
 80035d6:	ab0a      	add	r3, sp, #40	@ 0x28
 80035d8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80035dc:	ab09      	add	r3, sp, #36	@ 0x24
 80035de:	9300      	str	r3, [sp, #0]
 80035e0:	6861      	ldr	r1, [r4, #4]
 80035e2:	ec49 8b10 	vmov	d0, r8, r9
 80035e6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80035ea:	4628      	mov	r0, r5
 80035ec:	f7ff fed6 	bl	800339c <__cvt>
 80035f0:	9b06      	ldr	r3, [sp, #24]
 80035f2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80035f4:	2b47      	cmp	r3, #71	@ 0x47
 80035f6:	4680      	mov	r8, r0
 80035f8:	d129      	bne.n	800364e <_printf_float+0x172>
 80035fa:	1cc8      	adds	r0, r1, #3
 80035fc:	db02      	blt.n	8003604 <_printf_float+0x128>
 80035fe:	6863      	ldr	r3, [r4, #4]
 8003600:	4299      	cmp	r1, r3
 8003602:	dd41      	ble.n	8003688 <_printf_float+0x1ac>
 8003604:	f1aa 0a02 	sub.w	sl, sl, #2
 8003608:	fa5f fa8a 	uxtb.w	sl, sl
 800360c:	3901      	subs	r1, #1
 800360e:	4652      	mov	r2, sl
 8003610:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003614:	9109      	str	r1, [sp, #36]	@ 0x24
 8003616:	f7ff ff26 	bl	8003466 <__exponent>
 800361a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800361c:	1813      	adds	r3, r2, r0
 800361e:	2a01      	cmp	r2, #1
 8003620:	4681      	mov	r9, r0
 8003622:	6123      	str	r3, [r4, #16]
 8003624:	dc02      	bgt.n	800362c <_printf_float+0x150>
 8003626:	6822      	ldr	r2, [r4, #0]
 8003628:	07d2      	lsls	r2, r2, #31
 800362a:	d501      	bpl.n	8003630 <_printf_float+0x154>
 800362c:	3301      	adds	r3, #1
 800362e:	6123      	str	r3, [r4, #16]
 8003630:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8003634:	2b00      	cmp	r3, #0
 8003636:	d0a2      	beq.n	800357e <_printf_float+0xa2>
 8003638:	232d      	movs	r3, #45	@ 0x2d
 800363a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800363e:	e79e      	b.n	800357e <_printf_float+0xa2>
 8003640:	9a06      	ldr	r2, [sp, #24]
 8003642:	2a47      	cmp	r2, #71	@ 0x47
 8003644:	d1c2      	bne.n	80035cc <_printf_float+0xf0>
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1c0      	bne.n	80035cc <_printf_float+0xf0>
 800364a:	2301      	movs	r3, #1
 800364c:	e7bd      	b.n	80035ca <_printf_float+0xee>
 800364e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003652:	d9db      	bls.n	800360c <_printf_float+0x130>
 8003654:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003658:	d118      	bne.n	800368c <_printf_float+0x1b0>
 800365a:	2900      	cmp	r1, #0
 800365c:	6863      	ldr	r3, [r4, #4]
 800365e:	dd0b      	ble.n	8003678 <_printf_float+0x19c>
 8003660:	6121      	str	r1, [r4, #16]
 8003662:	b913      	cbnz	r3, 800366a <_printf_float+0x18e>
 8003664:	6822      	ldr	r2, [r4, #0]
 8003666:	07d0      	lsls	r0, r2, #31
 8003668:	d502      	bpl.n	8003670 <_printf_float+0x194>
 800366a:	3301      	adds	r3, #1
 800366c:	440b      	add	r3, r1
 800366e:	6123      	str	r3, [r4, #16]
 8003670:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003672:	f04f 0900 	mov.w	r9, #0
 8003676:	e7db      	b.n	8003630 <_printf_float+0x154>
 8003678:	b913      	cbnz	r3, 8003680 <_printf_float+0x1a4>
 800367a:	6822      	ldr	r2, [r4, #0]
 800367c:	07d2      	lsls	r2, r2, #31
 800367e:	d501      	bpl.n	8003684 <_printf_float+0x1a8>
 8003680:	3302      	adds	r3, #2
 8003682:	e7f4      	b.n	800366e <_printf_float+0x192>
 8003684:	2301      	movs	r3, #1
 8003686:	e7f2      	b.n	800366e <_printf_float+0x192>
 8003688:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800368c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800368e:	4299      	cmp	r1, r3
 8003690:	db05      	blt.n	800369e <_printf_float+0x1c2>
 8003692:	6823      	ldr	r3, [r4, #0]
 8003694:	6121      	str	r1, [r4, #16]
 8003696:	07d8      	lsls	r0, r3, #31
 8003698:	d5ea      	bpl.n	8003670 <_printf_float+0x194>
 800369a:	1c4b      	adds	r3, r1, #1
 800369c:	e7e7      	b.n	800366e <_printf_float+0x192>
 800369e:	2900      	cmp	r1, #0
 80036a0:	bfd4      	ite	le
 80036a2:	f1c1 0202 	rsble	r2, r1, #2
 80036a6:	2201      	movgt	r2, #1
 80036a8:	4413      	add	r3, r2
 80036aa:	e7e0      	b.n	800366e <_printf_float+0x192>
 80036ac:	6823      	ldr	r3, [r4, #0]
 80036ae:	055a      	lsls	r2, r3, #21
 80036b0:	d407      	bmi.n	80036c2 <_printf_float+0x1e6>
 80036b2:	6923      	ldr	r3, [r4, #16]
 80036b4:	4642      	mov	r2, r8
 80036b6:	4631      	mov	r1, r6
 80036b8:	4628      	mov	r0, r5
 80036ba:	47b8      	blx	r7
 80036bc:	3001      	adds	r0, #1
 80036be:	d12b      	bne.n	8003718 <_printf_float+0x23c>
 80036c0:	e767      	b.n	8003592 <_printf_float+0xb6>
 80036c2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80036c6:	f240 80dd 	bls.w	8003884 <_printf_float+0x3a8>
 80036ca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80036ce:	2200      	movs	r2, #0
 80036d0:	2300      	movs	r3, #0
 80036d2:	f7fd fa01 	bl	8000ad8 <__aeabi_dcmpeq>
 80036d6:	2800      	cmp	r0, #0
 80036d8:	d033      	beq.n	8003742 <_printf_float+0x266>
 80036da:	4a37      	ldr	r2, [pc, #220]	@ (80037b8 <_printf_float+0x2dc>)
 80036dc:	2301      	movs	r3, #1
 80036de:	4631      	mov	r1, r6
 80036e0:	4628      	mov	r0, r5
 80036e2:	47b8      	blx	r7
 80036e4:	3001      	adds	r0, #1
 80036e6:	f43f af54 	beq.w	8003592 <_printf_float+0xb6>
 80036ea:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80036ee:	4543      	cmp	r3, r8
 80036f0:	db02      	blt.n	80036f8 <_printf_float+0x21c>
 80036f2:	6823      	ldr	r3, [r4, #0]
 80036f4:	07d8      	lsls	r0, r3, #31
 80036f6:	d50f      	bpl.n	8003718 <_printf_float+0x23c>
 80036f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80036fc:	4631      	mov	r1, r6
 80036fe:	4628      	mov	r0, r5
 8003700:	47b8      	blx	r7
 8003702:	3001      	adds	r0, #1
 8003704:	f43f af45 	beq.w	8003592 <_printf_float+0xb6>
 8003708:	f04f 0900 	mov.w	r9, #0
 800370c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8003710:	f104 0a1a 	add.w	sl, r4, #26
 8003714:	45c8      	cmp	r8, r9
 8003716:	dc09      	bgt.n	800372c <_printf_float+0x250>
 8003718:	6823      	ldr	r3, [r4, #0]
 800371a:	079b      	lsls	r3, r3, #30
 800371c:	f100 8103 	bmi.w	8003926 <_printf_float+0x44a>
 8003720:	68e0      	ldr	r0, [r4, #12]
 8003722:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003724:	4298      	cmp	r0, r3
 8003726:	bfb8      	it	lt
 8003728:	4618      	movlt	r0, r3
 800372a:	e734      	b.n	8003596 <_printf_float+0xba>
 800372c:	2301      	movs	r3, #1
 800372e:	4652      	mov	r2, sl
 8003730:	4631      	mov	r1, r6
 8003732:	4628      	mov	r0, r5
 8003734:	47b8      	blx	r7
 8003736:	3001      	adds	r0, #1
 8003738:	f43f af2b 	beq.w	8003592 <_printf_float+0xb6>
 800373c:	f109 0901 	add.w	r9, r9, #1
 8003740:	e7e8      	b.n	8003714 <_printf_float+0x238>
 8003742:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003744:	2b00      	cmp	r3, #0
 8003746:	dc39      	bgt.n	80037bc <_printf_float+0x2e0>
 8003748:	4a1b      	ldr	r2, [pc, #108]	@ (80037b8 <_printf_float+0x2dc>)
 800374a:	2301      	movs	r3, #1
 800374c:	4631      	mov	r1, r6
 800374e:	4628      	mov	r0, r5
 8003750:	47b8      	blx	r7
 8003752:	3001      	adds	r0, #1
 8003754:	f43f af1d 	beq.w	8003592 <_printf_float+0xb6>
 8003758:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800375c:	ea59 0303 	orrs.w	r3, r9, r3
 8003760:	d102      	bne.n	8003768 <_printf_float+0x28c>
 8003762:	6823      	ldr	r3, [r4, #0]
 8003764:	07d9      	lsls	r1, r3, #31
 8003766:	d5d7      	bpl.n	8003718 <_printf_float+0x23c>
 8003768:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800376c:	4631      	mov	r1, r6
 800376e:	4628      	mov	r0, r5
 8003770:	47b8      	blx	r7
 8003772:	3001      	adds	r0, #1
 8003774:	f43f af0d 	beq.w	8003592 <_printf_float+0xb6>
 8003778:	f04f 0a00 	mov.w	sl, #0
 800377c:	f104 0b1a 	add.w	fp, r4, #26
 8003780:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003782:	425b      	negs	r3, r3
 8003784:	4553      	cmp	r3, sl
 8003786:	dc01      	bgt.n	800378c <_printf_float+0x2b0>
 8003788:	464b      	mov	r3, r9
 800378a:	e793      	b.n	80036b4 <_printf_float+0x1d8>
 800378c:	2301      	movs	r3, #1
 800378e:	465a      	mov	r2, fp
 8003790:	4631      	mov	r1, r6
 8003792:	4628      	mov	r0, r5
 8003794:	47b8      	blx	r7
 8003796:	3001      	adds	r0, #1
 8003798:	f43f aefb 	beq.w	8003592 <_printf_float+0xb6>
 800379c:	f10a 0a01 	add.w	sl, sl, #1
 80037a0:	e7ee      	b.n	8003780 <_printf_float+0x2a4>
 80037a2:	bf00      	nop
 80037a4:	7fefffff 	.word	0x7fefffff
 80037a8:	080060d8 	.word	0x080060d8
 80037ac:	080060d4 	.word	0x080060d4
 80037b0:	080060e0 	.word	0x080060e0
 80037b4:	080060dc 	.word	0x080060dc
 80037b8:	080060e4 	.word	0x080060e4
 80037bc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80037be:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80037c2:	4553      	cmp	r3, sl
 80037c4:	bfa8      	it	ge
 80037c6:	4653      	movge	r3, sl
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	4699      	mov	r9, r3
 80037cc:	dc36      	bgt.n	800383c <_printf_float+0x360>
 80037ce:	f04f 0b00 	mov.w	fp, #0
 80037d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80037d6:	f104 021a 	add.w	r2, r4, #26
 80037da:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80037dc:	9306      	str	r3, [sp, #24]
 80037de:	eba3 0309 	sub.w	r3, r3, r9
 80037e2:	455b      	cmp	r3, fp
 80037e4:	dc31      	bgt.n	800384a <_printf_float+0x36e>
 80037e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80037e8:	459a      	cmp	sl, r3
 80037ea:	dc3a      	bgt.n	8003862 <_printf_float+0x386>
 80037ec:	6823      	ldr	r3, [r4, #0]
 80037ee:	07da      	lsls	r2, r3, #31
 80037f0:	d437      	bmi.n	8003862 <_printf_float+0x386>
 80037f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80037f4:	ebaa 0903 	sub.w	r9, sl, r3
 80037f8:	9b06      	ldr	r3, [sp, #24]
 80037fa:	ebaa 0303 	sub.w	r3, sl, r3
 80037fe:	4599      	cmp	r9, r3
 8003800:	bfa8      	it	ge
 8003802:	4699      	movge	r9, r3
 8003804:	f1b9 0f00 	cmp.w	r9, #0
 8003808:	dc33      	bgt.n	8003872 <_printf_float+0x396>
 800380a:	f04f 0800 	mov.w	r8, #0
 800380e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003812:	f104 0b1a 	add.w	fp, r4, #26
 8003816:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003818:	ebaa 0303 	sub.w	r3, sl, r3
 800381c:	eba3 0309 	sub.w	r3, r3, r9
 8003820:	4543      	cmp	r3, r8
 8003822:	f77f af79 	ble.w	8003718 <_printf_float+0x23c>
 8003826:	2301      	movs	r3, #1
 8003828:	465a      	mov	r2, fp
 800382a:	4631      	mov	r1, r6
 800382c:	4628      	mov	r0, r5
 800382e:	47b8      	blx	r7
 8003830:	3001      	adds	r0, #1
 8003832:	f43f aeae 	beq.w	8003592 <_printf_float+0xb6>
 8003836:	f108 0801 	add.w	r8, r8, #1
 800383a:	e7ec      	b.n	8003816 <_printf_float+0x33a>
 800383c:	4642      	mov	r2, r8
 800383e:	4631      	mov	r1, r6
 8003840:	4628      	mov	r0, r5
 8003842:	47b8      	blx	r7
 8003844:	3001      	adds	r0, #1
 8003846:	d1c2      	bne.n	80037ce <_printf_float+0x2f2>
 8003848:	e6a3      	b.n	8003592 <_printf_float+0xb6>
 800384a:	2301      	movs	r3, #1
 800384c:	4631      	mov	r1, r6
 800384e:	4628      	mov	r0, r5
 8003850:	9206      	str	r2, [sp, #24]
 8003852:	47b8      	blx	r7
 8003854:	3001      	adds	r0, #1
 8003856:	f43f ae9c 	beq.w	8003592 <_printf_float+0xb6>
 800385a:	9a06      	ldr	r2, [sp, #24]
 800385c:	f10b 0b01 	add.w	fp, fp, #1
 8003860:	e7bb      	b.n	80037da <_printf_float+0x2fe>
 8003862:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003866:	4631      	mov	r1, r6
 8003868:	4628      	mov	r0, r5
 800386a:	47b8      	blx	r7
 800386c:	3001      	adds	r0, #1
 800386e:	d1c0      	bne.n	80037f2 <_printf_float+0x316>
 8003870:	e68f      	b.n	8003592 <_printf_float+0xb6>
 8003872:	9a06      	ldr	r2, [sp, #24]
 8003874:	464b      	mov	r3, r9
 8003876:	4442      	add	r2, r8
 8003878:	4631      	mov	r1, r6
 800387a:	4628      	mov	r0, r5
 800387c:	47b8      	blx	r7
 800387e:	3001      	adds	r0, #1
 8003880:	d1c3      	bne.n	800380a <_printf_float+0x32e>
 8003882:	e686      	b.n	8003592 <_printf_float+0xb6>
 8003884:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003888:	f1ba 0f01 	cmp.w	sl, #1
 800388c:	dc01      	bgt.n	8003892 <_printf_float+0x3b6>
 800388e:	07db      	lsls	r3, r3, #31
 8003890:	d536      	bpl.n	8003900 <_printf_float+0x424>
 8003892:	2301      	movs	r3, #1
 8003894:	4642      	mov	r2, r8
 8003896:	4631      	mov	r1, r6
 8003898:	4628      	mov	r0, r5
 800389a:	47b8      	blx	r7
 800389c:	3001      	adds	r0, #1
 800389e:	f43f ae78 	beq.w	8003592 <_printf_float+0xb6>
 80038a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80038a6:	4631      	mov	r1, r6
 80038a8:	4628      	mov	r0, r5
 80038aa:	47b8      	blx	r7
 80038ac:	3001      	adds	r0, #1
 80038ae:	f43f ae70 	beq.w	8003592 <_printf_float+0xb6>
 80038b2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80038b6:	2200      	movs	r2, #0
 80038b8:	2300      	movs	r3, #0
 80038ba:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80038be:	f7fd f90b 	bl	8000ad8 <__aeabi_dcmpeq>
 80038c2:	b9c0      	cbnz	r0, 80038f6 <_printf_float+0x41a>
 80038c4:	4653      	mov	r3, sl
 80038c6:	f108 0201 	add.w	r2, r8, #1
 80038ca:	4631      	mov	r1, r6
 80038cc:	4628      	mov	r0, r5
 80038ce:	47b8      	blx	r7
 80038d0:	3001      	adds	r0, #1
 80038d2:	d10c      	bne.n	80038ee <_printf_float+0x412>
 80038d4:	e65d      	b.n	8003592 <_printf_float+0xb6>
 80038d6:	2301      	movs	r3, #1
 80038d8:	465a      	mov	r2, fp
 80038da:	4631      	mov	r1, r6
 80038dc:	4628      	mov	r0, r5
 80038de:	47b8      	blx	r7
 80038e0:	3001      	adds	r0, #1
 80038e2:	f43f ae56 	beq.w	8003592 <_printf_float+0xb6>
 80038e6:	f108 0801 	add.w	r8, r8, #1
 80038ea:	45d0      	cmp	r8, sl
 80038ec:	dbf3      	blt.n	80038d6 <_printf_float+0x3fa>
 80038ee:	464b      	mov	r3, r9
 80038f0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80038f4:	e6df      	b.n	80036b6 <_printf_float+0x1da>
 80038f6:	f04f 0800 	mov.w	r8, #0
 80038fa:	f104 0b1a 	add.w	fp, r4, #26
 80038fe:	e7f4      	b.n	80038ea <_printf_float+0x40e>
 8003900:	2301      	movs	r3, #1
 8003902:	4642      	mov	r2, r8
 8003904:	e7e1      	b.n	80038ca <_printf_float+0x3ee>
 8003906:	2301      	movs	r3, #1
 8003908:	464a      	mov	r2, r9
 800390a:	4631      	mov	r1, r6
 800390c:	4628      	mov	r0, r5
 800390e:	47b8      	blx	r7
 8003910:	3001      	adds	r0, #1
 8003912:	f43f ae3e 	beq.w	8003592 <_printf_float+0xb6>
 8003916:	f108 0801 	add.w	r8, r8, #1
 800391a:	68e3      	ldr	r3, [r4, #12]
 800391c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800391e:	1a5b      	subs	r3, r3, r1
 8003920:	4543      	cmp	r3, r8
 8003922:	dcf0      	bgt.n	8003906 <_printf_float+0x42a>
 8003924:	e6fc      	b.n	8003720 <_printf_float+0x244>
 8003926:	f04f 0800 	mov.w	r8, #0
 800392a:	f104 0919 	add.w	r9, r4, #25
 800392e:	e7f4      	b.n	800391a <_printf_float+0x43e>

08003930 <_printf_common>:
 8003930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003934:	4616      	mov	r6, r2
 8003936:	4698      	mov	r8, r3
 8003938:	688a      	ldr	r2, [r1, #8]
 800393a:	690b      	ldr	r3, [r1, #16]
 800393c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003940:	4293      	cmp	r3, r2
 8003942:	bfb8      	it	lt
 8003944:	4613      	movlt	r3, r2
 8003946:	6033      	str	r3, [r6, #0]
 8003948:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800394c:	4607      	mov	r7, r0
 800394e:	460c      	mov	r4, r1
 8003950:	b10a      	cbz	r2, 8003956 <_printf_common+0x26>
 8003952:	3301      	adds	r3, #1
 8003954:	6033      	str	r3, [r6, #0]
 8003956:	6823      	ldr	r3, [r4, #0]
 8003958:	0699      	lsls	r1, r3, #26
 800395a:	bf42      	ittt	mi
 800395c:	6833      	ldrmi	r3, [r6, #0]
 800395e:	3302      	addmi	r3, #2
 8003960:	6033      	strmi	r3, [r6, #0]
 8003962:	6825      	ldr	r5, [r4, #0]
 8003964:	f015 0506 	ands.w	r5, r5, #6
 8003968:	d106      	bne.n	8003978 <_printf_common+0x48>
 800396a:	f104 0a19 	add.w	sl, r4, #25
 800396e:	68e3      	ldr	r3, [r4, #12]
 8003970:	6832      	ldr	r2, [r6, #0]
 8003972:	1a9b      	subs	r3, r3, r2
 8003974:	42ab      	cmp	r3, r5
 8003976:	dc26      	bgt.n	80039c6 <_printf_common+0x96>
 8003978:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800397c:	6822      	ldr	r2, [r4, #0]
 800397e:	3b00      	subs	r3, #0
 8003980:	bf18      	it	ne
 8003982:	2301      	movne	r3, #1
 8003984:	0692      	lsls	r2, r2, #26
 8003986:	d42b      	bmi.n	80039e0 <_printf_common+0xb0>
 8003988:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800398c:	4641      	mov	r1, r8
 800398e:	4638      	mov	r0, r7
 8003990:	47c8      	blx	r9
 8003992:	3001      	adds	r0, #1
 8003994:	d01e      	beq.n	80039d4 <_printf_common+0xa4>
 8003996:	6823      	ldr	r3, [r4, #0]
 8003998:	6922      	ldr	r2, [r4, #16]
 800399a:	f003 0306 	and.w	r3, r3, #6
 800399e:	2b04      	cmp	r3, #4
 80039a0:	bf02      	ittt	eq
 80039a2:	68e5      	ldreq	r5, [r4, #12]
 80039a4:	6833      	ldreq	r3, [r6, #0]
 80039a6:	1aed      	subeq	r5, r5, r3
 80039a8:	68a3      	ldr	r3, [r4, #8]
 80039aa:	bf0c      	ite	eq
 80039ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80039b0:	2500      	movne	r5, #0
 80039b2:	4293      	cmp	r3, r2
 80039b4:	bfc4      	itt	gt
 80039b6:	1a9b      	subgt	r3, r3, r2
 80039b8:	18ed      	addgt	r5, r5, r3
 80039ba:	2600      	movs	r6, #0
 80039bc:	341a      	adds	r4, #26
 80039be:	42b5      	cmp	r5, r6
 80039c0:	d11a      	bne.n	80039f8 <_printf_common+0xc8>
 80039c2:	2000      	movs	r0, #0
 80039c4:	e008      	b.n	80039d8 <_printf_common+0xa8>
 80039c6:	2301      	movs	r3, #1
 80039c8:	4652      	mov	r2, sl
 80039ca:	4641      	mov	r1, r8
 80039cc:	4638      	mov	r0, r7
 80039ce:	47c8      	blx	r9
 80039d0:	3001      	adds	r0, #1
 80039d2:	d103      	bne.n	80039dc <_printf_common+0xac>
 80039d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80039d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039dc:	3501      	adds	r5, #1
 80039de:	e7c6      	b.n	800396e <_printf_common+0x3e>
 80039e0:	18e1      	adds	r1, r4, r3
 80039e2:	1c5a      	adds	r2, r3, #1
 80039e4:	2030      	movs	r0, #48	@ 0x30
 80039e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80039ea:	4422      	add	r2, r4
 80039ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80039f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80039f4:	3302      	adds	r3, #2
 80039f6:	e7c7      	b.n	8003988 <_printf_common+0x58>
 80039f8:	2301      	movs	r3, #1
 80039fa:	4622      	mov	r2, r4
 80039fc:	4641      	mov	r1, r8
 80039fe:	4638      	mov	r0, r7
 8003a00:	47c8      	blx	r9
 8003a02:	3001      	adds	r0, #1
 8003a04:	d0e6      	beq.n	80039d4 <_printf_common+0xa4>
 8003a06:	3601      	adds	r6, #1
 8003a08:	e7d9      	b.n	80039be <_printf_common+0x8e>
	...

08003a0c <_printf_i>:
 8003a0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a10:	7e0f      	ldrb	r7, [r1, #24]
 8003a12:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003a14:	2f78      	cmp	r7, #120	@ 0x78
 8003a16:	4691      	mov	r9, r2
 8003a18:	4680      	mov	r8, r0
 8003a1a:	460c      	mov	r4, r1
 8003a1c:	469a      	mov	sl, r3
 8003a1e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003a22:	d807      	bhi.n	8003a34 <_printf_i+0x28>
 8003a24:	2f62      	cmp	r7, #98	@ 0x62
 8003a26:	d80a      	bhi.n	8003a3e <_printf_i+0x32>
 8003a28:	2f00      	cmp	r7, #0
 8003a2a:	f000 80d1 	beq.w	8003bd0 <_printf_i+0x1c4>
 8003a2e:	2f58      	cmp	r7, #88	@ 0x58
 8003a30:	f000 80b8 	beq.w	8003ba4 <_printf_i+0x198>
 8003a34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003a38:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003a3c:	e03a      	b.n	8003ab4 <_printf_i+0xa8>
 8003a3e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003a42:	2b15      	cmp	r3, #21
 8003a44:	d8f6      	bhi.n	8003a34 <_printf_i+0x28>
 8003a46:	a101      	add	r1, pc, #4	@ (adr r1, 8003a4c <_printf_i+0x40>)
 8003a48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003a4c:	08003aa5 	.word	0x08003aa5
 8003a50:	08003ab9 	.word	0x08003ab9
 8003a54:	08003a35 	.word	0x08003a35
 8003a58:	08003a35 	.word	0x08003a35
 8003a5c:	08003a35 	.word	0x08003a35
 8003a60:	08003a35 	.word	0x08003a35
 8003a64:	08003ab9 	.word	0x08003ab9
 8003a68:	08003a35 	.word	0x08003a35
 8003a6c:	08003a35 	.word	0x08003a35
 8003a70:	08003a35 	.word	0x08003a35
 8003a74:	08003a35 	.word	0x08003a35
 8003a78:	08003bb7 	.word	0x08003bb7
 8003a7c:	08003ae3 	.word	0x08003ae3
 8003a80:	08003b71 	.word	0x08003b71
 8003a84:	08003a35 	.word	0x08003a35
 8003a88:	08003a35 	.word	0x08003a35
 8003a8c:	08003bd9 	.word	0x08003bd9
 8003a90:	08003a35 	.word	0x08003a35
 8003a94:	08003ae3 	.word	0x08003ae3
 8003a98:	08003a35 	.word	0x08003a35
 8003a9c:	08003a35 	.word	0x08003a35
 8003aa0:	08003b79 	.word	0x08003b79
 8003aa4:	6833      	ldr	r3, [r6, #0]
 8003aa6:	1d1a      	adds	r2, r3, #4
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	6032      	str	r2, [r6, #0]
 8003aac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003ab0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e09c      	b.n	8003bf2 <_printf_i+0x1e6>
 8003ab8:	6833      	ldr	r3, [r6, #0]
 8003aba:	6820      	ldr	r0, [r4, #0]
 8003abc:	1d19      	adds	r1, r3, #4
 8003abe:	6031      	str	r1, [r6, #0]
 8003ac0:	0606      	lsls	r6, r0, #24
 8003ac2:	d501      	bpl.n	8003ac8 <_printf_i+0xbc>
 8003ac4:	681d      	ldr	r5, [r3, #0]
 8003ac6:	e003      	b.n	8003ad0 <_printf_i+0xc4>
 8003ac8:	0645      	lsls	r5, r0, #25
 8003aca:	d5fb      	bpl.n	8003ac4 <_printf_i+0xb8>
 8003acc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003ad0:	2d00      	cmp	r5, #0
 8003ad2:	da03      	bge.n	8003adc <_printf_i+0xd0>
 8003ad4:	232d      	movs	r3, #45	@ 0x2d
 8003ad6:	426d      	negs	r5, r5
 8003ad8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003adc:	4858      	ldr	r0, [pc, #352]	@ (8003c40 <_printf_i+0x234>)
 8003ade:	230a      	movs	r3, #10
 8003ae0:	e011      	b.n	8003b06 <_printf_i+0xfa>
 8003ae2:	6821      	ldr	r1, [r4, #0]
 8003ae4:	6833      	ldr	r3, [r6, #0]
 8003ae6:	0608      	lsls	r0, r1, #24
 8003ae8:	f853 5b04 	ldr.w	r5, [r3], #4
 8003aec:	d402      	bmi.n	8003af4 <_printf_i+0xe8>
 8003aee:	0649      	lsls	r1, r1, #25
 8003af0:	bf48      	it	mi
 8003af2:	b2ad      	uxthmi	r5, r5
 8003af4:	2f6f      	cmp	r7, #111	@ 0x6f
 8003af6:	4852      	ldr	r0, [pc, #328]	@ (8003c40 <_printf_i+0x234>)
 8003af8:	6033      	str	r3, [r6, #0]
 8003afa:	bf14      	ite	ne
 8003afc:	230a      	movne	r3, #10
 8003afe:	2308      	moveq	r3, #8
 8003b00:	2100      	movs	r1, #0
 8003b02:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003b06:	6866      	ldr	r6, [r4, #4]
 8003b08:	60a6      	str	r6, [r4, #8]
 8003b0a:	2e00      	cmp	r6, #0
 8003b0c:	db05      	blt.n	8003b1a <_printf_i+0x10e>
 8003b0e:	6821      	ldr	r1, [r4, #0]
 8003b10:	432e      	orrs	r6, r5
 8003b12:	f021 0104 	bic.w	r1, r1, #4
 8003b16:	6021      	str	r1, [r4, #0]
 8003b18:	d04b      	beq.n	8003bb2 <_printf_i+0x1a6>
 8003b1a:	4616      	mov	r6, r2
 8003b1c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003b20:	fb03 5711 	mls	r7, r3, r1, r5
 8003b24:	5dc7      	ldrb	r7, [r0, r7]
 8003b26:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003b2a:	462f      	mov	r7, r5
 8003b2c:	42bb      	cmp	r3, r7
 8003b2e:	460d      	mov	r5, r1
 8003b30:	d9f4      	bls.n	8003b1c <_printf_i+0x110>
 8003b32:	2b08      	cmp	r3, #8
 8003b34:	d10b      	bne.n	8003b4e <_printf_i+0x142>
 8003b36:	6823      	ldr	r3, [r4, #0]
 8003b38:	07df      	lsls	r7, r3, #31
 8003b3a:	d508      	bpl.n	8003b4e <_printf_i+0x142>
 8003b3c:	6923      	ldr	r3, [r4, #16]
 8003b3e:	6861      	ldr	r1, [r4, #4]
 8003b40:	4299      	cmp	r1, r3
 8003b42:	bfde      	ittt	le
 8003b44:	2330      	movle	r3, #48	@ 0x30
 8003b46:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003b4a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003b4e:	1b92      	subs	r2, r2, r6
 8003b50:	6122      	str	r2, [r4, #16]
 8003b52:	f8cd a000 	str.w	sl, [sp]
 8003b56:	464b      	mov	r3, r9
 8003b58:	aa03      	add	r2, sp, #12
 8003b5a:	4621      	mov	r1, r4
 8003b5c:	4640      	mov	r0, r8
 8003b5e:	f7ff fee7 	bl	8003930 <_printf_common>
 8003b62:	3001      	adds	r0, #1
 8003b64:	d14a      	bne.n	8003bfc <_printf_i+0x1f0>
 8003b66:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003b6a:	b004      	add	sp, #16
 8003b6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b70:	6823      	ldr	r3, [r4, #0]
 8003b72:	f043 0320 	orr.w	r3, r3, #32
 8003b76:	6023      	str	r3, [r4, #0]
 8003b78:	4832      	ldr	r0, [pc, #200]	@ (8003c44 <_printf_i+0x238>)
 8003b7a:	2778      	movs	r7, #120	@ 0x78
 8003b7c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003b80:	6823      	ldr	r3, [r4, #0]
 8003b82:	6831      	ldr	r1, [r6, #0]
 8003b84:	061f      	lsls	r7, r3, #24
 8003b86:	f851 5b04 	ldr.w	r5, [r1], #4
 8003b8a:	d402      	bmi.n	8003b92 <_printf_i+0x186>
 8003b8c:	065f      	lsls	r7, r3, #25
 8003b8e:	bf48      	it	mi
 8003b90:	b2ad      	uxthmi	r5, r5
 8003b92:	6031      	str	r1, [r6, #0]
 8003b94:	07d9      	lsls	r1, r3, #31
 8003b96:	bf44      	itt	mi
 8003b98:	f043 0320 	orrmi.w	r3, r3, #32
 8003b9c:	6023      	strmi	r3, [r4, #0]
 8003b9e:	b11d      	cbz	r5, 8003ba8 <_printf_i+0x19c>
 8003ba0:	2310      	movs	r3, #16
 8003ba2:	e7ad      	b.n	8003b00 <_printf_i+0xf4>
 8003ba4:	4826      	ldr	r0, [pc, #152]	@ (8003c40 <_printf_i+0x234>)
 8003ba6:	e7e9      	b.n	8003b7c <_printf_i+0x170>
 8003ba8:	6823      	ldr	r3, [r4, #0]
 8003baa:	f023 0320 	bic.w	r3, r3, #32
 8003bae:	6023      	str	r3, [r4, #0]
 8003bb0:	e7f6      	b.n	8003ba0 <_printf_i+0x194>
 8003bb2:	4616      	mov	r6, r2
 8003bb4:	e7bd      	b.n	8003b32 <_printf_i+0x126>
 8003bb6:	6833      	ldr	r3, [r6, #0]
 8003bb8:	6825      	ldr	r5, [r4, #0]
 8003bba:	6961      	ldr	r1, [r4, #20]
 8003bbc:	1d18      	adds	r0, r3, #4
 8003bbe:	6030      	str	r0, [r6, #0]
 8003bc0:	062e      	lsls	r6, r5, #24
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	d501      	bpl.n	8003bca <_printf_i+0x1be>
 8003bc6:	6019      	str	r1, [r3, #0]
 8003bc8:	e002      	b.n	8003bd0 <_printf_i+0x1c4>
 8003bca:	0668      	lsls	r0, r5, #25
 8003bcc:	d5fb      	bpl.n	8003bc6 <_printf_i+0x1ba>
 8003bce:	8019      	strh	r1, [r3, #0]
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	6123      	str	r3, [r4, #16]
 8003bd4:	4616      	mov	r6, r2
 8003bd6:	e7bc      	b.n	8003b52 <_printf_i+0x146>
 8003bd8:	6833      	ldr	r3, [r6, #0]
 8003bda:	1d1a      	adds	r2, r3, #4
 8003bdc:	6032      	str	r2, [r6, #0]
 8003bde:	681e      	ldr	r6, [r3, #0]
 8003be0:	6862      	ldr	r2, [r4, #4]
 8003be2:	2100      	movs	r1, #0
 8003be4:	4630      	mov	r0, r6
 8003be6:	f7fc fafb 	bl	80001e0 <memchr>
 8003bea:	b108      	cbz	r0, 8003bf0 <_printf_i+0x1e4>
 8003bec:	1b80      	subs	r0, r0, r6
 8003bee:	6060      	str	r0, [r4, #4]
 8003bf0:	6863      	ldr	r3, [r4, #4]
 8003bf2:	6123      	str	r3, [r4, #16]
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003bfa:	e7aa      	b.n	8003b52 <_printf_i+0x146>
 8003bfc:	6923      	ldr	r3, [r4, #16]
 8003bfe:	4632      	mov	r2, r6
 8003c00:	4649      	mov	r1, r9
 8003c02:	4640      	mov	r0, r8
 8003c04:	47d0      	blx	sl
 8003c06:	3001      	adds	r0, #1
 8003c08:	d0ad      	beq.n	8003b66 <_printf_i+0x15a>
 8003c0a:	6823      	ldr	r3, [r4, #0]
 8003c0c:	079b      	lsls	r3, r3, #30
 8003c0e:	d413      	bmi.n	8003c38 <_printf_i+0x22c>
 8003c10:	68e0      	ldr	r0, [r4, #12]
 8003c12:	9b03      	ldr	r3, [sp, #12]
 8003c14:	4298      	cmp	r0, r3
 8003c16:	bfb8      	it	lt
 8003c18:	4618      	movlt	r0, r3
 8003c1a:	e7a6      	b.n	8003b6a <_printf_i+0x15e>
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	4632      	mov	r2, r6
 8003c20:	4649      	mov	r1, r9
 8003c22:	4640      	mov	r0, r8
 8003c24:	47d0      	blx	sl
 8003c26:	3001      	adds	r0, #1
 8003c28:	d09d      	beq.n	8003b66 <_printf_i+0x15a>
 8003c2a:	3501      	adds	r5, #1
 8003c2c:	68e3      	ldr	r3, [r4, #12]
 8003c2e:	9903      	ldr	r1, [sp, #12]
 8003c30:	1a5b      	subs	r3, r3, r1
 8003c32:	42ab      	cmp	r3, r5
 8003c34:	dcf2      	bgt.n	8003c1c <_printf_i+0x210>
 8003c36:	e7eb      	b.n	8003c10 <_printf_i+0x204>
 8003c38:	2500      	movs	r5, #0
 8003c3a:	f104 0619 	add.w	r6, r4, #25
 8003c3e:	e7f5      	b.n	8003c2c <_printf_i+0x220>
 8003c40:	080060e6 	.word	0x080060e6
 8003c44:	080060f7 	.word	0x080060f7

08003c48 <std>:
 8003c48:	2300      	movs	r3, #0
 8003c4a:	b510      	push	{r4, lr}
 8003c4c:	4604      	mov	r4, r0
 8003c4e:	e9c0 3300 	strd	r3, r3, [r0]
 8003c52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003c56:	6083      	str	r3, [r0, #8]
 8003c58:	8181      	strh	r1, [r0, #12]
 8003c5a:	6643      	str	r3, [r0, #100]	@ 0x64
 8003c5c:	81c2      	strh	r2, [r0, #14]
 8003c5e:	6183      	str	r3, [r0, #24]
 8003c60:	4619      	mov	r1, r3
 8003c62:	2208      	movs	r2, #8
 8003c64:	305c      	adds	r0, #92	@ 0x5c
 8003c66:	f000 f916 	bl	8003e96 <memset>
 8003c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ca0 <std+0x58>)
 8003c6c:	6263      	str	r3, [r4, #36]	@ 0x24
 8003c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ca4 <std+0x5c>)
 8003c70:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003c72:	4b0d      	ldr	r3, [pc, #52]	@ (8003ca8 <std+0x60>)
 8003c74:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003c76:	4b0d      	ldr	r3, [pc, #52]	@ (8003cac <std+0x64>)
 8003c78:	6323      	str	r3, [r4, #48]	@ 0x30
 8003c7a:	4b0d      	ldr	r3, [pc, #52]	@ (8003cb0 <std+0x68>)
 8003c7c:	6224      	str	r4, [r4, #32]
 8003c7e:	429c      	cmp	r4, r3
 8003c80:	d006      	beq.n	8003c90 <std+0x48>
 8003c82:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003c86:	4294      	cmp	r4, r2
 8003c88:	d002      	beq.n	8003c90 <std+0x48>
 8003c8a:	33d0      	adds	r3, #208	@ 0xd0
 8003c8c:	429c      	cmp	r4, r3
 8003c8e:	d105      	bne.n	8003c9c <std+0x54>
 8003c90:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003c94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c98:	f000 b97a 	b.w	8003f90 <__retarget_lock_init_recursive>
 8003c9c:	bd10      	pop	{r4, pc}
 8003c9e:	bf00      	nop
 8003ca0:	08003e11 	.word	0x08003e11
 8003ca4:	08003e33 	.word	0x08003e33
 8003ca8:	08003e6b 	.word	0x08003e6b
 8003cac:	08003e8f 	.word	0x08003e8f
 8003cb0:	200002d8 	.word	0x200002d8

08003cb4 <stdio_exit_handler>:
 8003cb4:	4a02      	ldr	r2, [pc, #8]	@ (8003cc0 <stdio_exit_handler+0xc>)
 8003cb6:	4903      	ldr	r1, [pc, #12]	@ (8003cc4 <stdio_exit_handler+0x10>)
 8003cb8:	4803      	ldr	r0, [pc, #12]	@ (8003cc8 <stdio_exit_handler+0x14>)
 8003cba:	f000 b869 	b.w	8003d90 <_fwalk_sglue>
 8003cbe:	bf00      	nop
 8003cc0:	2000000c 	.word	0x2000000c
 8003cc4:	080058f5 	.word	0x080058f5
 8003cc8:	2000001c 	.word	0x2000001c

08003ccc <cleanup_stdio>:
 8003ccc:	6841      	ldr	r1, [r0, #4]
 8003cce:	4b0c      	ldr	r3, [pc, #48]	@ (8003d00 <cleanup_stdio+0x34>)
 8003cd0:	4299      	cmp	r1, r3
 8003cd2:	b510      	push	{r4, lr}
 8003cd4:	4604      	mov	r4, r0
 8003cd6:	d001      	beq.n	8003cdc <cleanup_stdio+0x10>
 8003cd8:	f001 fe0c 	bl	80058f4 <_fflush_r>
 8003cdc:	68a1      	ldr	r1, [r4, #8]
 8003cde:	4b09      	ldr	r3, [pc, #36]	@ (8003d04 <cleanup_stdio+0x38>)
 8003ce0:	4299      	cmp	r1, r3
 8003ce2:	d002      	beq.n	8003cea <cleanup_stdio+0x1e>
 8003ce4:	4620      	mov	r0, r4
 8003ce6:	f001 fe05 	bl	80058f4 <_fflush_r>
 8003cea:	68e1      	ldr	r1, [r4, #12]
 8003cec:	4b06      	ldr	r3, [pc, #24]	@ (8003d08 <cleanup_stdio+0x3c>)
 8003cee:	4299      	cmp	r1, r3
 8003cf0:	d004      	beq.n	8003cfc <cleanup_stdio+0x30>
 8003cf2:	4620      	mov	r0, r4
 8003cf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cf8:	f001 bdfc 	b.w	80058f4 <_fflush_r>
 8003cfc:	bd10      	pop	{r4, pc}
 8003cfe:	bf00      	nop
 8003d00:	200002d8 	.word	0x200002d8
 8003d04:	20000340 	.word	0x20000340
 8003d08:	200003a8 	.word	0x200003a8

08003d0c <global_stdio_init.part.0>:
 8003d0c:	b510      	push	{r4, lr}
 8003d0e:	4b0b      	ldr	r3, [pc, #44]	@ (8003d3c <global_stdio_init.part.0+0x30>)
 8003d10:	4c0b      	ldr	r4, [pc, #44]	@ (8003d40 <global_stdio_init.part.0+0x34>)
 8003d12:	4a0c      	ldr	r2, [pc, #48]	@ (8003d44 <global_stdio_init.part.0+0x38>)
 8003d14:	601a      	str	r2, [r3, #0]
 8003d16:	4620      	mov	r0, r4
 8003d18:	2200      	movs	r2, #0
 8003d1a:	2104      	movs	r1, #4
 8003d1c:	f7ff ff94 	bl	8003c48 <std>
 8003d20:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003d24:	2201      	movs	r2, #1
 8003d26:	2109      	movs	r1, #9
 8003d28:	f7ff ff8e 	bl	8003c48 <std>
 8003d2c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003d30:	2202      	movs	r2, #2
 8003d32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d36:	2112      	movs	r1, #18
 8003d38:	f7ff bf86 	b.w	8003c48 <std>
 8003d3c:	20000410 	.word	0x20000410
 8003d40:	200002d8 	.word	0x200002d8
 8003d44:	08003cb5 	.word	0x08003cb5

08003d48 <__sfp_lock_acquire>:
 8003d48:	4801      	ldr	r0, [pc, #4]	@ (8003d50 <__sfp_lock_acquire+0x8>)
 8003d4a:	f000 b922 	b.w	8003f92 <__retarget_lock_acquire_recursive>
 8003d4e:	bf00      	nop
 8003d50:	20000419 	.word	0x20000419

08003d54 <__sfp_lock_release>:
 8003d54:	4801      	ldr	r0, [pc, #4]	@ (8003d5c <__sfp_lock_release+0x8>)
 8003d56:	f000 b91d 	b.w	8003f94 <__retarget_lock_release_recursive>
 8003d5a:	bf00      	nop
 8003d5c:	20000419 	.word	0x20000419

08003d60 <__sinit>:
 8003d60:	b510      	push	{r4, lr}
 8003d62:	4604      	mov	r4, r0
 8003d64:	f7ff fff0 	bl	8003d48 <__sfp_lock_acquire>
 8003d68:	6a23      	ldr	r3, [r4, #32]
 8003d6a:	b11b      	cbz	r3, 8003d74 <__sinit+0x14>
 8003d6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d70:	f7ff bff0 	b.w	8003d54 <__sfp_lock_release>
 8003d74:	4b04      	ldr	r3, [pc, #16]	@ (8003d88 <__sinit+0x28>)
 8003d76:	6223      	str	r3, [r4, #32]
 8003d78:	4b04      	ldr	r3, [pc, #16]	@ (8003d8c <__sinit+0x2c>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1f5      	bne.n	8003d6c <__sinit+0xc>
 8003d80:	f7ff ffc4 	bl	8003d0c <global_stdio_init.part.0>
 8003d84:	e7f2      	b.n	8003d6c <__sinit+0xc>
 8003d86:	bf00      	nop
 8003d88:	08003ccd 	.word	0x08003ccd
 8003d8c:	20000410 	.word	0x20000410

08003d90 <_fwalk_sglue>:
 8003d90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d94:	4607      	mov	r7, r0
 8003d96:	4688      	mov	r8, r1
 8003d98:	4614      	mov	r4, r2
 8003d9a:	2600      	movs	r6, #0
 8003d9c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003da0:	f1b9 0901 	subs.w	r9, r9, #1
 8003da4:	d505      	bpl.n	8003db2 <_fwalk_sglue+0x22>
 8003da6:	6824      	ldr	r4, [r4, #0]
 8003da8:	2c00      	cmp	r4, #0
 8003daa:	d1f7      	bne.n	8003d9c <_fwalk_sglue+0xc>
 8003dac:	4630      	mov	r0, r6
 8003dae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003db2:	89ab      	ldrh	r3, [r5, #12]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d907      	bls.n	8003dc8 <_fwalk_sglue+0x38>
 8003db8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	d003      	beq.n	8003dc8 <_fwalk_sglue+0x38>
 8003dc0:	4629      	mov	r1, r5
 8003dc2:	4638      	mov	r0, r7
 8003dc4:	47c0      	blx	r8
 8003dc6:	4306      	orrs	r6, r0
 8003dc8:	3568      	adds	r5, #104	@ 0x68
 8003dca:	e7e9      	b.n	8003da0 <_fwalk_sglue+0x10>

08003dcc <siprintf>:
 8003dcc:	b40e      	push	{r1, r2, r3}
 8003dce:	b510      	push	{r4, lr}
 8003dd0:	b09d      	sub	sp, #116	@ 0x74
 8003dd2:	ab1f      	add	r3, sp, #124	@ 0x7c
 8003dd4:	9002      	str	r0, [sp, #8]
 8003dd6:	9006      	str	r0, [sp, #24]
 8003dd8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003ddc:	480a      	ldr	r0, [pc, #40]	@ (8003e08 <siprintf+0x3c>)
 8003dde:	9107      	str	r1, [sp, #28]
 8003de0:	9104      	str	r1, [sp, #16]
 8003de2:	490a      	ldr	r1, [pc, #40]	@ (8003e0c <siprintf+0x40>)
 8003de4:	f853 2b04 	ldr.w	r2, [r3], #4
 8003de8:	9105      	str	r1, [sp, #20]
 8003dea:	2400      	movs	r4, #0
 8003dec:	a902      	add	r1, sp, #8
 8003dee:	6800      	ldr	r0, [r0, #0]
 8003df0:	9301      	str	r3, [sp, #4]
 8003df2:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003df4:	f001 fbfe 	bl	80055f4 <_svfiprintf_r>
 8003df8:	9b02      	ldr	r3, [sp, #8]
 8003dfa:	701c      	strb	r4, [r3, #0]
 8003dfc:	b01d      	add	sp, #116	@ 0x74
 8003dfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e02:	b003      	add	sp, #12
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	20000018 	.word	0x20000018
 8003e0c:	ffff0208 	.word	0xffff0208

08003e10 <__sread>:
 8003e10:	b510      	push	{r4, lr}
 8003e12:	460c      	mov	r4, r1
 8003e14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e18:	f000 f86c 	bl	8003ef4 <_read_r>
 8003e1c:	2800      	cmp	r0, #0
 8003e1e:	bfab      	itete	ge
 8003e20:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003e22:	89a3      	ldrhlt	r3, [r4, #12]
 8003e24:	181b      	addge	r3, r3, r0
 8003e26:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003e2a:	bfac      	ite	ge
 8003e2c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003e2e:	81a3      	strhlt	r3, [r4, #12]
 8003e30:	bd10      	pop	{r4, pc}

08003e32 <__swrite>:
 8003e32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e36:	461f      	mov	r7, r3
 8003e38:	898b      	ldrh	r3, [r1, #12]
 8003e3a:	05db      	lsls	r3, r3, #23
 8003e3c:	4605      	mov	r5, r0
 8003e3e:	460c      	mov	r4, r1
 8003e40:	4616      	mov	r6, r2
 8003e42:	d505      	bpl.n	8003e50 <__swrite+0x1e>
 8003e44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e48:	2302      	movs	r3, #2
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f000 f840 	bl	8003ed0 <_lseek_r>
 8003e50:	89a3      	ldrh	r3, [r4, #12]
 8003e52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e56:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003e5a:	81a3      	strh	r3, [r4, #12]
 8003e5c:	4632      	mov	r2, r6
 8003e5e:	463b      	mov	r3, r7
 8003e60:	4628      	mov	r0, r5
 8003e62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e66:	f000 b857 	b.w	8003f18 <_write_r>

08003e6a <__sseek>:
 8003e6a:	b510      	push	{r4, lr}
 8003e6c:	460c      	mov	r4, r1
 8003e6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e72:	f000 f82d 	bl	8003ed0 <_lseek_r>
 8003e76:	1c43      	adds	r3, r0, #1
 8003e78:	89a3      	ldrh	r3, [r4, #12]
 8003e7a:	bf15      	itete	ne
 8003e7c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003e7e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003e82:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003e86:	81a3      	strheq	r3, [r4, #12]
 8003e88:	bf18      	it	ne
 8003e8a:	81a3      	strhne	r3, [r4, #12]
 8003e8c:	bd10      	pop	{r4, pc}

08003e8e <__sclose>:
 8003e8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e92:	f000 b80d 	b.w	8003eb0 <_close_r>

08003e96 <memset>:
 8003e96:	4402      	add	r2, r0
 8003e98:	4603      	mov	r3, r0
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d100      	bne.n	8003ea0 <memset+0xa>
 8003e9e:	4770      	bx	lr
 8003ea0:	f803 1b01 	strb.w	r1, [r3], #1
 8003ea4:	e7f9      	b.n	8003e9a <memset+0x4>
	...

08003ea8 <_localeconv_r>:
 8003ea8:	4800      	ldr	r0, [pc, #0]	@ (8003eac <_localeconv_r+0x4>)
 8003eaa:	4770      	bx	lr
 8003eac:	20000158 	.word	0x20000158

08003eb0 <_close_r>:
 8003eb0:	b538      	push	{r3, r4, r5, lr}
 8003eb2:	4d06      	ldr	r5, [pc, #24]	@ (8003ecc <_close_r+0x1c>)
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	4604      	mov	r4, r0
 8003eb8:	4608      	mov	r0, r1
 8003eba:	602b      	str	r3, [r5, #0]
 8003ebc:	f7fd fa8e 	bl	80013dc <_close>
 8003ec0:	1c43      	adds	r3, r0, #1
 8003ec2:	d102      	bne.n	8003eca <_close_r+0x1a>
 8003ec4:	682b      	ldr	r3, [r5, #0]
 8003ec6:	b103      	cbz	r3, 8003eca <_close_r+0x1a>
 8003ec8:	6023      	str	r3, [r4, #0]
 8003eca:	bd38      	pop	{r3, r4, r5, pc}
 8003ecc:	20000414 	.word	0x20000414

08003ed0 <_lseek_r>:
 8003ed0:	b538      	push	{r3, r4, r5, lr}
 8003ed2:	4d07      	ldr	r5, [pc, #28]	@ (8003ef0 <_lseek_r+0x20>)
 8003ed4:	4604      	mov	r4, r0
 8003ed6:	4608      	mov	r0, r1
 8003ed8:	4611      	mov	r1, r2
 8003eda:	2200      	movs	r2, #0
 8003edc:	602a      	str	r2, [r5, #0]
 8003ede:	461a      	mov	r2, r3
 8003ee0:	f7fd faa3 	bl	800142a <_lseek>
 8003ee4:	1c43      	adds	r3, r0, #1
 8003ee6:	d102      	bne.n	8003eee <_lseek_r+0x1e>
 8003ee8:	682b      	ldr	r3, [r5, #0]
 8003eea:	b103      	cbz	r3, 8003eee <_lseek_r+0x1e>
 8003eec:	6023      	str	r3, [r4, #0]
 8003eee:	bd38      	pop	{r3, r4, r5, pc}
 8003ef0:	20000414 	.word	0x20000414

08003ef4 <_read_r>:
 8003ef4:	b538      	push	{r3, r4, r5, lr}
 8003ef6:	4d07      	ldr	r5, [pc, #28]	@ (8003f14 <_read_r+0x20>)
 8003ef8:	4604      	mov	r4, r0
 8003efa:	4608      	mov	r0, r1
 8003efc:	4611      	mov	r1, r2
 8003efe:	2200      	movs	r2, #0
 8003f00:	602a      	str	r2, [r5, #0]
 8003f02:	461a      	mov	r2, r3
 8003f04:	f7fd fa31 	bl	800136a <_read>
 8003f08:	1c43      	adds	r3, r0, #1
 8003f0a:	d102      	bne.n	8003f12 <_read_r+0x1e>
 8003f0c:	682b      	ldr	r3, [r5, #0]
 8003f0e:	b103      	cbz	r3, 8003f12 <_read_r+0x1e>
 8003f10:	6023      	str	r3, [r4, #0]
 8003f12:	bd38      	pop	{r3, r4, r5, pc}
 8003f14:	20000414 	.word	0x20000414

08003f18 <_write_r>:
 8003f18:	b538      	push	{r3, r4, r5, lr}
 8003f1a:	4d07      	ldr	r5, [pc, #28]	@ (8003f38 <_write_r+0x20>)
 8003f1c:	4604      	mov	r4, r0
 8003f1e:	4608      	mov	r0, r1
 8003f20:	4611      	mov	r1, r2
 8003f22:	2200      	movs	r2, #0
 8003f24:	602a      	str	r2, [r5, #0]
 8003f26:	461a      	mov	r2, r3
 8003f28:	f7fd fa3c 	bl	80013a4 <_write>
 8003f2c:	1c43      	adds	r3, r0, #1
 8003f2e:	d102      	bne.n	8003f36 <_write_r+0x1e>
 8003f30:	682b      	ldr	r3, [r5, #0]
 8003f32:	b103      	cbz	r3, 8003f36 <_write_r+0x1e>
 8003f34:	6023      	str	r3, [r4, #0]
 8003f36:	bd38      	pop	{r3, r4, r5, pc}
 8003f38:	20000414 	.word	0x20000414

08003f3c <__errno>:
 8003f3c:	4b01      	ldr	r3, [pc, #4]	@ (8003f44 <__errno+0x8>)
 8003f3e:	6818      	ldr	r0, [r3, #0]
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	20000018 	.word	0x20000018

08003f48 <__libc_init_array>:
 8003f48:	b570      	push	{r4, r5, r6, lr}
 8003f4a:	4d0d      	ldr	r5, [pc, #52]	@ (8003f80 <__libc_init_array+0x38>)
 8003f4c:	4c0d      	ldr	r4, [pc, #52]	@ (8003f84 <__libc_init_array+0x3c>)
 8003f4e:	1b64      	subs	r4, r4, r5
 8003f50:	10a4      	asrs	r4, r4, #2
 8003f52:	2600      	movs	r6, #0
 8003f54:	42a6      	cmp	r6, r4
 8003f56:	d109      	bne.n	8003f6c <__libc_init_array+0x24>
 8003f58:	4d0b      	ldr	r5, [pc, #44]	@ (8003f88 <__libc_init_array+0x40>)
 8003f5a:	4c0c      	ldr	r4, [pc, #48]	@ (8003f8c <__libc_init_array+0x44>)
 8003f5c:	f002 f868 	bl	8006030 <_init>
 8003f60:	1b64      	subs	r4, r4, r5
 8003f62:	10a4      	asrs	r4, r4, #2
 8003f64:	2600      	movs	r6, #0
 8003f66:	42a6      	cmp	r6, r4
 8003f68:	d105      	bne.n	8003f76 <__libc_init_array+0x2e>
 8003f6a:	bd70      	pop	{r4, r5, r6, pc}
 8003f6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f70:	4798      	blx	r3
 8003f72:	3601      	adds	r6, #1
 8003f74:	e7ee      	b.n	8003f54 <__libc_init_array+0xc>
 8003f76:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f7a:	4798      	blx	r3
 8003f7c:	3601      	adds	r6, #1
 8003f7e:	e7f2      	b.n	8003f66 <__libc_init_array+0x1e>
 8003f80:	08006454 	.word	0x08006454
 8003f84:	08006454 	.word	0x08006454
 8003f88:	08006454 	.word	0x08006454
 8003f8c:	08006458 	.word	0x08006458

08003f90 <__retarget_lock_init_recursive>:
 8003f90:	4770      	bx	lr

08003f92 <__retarget_lock_acquire_recursive>:
 8003f92:	4770      	bx	lr

08003f94 <__retarget_lock_release_recursive>:
 8003f94:	4770      	bx	lr

08003f96 <quorem>:
 8003f96:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f9a:	6903      	ldr	r3, [r0, #16]
 8003f9c:	690c      	ldr	r4, [r1, #16]
 8003f9e:	42a3      	cmp	r3, r4
 8003fa0:	4607      	mov	r7, r0
 8003fa2:	db7e      	blt.n	80040a2 <quorem+0x10c>
 8003fa4:	3c01      	subs	r4, #1
 8003fa6:	f101 0814 	add.w	r8, r1, #20
 8003faa:	00a3      	lsls	r3, r4, #2
 8003fac:	f100 0514 	add.w	r5, r0, #20
 8003fb0:	9300      	str	r3, [sp, #0]
 8003fb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003fb6:	9301      	str	r3, [sp, #4]
 8003fb8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003fbc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003fc8:	fbb2 f6f3 	udiv	r6, r2, r3
 8003fcc:	d32e      	bcc.n	800402c <quorem+0x96>
 8003fce:	f04f 0a00 	mov.w	sl, #0
 8003fd2:	46c4      	mov	ip, r8
 8003fd4:	46ae      	mov	lr, r5
 8003fd6:	46d3      	mov	fp, sl
 8003fd8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003fdc:	b298      	uxth	r0, r3
 8003fde:	fb06 a000 	mla	r0, r6, r0, sl
 8003fe2:	0c02      	lsrs	r2, r0, #16
 8003fe4:	0c1b      	lsrs	r3, r3, #16
 8003fe6:	fb06 2303 	mla	r3, r6, r3, r2
 8003fea:	f8de 2000 	ldr.w	r2, [lr]
 8003fee:	b280      	uxth	r0, r0
 8003ff0:	b292      	uxth	r2, r2
 8003ff2:	1a12      	subs	r2, r2, r0
 8003ff4:	445a      	add	r2, fp
 8003ff6:	f8de 0000 	ldr.w	r0, [lr]
 8003ffa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004004:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004008:	b292      	uxth	r2, r2
 800400a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800400e:	45e1      	cmp	r9, ip
 8004010:	f84e 2b04 	str.w	r2, [lr], #4
 8004014:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004018:	d2de      	bcs.n	8003fd8 <quorem+0x42>
 800401a:	9b00      	ldr	r3, [sp, #0]
 800401c:	58eb      	ldr	r3, [r5, r3]
 800401e:	b92b      	cbnz	r3, 800402c <quorem+0x96>
 8004020:	9b01      	ldr	r3, [sp, #4]
 8004022:	3b04      	subs	r3, #4
 8004024:	429d      	cmp	r5, r3
 8004026:	461a      	mov	r2, r3
 8004028:	d32f      	bcc.n	800408a <quorem+0xf4>
 800402a:	613c      	str	r4, [r7, #16]
 800402c:	4638      	mov	r0, r7
 800402e:	f001 f97d 	bl	800532c <__mcmp>
 8004032:	2800      	cmp	r0, #0
 8004034:	db25      	blt.n	8004082 <quorem+0xec>
 8004036:	4629      	mov	r1, r5
 8004038:	2000      	movs	r0, #0
 800403a:	f858 2b04 	ldr.w	r2, [r8], #4
 800403e:	f8d1 c000 	ldr.w	ip, [r1]
 8004042:	fa1f fe82 	uxth.w	lr, r2
 8004046:	fa1f f38c 	uxth.w	r3, ip
 800404a:	eba3 030e 	sub.w	r3, r3, lr
 800404e:	4403      	add	r3, r0
 8004050:	0c12      	lsrs	r2, r2, #16
 8004052:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004056:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800405a:	b29b      	uxth	r3, r3
 800405c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004060:	45c1      	cmp	r9, r8
 8004062:	f841 3b04 	str.w	r3, [r1], #4
 8004066:	ea4f 4022 	mov.w	r0, r2, asr #16
 800406a:	d2e6      	bcs.n	800403a <quorem+0xa4>
 800406c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004070:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004074:	b922      	cbnz	r2, 8004080 <quorem+0xea>
 8004076:	3b04      	subs	r3, #4
 8004078:	429d      	cmp	r5, r3
 800407a:	461a      	mov	r2, r3
 800407c:	d30b      	bcc.n	8004096 <quorem+0x100>
 800407e:	613c      	str	r4, [r7, #16]
 8004080:	3601      	adds	r6, #1
 8004082:	4630      	mov	r0, r6
 8004084:	b003      	add	sp, #12
 8004086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800408a:	6812      	ldr	r2, [r2, #0]
 800408c:	3b04      	subs	r3, #4
 800408e:	2a00      	cmp	r2, #0
 8004090:	d1cb      	bne.n	800402a <quorem+0x94>
 8004092:	3c01      	subs	r4, #1
 8004094:	e7c6      	b.n	8004024 <quorem+0x8e>
 8004096:	6812      	ldr	r2, [r2, #0]
 8004098:	3b04      	subs	r3, #4
 800409a:	2a00      	cmp	r2, #0
 800409c:	d1ef      	bne.n	800407e <quorem+0xe8>
 800409e:	3c01      	subs	r4, #1
 80040a0:	e7ea      	b.n	8004078 <quorem+0xe2>
 80040a2:	2000      	movs	r0, #0
 80040a4:	e7ee      	b.n	8004084 <quorem+0xee>
	...

080040a8 <_dtoa_r>:
 80040a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040ac:	69c7      	ldr	r7, [r0, #28]
 80040ae:	b097      	sub	sp, #92	@ 0x5c
 80040b0:	ed8d 0b04 	vstr	d0, [sp, #16]
 80040b4:	ec55 4b10 	vmov	r4, r5, d0
 80040b8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80040ba:	9107      	str	r1, [sp, #28]
 80040bc:	4681      	mov	r9, r0
 80040be:	920c      	str	r2, [sp, #48]	@ 0x30
 80040c0:	9311      	str	r3, [sp, #68]	@ 0x44
 80040c2:	b97f      	cbnz	r7, 80040e4 <_dtoa_r+0x3c>
 80040c4:	2010      	movs	r0, #16
 80040c6:	f000 fe09 	bl	8004cdc <malloc>
 80040ca:	4602      	mov	r2, r0
 80040cc:	f8c9 001c 	str.w	r0, [r9, #28]
 80040d0:	b920      	cbnz	r0, 80040dc <_dtoa_r+0x34>
 80040d2:	4ba9      	ldr	r3, [pc, #676]	@ (8004378 <_dtoa_r+0x2d0>)
 80040d4:	21ef      	movs	r1, #239	@ 0xef
 80040d6:	48a9      	ldr	r0, [pc, #676]	@ (800437c <_dtoa_r+0x2d4>)
 80040d8:	f001 fc6c 	bl	80059b4 <__assert_func>
 80040dc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80040e0:	6007      	str	r7, [r0, #0]
 80040e2:	60c7      	str	r7, [r0, #12]
 80040e4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80040e8:	6819      	ldr	r1, [r3, #0]
 80040ea:	b159      	cbz	r1, 8004104 <_dtoa_r+0x5c>
 80040ec:	685a      	ldr	r2, [r3, #4]
 80040ee:	604a      	str	r2, [r1, #4]
 80040f0:	2301      	movs	r3, #1
 80040f2:	4093      	lsls	r3, r2
 80040f4:	608b      	str	r3, [r1, #8]
 80040f6:	4648      	mov	r0, r9
 80040f8:	f000 fee6 	bl	8004ec8 <_Bfree>
 80040fc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004100:	2200      	movs	r2, #0
 8004102:	601a      	str	r2, [r3, #0]
 8004104:	1e2b      	subs	r3, r5, #0
 8004106:	bfb9      	ittee	lt
 8004108:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800410c:	9305      	strlt	r3, [sp, #20]
 800410e:	2300      	movge	r3, #0
 8004110:	6033      	strge	r3, [r6, #0]
 8004112:	9f05      	ldr	r7, [sp, #20]
 8004114:	4b9a      	ldr	r3, [pc, #616]	@ (8004380 <_dtoa_r+0x2d8>)
 8004116:	bfbc      	itt	lt
 8004118:	2201      	movlt	r2, #1
 800411a:	6032      	strlt	r2, [r6, #0]
 800411c:	43bb      	bics	r3, r7
 800411e:	d112      	bne.n	8004146 <_dtoa_r+0x9e>
 8004120:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8004122:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004126:	6013      	str	r3, [r2, #0]
 8004128:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800412c:	4323      	orrs	r3, r4
 800412e:	f000 855a 	beq.w	8004be6 <_dtoa_r+0xb3e>
 8004132:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004134:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8004394 <_dtoa_r+0x2ec>
 8004138:	2b00      	cmp	r3, #0
 800413a:	f000 855c 	beq.w	8004bf6 <_dtoa_r+0xb4e>
 800413e:	f10a 0303 	add.w	r3, sl, #3
 8004142:	f000 bd56 	b.w	8004bf2 <_dtoa_r+0xb4a>
 8004146:	ed9d 7b04 	vldr	d7, [sp, #16]
 800414a:	2200      	movs	r2, #0
 800414c:	ec51 0b17 	vmov	r0, r1, d7
 8004150:	2300      	movs	r3, #0
 8004152:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8004156:	f7fc fcbf 	bl	8000ad8 <__aeabi_dcmpeq>
 800415a:	4680      	mov	r8, r0
 800415c:	b158      	cbz	r0, 8004176 <_dtoa_r+0xce>
 800415e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8004160:	2301      	movs	r3, #1
 8004162:	6013      	str	r3, [r2, #0]
 8004164:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004166:	b113      	cbz	r3, 800416e <_dtoa_r+0xc6>
 8004168:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800416a:	4b86      	ldr	r3, [pc, #536]	@ (8004384 <_dtoa_r+0x2dc>)
 800416c:	6013      	str	r3, [r2, #0]
 800416e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8004398 <_dtoa_r+0x2f0>
 8004172:	f000 bd40 	b.w	8004bf6 <_dtoa_r+0xb4e>
 8004176:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800417a:	aa14      	add	r2, sp, #80	@ 0x50
 800417c:	a915      	add	r1, sp, #84	@ 0x54
 800417e:	4648      	mov	r0, r9
 8004180:	f001 f984 	bl	800548c <__d2b>
 8004184:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8004188:	9002      	str	r0, [sp, #8]
 800418a:	2e00      	cmp	r6, #0
 800418c:	d078      	beq.n	8004280 <_dtoa_r+0x1d8>
 800418e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004190:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8004194:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004198:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800419c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80041a0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80041a4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80041a8:	4619      	mov	r1, r3
 80041aa:	2200      	movs	r2, #0
 80041ac:	4b76      	ldr	r3, [pc, #472]	@ (8004388 <_dtoa_r+0x2e0>)
 80041ae:	f7fc f873 	bl	8000298 <__aeabi_dsub>
 80041b2:	a36b      	add	r3, pc, #428	@ (adr r3, 8004360 <_dtoa_r+0x2b8>)
 80041b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b8:	f7fc fa26 	bl	8000608 <__aeabi_dmul>
 80041bc:	a36a      	add	r3, pc, #424	@ (adr r3, 8004368 <_dtoa_r+0x2c0>)
 80041be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c2:	f7fc f86b 	bl	800029c <__adddf3>
 80041c6:	4604      	mov	r4, r0
 80041c8:	4630      	mov	r0, r6
 80041ca:	460d      	mov	r5, r1
 80041cc:	f7fc f9b2 	bl	8000534 <__aeabi_i2d>
 80041d0:	a367      	add	r3, pc, #412	@ (adr r3, 8004370 <_dtoa_r+0x2c8>)
 80041d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d6:	f7fc fa17 	bl	8000608 <__aeabi_dmul>
 80041da:	4602      	mov	r2, r0
 80041dc:	460b      	mov	r3, r1
 80041de:	4620      	mov	r0, r4
 80041e0:	4629      	mov	r1, r5
 80041e2:	f7fc f85b 	bl	800029c <__adddf3>
 80041e6:	4604      	mov	r4, r0
 80041e8:	460d      	mov	r5, r1
 80041ea:	f7fc fcbd 	bl	8000b68 <__aeabi_d2iz>
 80041ee:	2200      	movs	r2, #0
 80041f0:	4607      	mov	r7, r0
 80041f2:	2300      	movs	r3, #0
 80041f4:	4620      	mov	r0, r4
 80041f6:	4629      	mov	r1, r5
 80041f8:	f7fc fc78 	bl	8000aec <__aeabi_dcmplt>
 80041fc:	b140      	cbz	r0, 8004210 <_dtoa_r+0x168>
 80041fe:	4638      	mov	r0, r7
 8004200:	f7fc f998 	bl	8000534 <__aeabi_i2d>
 8004204:	4622      	mov	r2, r4
 8004206:	462b      	mov	r3, r5
 8004208:	f7fc fc66 	bl	8000ad8 <__aeabi_dcmpeq>
 800420c:	b900      	cbnz	r0, 8004210 <_dtoa_r+0x168>
 800420e:	3f01      	subs	r7, #1
 8004210:	2f16      	cmp	r7, #22
 8004212:	d852      	bhi.n	80042ba <_dtoa_r+0x212>
 8004214:	4b5d      	ldr	r3, [pc, #372]	@ (800438c <_dtoa_r+0x2e4>)
 8004216:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800421a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800421e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004222:	f7fc fc63 	bl	8000aec <__aeabi_dcmplt>
 8004226:	2800      	cmp	r0, #0
 8004228:	d049      	beq.n	80042be <_dtoa_r+0x216>
 800422a:	3f01      	subs	r7, #1
 800422c:	2300      	movs	r3, #0
 800422e:	9310      	str	r3, [sp, #64]	@ 0x40
 8004230:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004232:	1b9b      	subs	r3, r3, r6
 8004234:	1e5a      	subs	r2, r3, #1
 8004236:	bf45      	ittet	mi
 8004238:	f1c3 0301 	rsbmi	r3, r3, #1
 800423c:	9300      	strmi	r3, [sp, #0]
 800423e:	2300      	movpl	r3, #0
 8004240:	2300      	movmi	r3, #0
 8004242:	9206      	str	r2, [sp, #24]
 8004244:	bf54      	ite	pl
 8004246:	9300      	strpl	r3, [sp, #0]
 8004248:	9306      	strmi	r3, [sp, #24]
 800424a:	2f00      	cmp	r7, #0
 800424c:	db39      	blt.n	80042c2 <_dtoa_r+0x21a>
 800424e:	9b06      	ldr	r3, [sp, #24]
 8004250:	970d      	str	r7, [sp, #52]	@ 0x34
 8004252:	443b      	add	r3, r7
 8004254:	9306      	str	r3, [sp, #24]
 8004256:	2300      	movs	r3, #0
 8004258:	9308      	str	r3, [sp, #32]
 800425a:	9b07      	ldr	r3, [sp, #28]
 800425c:	2b09      	cmp	r3, #9
 800425e:	d863      	bhi.n	8004328 <_dtoa_r+0x280>
 8004260:	2b05      	cmp	r3, #5
 8004262:	bfc4      	itt	gt
 8004264:	3b04      	subgt	r3, #4
 8004266:	9307      	strgt	r3, [sp, #28]
 8004268:	9b07      	ldr	r3, [sp, #28]
 800426a:	f1a3 0302 	sub.w	r3, r3, #2
 800426e:	bfcc      	ite	gt
 8004270:	2400      	movgt	r4, #0
 8004272:	2401      	movle	r4, #1
 8004274:	2b03      	cmp	r3, #3
 8004276:	d863      	bhi.n	8004340 <_dtoa_r+0x298>
 8004278:	e8df f003 	tbb	[pc, r3]
 800427c:	2b375452 	.word	0x2b375452
 8004280:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8004284:	441e      	add	r6, r3
 8004286:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800428a:	2b20      	cmp	r3, #32
 800428c:	bfc1      	itttt	gt
 800428e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004292:	409f      	lslgt	r7, r3
 8004294:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004298:	fa24 f303 	lsrgt.w	r3, r4, r3
 800429c:	bfd6      	itet	le
 800429e:	f1c3 0320 	rsble	r3, r3, #32
 80042a2:	ea47 0003 	orrgt.w	r0, r7, r3
 80042a6:	fa04 f003 	lslle.w	r0, r4, r3
 80042aa:	f7fc f933 	bl	8000514 <__aeabi_ui2d>
 80042ae:	2201      	movs	r2, #1
 80042b0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80042b4:	3e01      	subs	r6, #1
 80042b6:	9212      	str	r2, [sp, #72]	@ 0x48
 80042b8:	e776      	b.n	80041a8 <_dtoa_r+0x100>
 80042ba:	2301      	movs	r3, #1
 80042bc:	e7b7      	b.n	800422e <_dtoa_r+0x186>
 80042be:	9010      	str	r0, [sp, #64]	@ 0x40
 80042c0:	e7b6      	b.n	8004230 <_dtoa_r+0x188>
 80042c2:	9b00      	ldr	r3, [sp, #0]
 80042c4:	1bdb      	subs	r3, r3, r7
 80042c6:	9300      	str	r3, [sp, #0]
 80042c8:	427b      	negs	r3, r7
 80042ca:	9308      	str	r3, [sp, #32]
 80042cc:	2300      	movs	r3, #0
 80042ce:	930d      	str	r3, [sp, #52]	@ 0x34
 80042d0:	e7c3      	b.n	800425a <_dtoa_r+0x1b2>
 80042d2:	2301      	movs	r3, #1
 80042d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80042d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80042d8:	eb07 0b03 	add.w	fp, r7, r3
 80042dc:	f10b 0301 	add.w	r3, fp, #1
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	9303      	str	r3, [sp, #12]
 80042e4:	bfb8      	it	lt
 80042e6:	2301      	movlt	r3, #1
 80042e8:	e006      	b.n	80042f8 <_dtoa_r+0x250>
 80042ea:	2301      	movs	r3, #1
 80042ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80042ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	dd28      	ble.n	8004346 <_dtoa_r+0x29e>
 80042f4:	469b      	mov	fp, r3
 80042f6:	9303      	str	r3, [sp, #12]
 80042f8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80042fc:	2100      	movs	r1, #0
 80042fe:	2204      	movs	r2, #4
 8004300:	f102 0514 	add.w	r5, r2, #20
 8004304:	429d      	cmp	r5, r3
 8004306:	d926      	bls.n	8004356 <_dtoa_r+0x2ae>
 8004308:	6041      	str	r1, [r0, #4]
 800430a:	4648      	mov	r0, r9
 800430c:	f000 fd9c 	bl	8004e48 <_Balloc>
 8004310:	4682      	mov	sl, r0
 8004312:	2800      	cmp	r0, #0
 8004314:	d142      	bne.n	800439c <_dtoa_r+0x2f4>
 8004316:	4b1e      	ldr	r3, [pc, #120]	@ (8004390 <_dtoa_r+0x2e8>)
 8004318:	4602      	mov	r2, r0
 800431a:	f240 11af 	movw	r1, #431	@ 0x1af
 800431e:	e6da      	b.n	80040d6 <_dtoa_r+0x2e>
 8004320:	2300      	movs	r3, #0
 8004322:	e7e3      	b.n	80042ec <_dtoa_r+0x244>
 8004324:	2300      	movs	r3, #0
 8004326:	e7d5      	b.n	80042d4 <_dtoa_r+0x22c>
 8004328:	2401      	movs	r4, #1
 800432a:	2300      	movs	r3, #0
 800432c:	9307      	str	r3, [sp, #28]
 800432e:	9409      	str	r4, [sp, #36]	@ 0x24
 8004330:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8004334:	2200      	movs	r2, #0
 8004336:	f8cd b00c 	str.w	fp, [sp, #12]
 800433a:	2312      	movs	r3, #18
 800433c:	920c      	str	r2, [sp, #48]	@ 0x30
 800433e:	e7db      	b.n	80042f8 <_dtoa_r+0x250>
 8004340:	2301      	movs	r3, #1
 8004342:	9309      	str	r3, [sp, #36]	@ 0x24
 8004344:	e7f4      	b.n	8004330 <_dtoa_r+0x288>
 8004346:	f04f 0b01 	mov.w	fp, #1
 800434a:	f8cd b00c 	str.w	fp, [sp, #12]
 800434e:	465b      	mov	r3, fp
 8004350:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8004354:	e7d0      	b.n	80042f8 <_dtoa_r+0x250>
 8004356:	3101      	adds	r1, #1
 8004358:	0052      	lsls	r2, r2, #1
 800435a:	e7d1      	b.n	8004300 <_dtoa_r+0x258>
 800435c:	f3af 8000 	nop.w
 8004360:	636f4361 	.word	0x636f4361
 8004364:	3fd287a7 	.word	0x3fd287a7
 8004368:	8b60c8b3 	.word	0x8b60c8b3
 800436c:	3fc68a28 	.word	0x3fc68a28
 8004370:	509f79fb 	.word	0x509f79fb
 8004374:	3fd34413 	.word	0x3fd34413
 8004378:	08006115 	.word	0x08006115
 800437c:	0800612c 	.word	0x0800612c
 8004380:	7ff00000 	.word	0x7ff00000
 8004384:	080060e5 	.word	0x080060e5
 8004388:	3ff80000 	.word	0x3ff80000
 800438c:	08006280 	.word	0x08006280
 8004390:	08006184 	.word	0x08006184
 8004394:	08006111 	.word	0x08006111
 8004398:	080060e4 	.word	0x080060e4
 800439c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80043a0:	6018      	str	r0, [r3, #0]
 80043a2:	9b03      	ldr	r3, [sp, #12]
 80043a4:	2b0e      	cmp	r3, #14
 80043a6:	f200 80a1 	bhi.w	80044ec <_dtoa_r+0x444>
 80043aa:	2c00      	cmp	r4, #0
 80043ac:	f000 809e 	beq.w	80044ec <_dtoa_r+0x444>
 80043b0:	2f00      	cmp	r7, #0
 80043b2:	dd33      	ble.n	800441c <_dtoa_r+0x374>
 80043b4:	4b9c      	ldr	r3, [pc, #624]	@ (8004628 <_dtoa_r+0x580>)
 80043b6:	f007 020f 	and.w	r2, r7, #15
 80043ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80043be:	ed93 7b00 	vldr	d7, [r3]
 80043c2:	05f8      	lsls	r0, r7, #23
 80043c4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80043c8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80043cc:	d516      	bpl.n	80043fc <_dtoa_r+0x354>
 80043ce:	4b97      	ldr	r3, [pc, #604]	@ (800462c <_dtoa_r+0x584>)
 80043d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80043d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80043d8:	f7fc fa40 	bl	800085c <__aeabi_ddiv>
 80043dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80043e0:	f004 040f 	and.w	r4, r4, #15
 80043e4:	2603      	movs	r6, #3
 80043e6:	4d91      	ldr	r5, [pc, #580]	@ (800462c <_dtoa_r+0x584>)
 80043e8:	b954      	cbnz	r4, 8004400 <_dtoa_r+0x358>
 80043ea:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80043ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80043f2:	f7fc fa33 	bl	800085c <__aeabi_ddiv>
 80043f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80043fa:	e028      	b.n	800444e <_dtoa_r+0x3a6>
 80043fc:	2602      	movs	r6, #2
 80043fe:	e7f2      	b.n	80043e6 <_dtoa_r+0x33e>
 8004400:	07e1      	lsls	r1, r4, #31
 8004402:	d508      	bpl.n	8004416 <_dtoa_r+0x36e>
 8004404:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8004408:	e9d5 2300 	ldrd	r2, r3, [r5]
 800440c:	f7fc f8fc 	bl	8000608 <__aeabi_dmul>
 8004410:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8004414:	3601      	adds	r6, #1
 8004416:	1064      	asrs	r4, r4, #1
 8004418:	3508      	adds	r5, #8
 800441a:	e7e5      	b.n	80043e8 <_dtoa_r+0x340>
 800441c:	f000 80af 	beq.w	800457e <_dtoa_r+0x4d6>
 8004420:	427c      	negs	r4, r7
 8004422:	4b81      	ldr	r3, [pc, #516]	@ (8004628 <_dtoa_r+0x580>)
 8004424:	4d81      	ldr	r5, [pc, #516]	@ (800462c <_dtoa_r+0x584>)
 8004426:	f004 020f 	and.w	r2, r4, #15
 800442a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800442e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004432:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004436:	f7fc f8e7 	bl	8000608 <__aeabi_dmul>
 800443a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800443e:	1124      	asrs	r4, r4, #4
 8004440:	2300      	movs	r3, #0
 8004442:	2602      	movs	r6, #2
 8004444:	2c00      	cmp	r4, #0
 8004446:	f040 808f 	bne.w	8004568 <_dtoa_r+0x4c0>
 800444a:	2b00      	cmp	r3, #0
 800444c:	d1d3      	bne.n	80043f6 <_dtoa_r+0x34e>
 800444e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004450:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8004454:	2b00      	cmp	r3, #0
 8004456:	f000 8094 	beq.w	8004582 <_dtoa_r+0x4da>
 800445a:	4b75      	ldr	r3, [pc, #468]	@ (8004630 <_dtoa_r+0x588>)
 800445c:	2200      	movs	r2, #0
 800445e:	4620      	mov	r0, r4
 8004460:	4629      	mov	r1, r5
 8004462:	f7fc fb43 	bl	8000aec <__aeabi_dcmplt>
 8004466:	2800      	cmp	r0, #0
 8004468:	f000 808b 	beq.w	8004582 <_dtoa_r+0x4da>
 800446c:	9b03      	ldr	r3, [sp, #12]
 800446e:	2b00      	cmp	r3, #0
 8004470:	f000 8087 	beq.w	8004582 <_dtoa_r+0x4da>
 8004474:	f1bb 0f00 	cmp.w	fp, #0
 8004478:	dd34      	ble.n	80044e4 <_dtoa_r+0x43c>
 800447a:	4620      	mov	r0, r4
 800447c:	4b6d      	ldr	r3, [pc, #436]	@ (8004634 <_dtoa_r+0x58c>)
 800447e:	2200      	movs	r2, #0
 8004480:	4629      	mov	r1, r5
 8004482:	f7fc f8c1 	bl	8000608 <__aeabi_dmul>
 8004486:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800448a:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800448e:	3601      	adds	r6, #1
 8004490:	465c      	mov	r4, fp
 8004492:	4630      	mov	r0, r6
 8004494:	f7fc f84e 	bl	8000534 <__aeabi_i2d>
 8004498:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800449c:	f7fc f8b4 	bl	8000608 <__aeabi_dmul>
 80044a0:	4b65      	ldr	r3, [pc, #404]	@ (8004638 <_dtoa_r+0x590>)
 80044a2:	2200      	movs	r2, #0
 80044a4:	f7fb fefa 	bl	800029c <__adddf3>
 80044a8:	4605      	mov	r5, r0
 80044aa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80044ae:	2c00      	cmp	r4, #0
 80044b0:	d16a      	bne.n	8004588 <_dtoa_r+0x4e0>
 80044b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80044b6:	4b61      	ldr	r3, [pc, #388]	@ (800463c <_dtoa_r+0x594>)
 80044b8:	2200      	movs	r2, #0
 80044ba:	f7fb feed 	bl	8000298 <__aeabi_dsub>
 80044be:	4602      	mov	r2, r0
 80044c0:	460b      	mov	r3, r1
 80044c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80044c6:	462a      	mov	r2, r5
 80044c8:	4633      	mov	r3, r6
 80044ca:	f7fc fb2d 	bl	8000b28 <__aeabi_dcmpgt>
 80044ce:	2800      	cmp	r0, #0
 80044d0:	f040 8298 	bne.w	8004a04 <_dtoa_r+0x95c>
 80044d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80044d8:	462a      	mov	r2, r5
 80044da:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80044de:	f7fc fb05 	bl	8000aec <__aeabi_dcmplt>
 80044e2:	bb38      	cbnz	r0, 8004534 <_dtoa_r+0x48c>
 80044e4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80044e8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80044ec:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	f2c0 8157 	blt.w	80047a2 <_dtoa_r+0x6fa>
 80044f4:	2f0e      	cmp	r7, #14
 80044f6:	f300 8154 	bgt.w	80047a2 <_dtoa_r+0x6fa>
 80044fa:	4b4b      	ldr	r3, [pc, #300]	@ (8004628 <_dtoa_r+0x580>)
 80044fc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004500:	ed93 7b00 	vldr	d7, [r3]
 8004504:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004506:	2b00      	cmp	r3, #0
 8004508:	ed8d 7b00 	vstr	d7, [sp]
 800450c:	f280 80e5 	bge.w	80046da <_dtoa_r+0x632>
 8004510:	9b03      	ldr	r3, [sp, #12]
 8004512:	2b00      	cmp	r3, #0
 8004514:	f300 80e1 	bgt.w	80046da <_dtoa_r+0x632>
 8004518:	d10c      	bne.n	8004534 <_dtoa_r+0x48c>
 800451a:	4b48      	ldr	r3, [pc, #288]	@ (800463c <_dtoa_r+0x594>)
 800451c:	2200      	movs	r2, #0
 800451e:	ec51 0b17 	vmov	r0, r1, d7
 8004522:	f7fc f871 	bl	8000608 <__aeabi_dmul>
 8004526:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800452a:	f7fc faf3 	bl	8000b14 <__aeabi_dcmpge>
 800452e:	2800      	cmp	r0, #0
 8004530:	f000 8266 	beq.w	8004a00 <_dtoa_r+0x958>
 8004534:	2400      	movs	r4, #0
 8004536:	4625      	mov	r5, r4
 8004538:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800453a:	4656      	mov	r6, sl
 800453c:	ea6f 0803 	mvn.w	r8, r3
 8004540:	2700      	movs	r7, #0
 8004542:	4621      	mov	r1, r4
 8004544:	4648      	mov	r0, r9
 8004546:	f000 fcbf 	bl	8004ec8 <_Bfree>
 800454a:	2d00      	cmp	r5, #0
 800454c:	f000 80bd 	beq.w	80046ca <_dtoa_r+0x622>
 8004550:	b12f      	cbz	r7, 800455e <_dtoa_r+0x4b6>
 8004552:	42af      	cmp	r7, r5
 8004554:	d003      	beq.n	800455e <_dtoa_r+0x4b6>
 8004556:	4639      	mov	r1, r7
 8004558:	4648      	mov	r0, r9
 800455a:	f000 fcb5 	bl	8004ec8 <_Bfree>
 800455e:	4629      	mov	r1, r5
 8004560:	4648      	mov	r0, r9
 8004562:	f000 fcb1 	bl	8004ec8 <_Bfree>
 8004566:	e0b0      	b.n	80046ca <_dtoa_r+0x622>
 8004568:	07e2      	lsls	r2, r4, #31
 800456a:	d505      	bpl.n	8004578 <_dtoa_r+0x4d0>
 800456c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004570:	f7fc f84a 	bl	8000608 <__aeabi_dmul>
 8004574:	3601      	adds	r6, #1
 8004576:	2301      	movs	r3, #1
 8004578:	1064      	asrs	r4, r4, #1
 800457a:	3508      	adds	r5, #8
 800457c:	e762      	b.n	8004444 <_dtoa_r+0x39c>
 800457e:	2602      	movs	r6, #2
 8004580:	e765      	b.n	800444e <_dtoa_r+0x3a6>
 8004582:	9c03      	ldr	r4, [sp, #12]
 8004584:	46b8      	mov	r8, r7
 8004586:	e784      	b.n	8004492 <_dtoa_r+0x3ea>
 8004588:	4b27      	ldr	r3, [pc, #156]	@ (8004628 <_dtoa_r+0x580>)
 800458a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800458c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004590:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004594:	4454      	add	r4, sl
 8004596:	2900      	cmp	r1, #0
 8004598:	d054      	beq.n	8004644 <_dtoa_r+0x59c>
 800459a:	4929      	ldr	r1, [pc, #164]	@ (8004640 <_dtoa_r+0x598>)
 800459c:	2000      	movs	r0, #0
 800459e:	f7fc f95d 	bl	800085c <__aeabi_ddiv>
 80045a2:	4633      	mov	r3, r6
 80045a4:	462a      	mov	r2, r5
 80045a6:	f7fb fe77 	bl	8000298 <__aeabi_dsub>
 80045aa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80045ae:	4656      	mov	r6, sl
 80045b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80045b4:	f7fc fad8 	bl	8000b68 <__aeabi_d2iz>
 80045b8:	4605      	mov	r5, r0
 80045ba:	f7fb ffbb 	bl	8000534 <__aeabi_i2d>
 80045be:	4602      	mov	r2, r0
 80045c0:	460b      	mov	r3, r1
 80045c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80045c6:	f7fb fe67 	bl	8000298 <__aeabi_dsub>
 80045ca:	3530      	adds	r5, #48	@ 0x30
 80045cc:	4602      	mov	r2, r0
 80045ce:	460b      	mov	r3, r1
 80045d0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80045d4:	f806 5b01 	strb.w	r5, [r6], #1
 80045d8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80045dc:	f7fc fa86 	bl	8000aec <__aeabi_dcmplt>
 80045e0:	2800      	cmp	r0, #0
 80045e2:	d172      	bne.n	80046ca <_dtoa_r+0x622>
 80045e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80045e8:	4911      	ldr	r1, [pc, #68]	@ (8004630 <_dtoa_r+0x588>)
 80045ea:	2000      	movs	r0, #0
 80045ec:	f7fb fe54 	bl	8000298 <__aeabi_dsub>
 80045f0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80045f4:	f7fc fa7a 	bl	8000aec <__aeabi_dcmplt>
 80045f8:	2800      	cmp	r0, #0
 80045fa:	f040 80b4 	bne.w	8004766 <_dtoa_r+0x6be>
 80045fe:	42a6      	cmp	r6, r4
 8004600:	f43f af70 	beq.w	80044e4 <_dtoa_r+0x43c>
 8004604:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8004608:	4b0a      	ldr	r3, [pc, #40]	@ (8004634 <_dtoa_r+0x58c>)
 800460a:	2200      	movs	r2, #0
 800460c:	f7fb fffc 	bl	8000608 <__aeabi_dmul>
 8004610:	4b08      	ldr	r3, [pc, #32]	@ (8004634 <_dtoa_r+0x58c>)
 8004612:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8004616:	2200      	movs	r2, #0
 8004618:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800461c:	f7fb fff4 	bl	8000608 <__aeabi_dmul>
 8004620:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004624:	e7c4      	b.n	80045b0 <_dtoa_r+0x508>
 8004626:	bf00      	nop
 8004628:	08006280 	.word	0x08006280
 800462c:	08006258 	.word	0x08006258
 8004630:	3ff00000 	.word	0x3ff00000
 8004634:	40240000 	.word	0x40240000
 8004638:	401c0000 	.word	0x401c0000
 800463c:	40140000 	.word	0x40140000
 8004640:	3fe00000 	.word	0x3fe00000
 8004644:	4631      	mov	r1, r6
 8004646:	4628      	mov	r0, r5
 8004648:	f7fb ffde 	bl	8000608 <__aeabi_dmul>
 800464c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8004650:	9413      	str	r4, [sp, #76]	@ 0x4c
 8004652:	4656      	mov	r6, sl
 8004654:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004658:	f7fc fa86 	bl	8000b68 <__aeabi_d2iz>
 800465c:	4605      	mov	r5, r0
 800465e:	f7fb ff69 	bl	8000534 <__aeabi_i2d>
 8004662:	4602      	mov	r2, r0
 8004664:	460b      	mov	r3, r1
 8004666:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800466a:	f7fb fe15 	bl	8000298 <__aeabi_dsub>
 800466e:	3530      	adds	r5, #48	@ 0x30
 8004670:	f806 5b01 	strb.w	r5, [r6], #1
 8004674:	4602      	mov	r2, r0
 8004676:	460b      	mov	r3, r1
 8004678:	42a6      	cmp	r6, r4
 800467a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800467e:	f04f 0200 	mov.w	r2, #0
 8004682:	d124      	bne.n	80046ce <_dtoa_r+0x626>
 8004684:	4baf      	ldr	r3, [pc, #700]	@ (8004944 <_dtoa_r+0x89c>)
 8004686:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800468a:	f7fb fe07 	bl	800029c <__adddf3>
 800468e:	4602      	mov	r2, r0
 8004690:	460b      	mov	r3, r1
 8004692:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004696:	f7fc fa47 	bl	8000b28 <__aeabi_dcmpgt>
 800469a:	2800      	cmp	r0, #0
 800469c:	d163      	bne.n	8004766 <_dtoa_r+0x6be>
 800469e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80046a2:	49a8      	ldr	r1, [pc, #672]	@ (8004944 <_dtoa_r+0x89c>)
 80046a4:	2000      	movs	r0, #0
 80046a6:	f7fb fdf7 	bl	8000298 <__aeabi_dsub>
 80046aa:	4602      	mov	r2, r0
 80046ac:	460b      	mov	r3, r1
 80046ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80046b2:	f7fc fa1b 	bl	8000aec <__aeabi_dcmplt>
 80046b6:	2800      	cmp	r0, #0
 80046b8:	f43f af14 	beq.w	80044e4 <_dtoa_r+0x43c>
 80046bc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80046be:	1e73      	subs	r3, r6, #1
 80046c0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80046c2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80046c6:	2b30      	cmp	r3, #48	@ 0x30
 80046c8:	d0f8      	beq.n	80046bc <_dtoa_r+0x614>
 80046ca:	4647      	mov	r7, r8
 80046cc:	e03b      	b.n	8004746 <_dtoa_r+0x69e>
 80046ce:	4b9e      	ldr	r3, [pc, #632]	@ (8004948 <_dtoa_r+0x8a0>)
 80046d0:	f7fb ff9a 	bl	8000608 <__aeabi_dmul>
 80046d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80046d8:	e7bc      	b.n	8004654 <_dtoa_r+0x5ac>
 80046da:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80046de:	4656      	mov	r6, sl
 80046e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80046e4:	4620      	mov	r0, r4
 80046e6:	4629      	mov	r1, r5
 80046e8:	f7fc f8b8 	bl	800085c <__aeabi_ddiv>
 80046ec:	f7fc fa3c 	bl	8000b68 <__aeabi_d2iz>
 80046f0:	4680      	mov	r8, r0
 80046f2:	f7fb ff1f 	bl	8000534 <__aeabi_i2d>
 80046f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80046fa:	f7fb ff85 	bl	8000608 <__aeabi_dmul>
 80046fe:	4602      	mov	r2, r0
 8004700:	460b      	mov	r3, r1
 8004702:	4620      	mov	r0, r4
 8004704:	4629      	mov	r1, r5
 8004706:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800470a:	f7fb fdc5 	bl	8000298 <__aeabi_dsub>
 800470e:	f806 4b01 	strb.w	r4, [r6], #1
 8004712:	9d03      	ldr	r5, [sp, #12]
 8004714:	eba6 040a 	sub.w	r4, r6, sl
 8004718:	42a5      	cmp	r5, r4
 800471a:	4602      	mov	r2, r0
 800471c:	460b      	mov	r3, r1
 800471e:	d133      	bne.n	8004788 <_dtoa_r+0x6e0>
 8004720:	f7fb fdbc 	bl	800029c <__adddf3>
 8004724:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004728:	4604      	mov	r4, r0
 800472a:	460d      	mov	r5, r1
 800472c:	f7fc f9fc 	bl	8000b28 <__aeabi_dcmpgt>
 8004730:	b9c0      	cbnz	r0, 8004764 <_dtoa_r+0x6bc>
 8004732:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004736:	4620      	mov	r0, r4
 8004738:	4629      	mov	r1, r5
 800473a:	f7fc f9cd 	bl	8000ad8 <__aeabi_dcmpeq>
 800473e:	b110      	cbz	r0, 8004746 <_dtoa_r+0x69e>
 8004740:	f018 0f01 	tst.w	r8, #1
 8004744:	d10e      	bne.n	8004764 <_dtoa_r+0x6bc>
 8004746:	9902      	ldr	r1, [sp, #8]
 8004748:	4648      	mov	r0, r9
 800474a:	f000 fbbd 	bl	8004ec8 <_Bfree>
 800474e:	2300      	movs	r3, #0
 8004750:	7033      	strb	r3, [r6, #0]
 8004752:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004754:	3701      	adds	r7, #1
 8004756:	601f      	str	r7, [r3, #0]
 8004758:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800475a:	2b00      	cmp	r3, #0
 800475c:	f000 824b 	beq.w	8004bf6 <_dtoa_r+0xb4e>
 8004760:	601e      	str	r6, [r3, #0]
 8004762:	e248      	b.n	8004bf6 <_dtoa_r+0xb4e>
 8004764:	46b8      	mov	r8, r7
 8004766:	4633      	mov	r3, r6
 8004768:	461e      	mov	r6, r3
 800476a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800476e:	2a39      	cmp	r2, #57	@ 0x39
 8004770:	d106      	bne.n	8004780 <_dtoa_r+0x6d8>
 8004772:	459a      	cmp	sl, r3
 8004774:	d1f8      	bne.n	8004768 <_dtoa_r+0x6c0>
 8004776:	2230      	movs	r2, #48	@ 0x30
 8004778:	f108 0801 	add.w	r8, r8, #1
 800477c:	f88a 2000 	strb.w	r2, [sl]
 8004780:	781a      	ldrb	r2, [r3, #0]
 8004782:	3201      	adds	r2, #1
 8004784:	701a      	strb	r2, [r3, #0]
 8004786:	e7a0      	b.n	80046ca <_dtoa_r+0x622>
 8004788:	4b6f      	ldr	r3, [pc, #444]	@ (8004948 <_dtoa_r+0x8a0>)
 800478a:	2200      	movs	r2, #0
 800478c:	f7fb ff3c 	bl	8000608 <__aeabi_dmul>
 8004790:	2200      	movs	r2, #0
 8004792:	2300      	movs	r3, #0
 8004794:	4604      	mov	r4, r0
 8004796:	460d      	mov	r5, r1
 8004798:	f7fc f99e 	bl	8000ad8 <__aeabi_dcmpeq>
 800479c:	2800      	cmp	r0, #0
 800479e:	d09f      	beq.n	80046e0 <_dtoa_r+0x638>
 80047a0:	e7d1      	b.n	8004746 <_dtoa_r+0x69e>
 80047a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80047a4:	2a00      	cmp	r2, #0
 80047a6:	f000 80ea 	beq.w	800497e <_dtoa_r+0x8d6>
 80047aa:	9a07      	ldr	r2, [sp, #28]
 80047ac:	2a01      	cmp	r2, #1
 80047ae:	f300 80cd 	bgt.w	800494c <_dtoa_r+0x8a4>
 80047b2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80047b4:	2a00      	cmp	r2, #0
 80047b6:	f000 80c1 	beq.w	800493c <_dtoa_r+0x894>
 80047ba:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80047be:	9c08      	ldr	r4, [sp, #32]
 80047c0:	9e00      	ldr	r6, [sp, #0]
 80047c2:	9a00      	ldr	r2, [sp, #0]
 80047c4:	441a      	add	r2, r3
 80047c6:	9200      	str	r2, [sp, #0]
 80047c8:	9a06      	ldr	r2, [sp, #24]
 80047ca:	2101      	movs	r1, #1
 80047cc:	441a      	add	r2, r3
 80047ce:	4648      	mov	r0, r9
 80047d0:	9206      	str	r2, [sp, #24]
 80047d2:	f000 fc2d 	bl	8005030 <__i2b>
 80047d6:	4605      	mov	r5, r0
 80047d8:	b166      	cbz	r6, 80047f4 <_dtoa_r+0x74c>
 80047da:	9b06      	ldr	r3, [sp, #24]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	dd09      	ble.n	80047f4 <_dtoa_r+0x74c>
 80047e0:	42b3      	cmp	r3, r6
 80047e2:	9a00      	ldr	r2, [sp, #0]
 80047e4:	bfa8      	it	ge
 80047e6:	4633      	movge	r3, r6
 80047e8:	1ad2      	subs	r2, r2, r3
 80047ea:	9200      	str	r2, [sp, #0]
 80047ec:	9a06      	ldr	r2, [sp, #24]
 80047ee:	1af6      	subs	r6, r6, r3
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	9306      	str	r3, [sp, #24]
 80047f4:	9b08      	ldr	r3, [sp, #32]
 80047f6:	b30b      	cbz	r3, 800483c <_dtoa_r+0x794>
 80047f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	f000 80c6 	beq.w	800498c <_dtoa_r+0x8e4>
 8004800:	2c00      	cmp	r4, #0
 8004802:	f000 80c0 	beq.w	8004986 <_dtoa_r+0x8de>
 8004806:	4629      	mov	r1, r5
 8004808:	4622      	mov	r2, r4
 800480a:	4648      	mov	r0, r9
 800480c:	f000 fcc8 	bl	80051a0 <__pow5mult>
 8004810:	9a02      	ldr	r2, [sp, #8]
 8004812:	4601      	mov	r1, r0
 8004814:	4605      	mov	r5, r0
 8004816:	4648      	mov	r0, r9
 8004818:	f000 fc20 	bl	800505c <__multiply>
 800481c:	9902      	ldr	r1, [sp, #8]
 800481e:	4680      	mov	r8, r0
 8004820:	4648      	mov	r0, r9
 8004822:	f000 fb51 	bl	8004ec8 <_Bfree>
 8004826:	9b08      	ldr	r3, [sp, #32]
 8004828:	1b1b      	subs	r3, r3, r4
 800482a:	9308      	str	r3, [sp, #32]
 800482c:	f000 80b1 	beq.w	8004992 <_dtoa_r+0x8ea>
 8004830:	9a08      	ldr	r2, [sp, #32]
 8004832:	4641      	mov	r1, r8
 8004834:	4648      	mov	r0, r9
 8004836:	f000 fcb3 	bl	80051a0 <__pow5mult>
 800483a:	9002      	str	r0, [sp, #8]
 800483c:	2101      	movs	r1, #1
 800483e:	4648      	mov	r0, r9
 8004840:	f000 fbf6 	bl	8005030 <__i2b>
 8004844:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004846:	4604      	mov	r4, r0
 8004848:	2b00      	cmp	r3, #0
 800484a:	f000 81d8 	beq.w	8004bfe <_dtoa_r+0xb56>
 800484e:	461a      	mov	r2, r3
 8004850:	4601      	mov	r1, r0
 8004852:	4648      	mov	r0, r9
 8004854:	f000 fca4 	bl	80051a0 <__pow5mult>
 8004858:	9b07      	ldr	r3, [sp, #28]
 800485a:	2b01      	cmp	r3, #1
 800485c:	4604      	mov	r4, r0
 800485e:	f300 809f 	bgt.w	80049a0 <_dtoa_r+0x8f8>
 8004862:	9b04      	ldr	r3, [sp, #16]
 8004864:	2b00      	cmp	r3, #0
 8004866:	f040 8097 	bne.w	8004998 <_dtoa_r+0x8f0>
 800486a:	9b05      	ldr	r3, [sp, #20]
 800486c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004870:	2b00      	cmp	r3, #0
 8004872:	f040 8093 	bne.w	800499c <_dtoa_r+0x8f4>
 8004876:	9b05      	ldr	r3, [sp, #20]
 8004878:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800487c:	0d1b      	lsrs	r3, r3, #20
 800487e:	051b      	lsls	r3, r3, #20
 8004880:	b133      	cbz	r3, 8004890 <_dtoa_r+0x7e8>
 8004882:	9b00      	ldr	r3, [sp, #0]
 8004884:	3301      	adds	r3, #1
 8004886:	9300      	str	r3, [sp, #0]
 8004888:	9b06      	ldr	r3, [sp, #24]
 800488a:	3301      	adds	r3, #1
 800488c:	9306      	str	r3, [sp, #24]
 800488e:	2301      	movs	r3, #1
 8004890:	9308      	str	r3, [sp, #32]
 8004892:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004894:	2b00      	cmp	r3, #0
 8004896:	f000 81b8 	beq.w	8004c0a <_dtoa_r+0xb62>
 800489a:	6923      	ldr	r3, [r4, #16]
 800489c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80048a0:	6918      	ldr	r0, [r3, #16]
 80048a2:	f000 fb79 	bl	8004f98 <__hi0bits>
 80048a6:	f1c0 0020 	rsb	r0, r0, #32
 80048aa:	9b06      	ldr	r3, [sp, #24]
 80048ac:	4418      	add	r0, r3
 80048ae:	f010 001f 	ands.w	r0, r0, #31
 80048b2:	f000 8082 	beq.w	80049ba <_dtoa_r+0x912>
 80048b6:	f1c0 0320 	rsb	r3, r0, #32
 80048ba:	2b04      	cmp	r3, #4
 80048bc:	dd73      	ble.n	80049a6 <_dtoa_r+0x8fe>
 80048be:	9b00      	ldr	r3, [sp, #0]
 80048c0:	f1c0 001c 	rsb	r0, r0, #28
 80048c4:	4403      	add	r3, r0
 80048c6:	9300      	str	r3, [sp, #0]
 80048c8:	9b06      	ldr	r3, [sp, #24]
 80048ca:	4403      	add	r3, r0
 80048cc:	4406      	add	r6, r0
 80048ce:	9306      	str	r3, [sp, #24]
 80048d0:	9b00      	ldr	r3, [sp, #0]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	dd05      	ble.n	80048e2 <_dtoa_r+0x83a>
 80048d6:	9902      	ldr	r1, [sp, #8]
 80048d8:	461a      	mov	r2, r3
 80048da:	4648      	mov	r0, r9
 80048dc:	f000 fcba 	bl	8005254 <__lshift>
 80048e0:	9002      	str	r0, [sp, #8]
 80048e2:	9b06      	ldr	r3, [sp, #24]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	dd05      	ble.n	80048f4 <_dtoa_r+0x84c>
 80048e8:	4621      	mov	r1, r4
 80048ea:	461a      	mov	r2, r3
 80048ec:	4648      	mov	r0, r9
 80048ee:	f000 fcb1 	bl	8005254 <__lshift>
 80048f2:	4604      	mov	r4, r0
 80048f4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d061      	beq.n	80049be <_dtoa_r+0x916>
 80048fa:	9802      	ldr	r0, [sp, #8]
 80048fc:	4621      	mov	r1, r4
 80048fe:	f000 fd15 	bl	800532c <__mcmp>
 8004902:	2800      	cmp	r0, #0
 8004904:	da5b      	bge.n	80049be <_dtoa_r+0x916>
 8004906:	2300      	movs	r3, #0
 8004908:	9902      	ldr	r1, [sp, #8]
 800490a:	220a      	movs	r2, #10
 800490c:	4648      	mov	r0, r9
 800490e:	f000 fafd 	bl	8004f0c <__multadd>
 8004912:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004914:	9002      	str	r0, [sp, #8]
 8004916:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800491a:	2b00      	cmp	r3, #0
 800491c:	f000 8177 	beq.w	8004c0e <_dtoa_r+0xb66>
 8004920:	4629      	mov	r1, r5
 8004922:	2300      	movs	r3, #0
 8004924:	220a      	movs	r2, #10
 8004926:	4648      	mov	r0, r9
 8004928:	f000 faf0 	bl	8004f0c <__multadd>
 800492c:	f1bb 0f00 	cmp.w	fp, #0
 8004930:	4605      	mov	r5, r0
 8004932:	dc6f      	bgt.n	8004a14 <_dtoa_r+0x96c>
 8004934:	9b07      	ldr	r3, [sp, #28]
 8004936:	2b02      	cmp	r3, #2
 8004938:	dc49      	bgt.n	80049ce <_dtoa_r+0x926>
 800493a:	e06b      	b.n	8004a14 <_dtoa_r+0x96c>
 800493c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800493e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004942:	e73c      	b.n	80047be <_dtoa_r+0x716>
 8004944:	3fe00000 	.word	0x3fe00000
 8004948:	40240000 	.word	0x40240000
 800494c:	9b03      	ldr	r3, [sp, #12]
 800494e:	1e5c      	subs	r4, r3, #1
 8004950:	9b08      	ldr	r3, [sp, #32]
 8004952:	42a3      	cmp	r3, r4
 8004954:	db09      	blt.n	800496a <_dtoa_r+0x8c2>
 8004956:	1b1c      	subs	r4, r3, r4
 8004958:	9b03      	ldr	r3, [sp, #12]
 800495a:	2b00      	cmp	r3, #0
 800495c:	f6bf af30 	bge.w	80047c0 <_dtoa_r+0x718>
 8004960:	9b00      	ldr	r3, [sp, #0]
 8004962:	9a03      	ldr	r2, [sp, #12]
 8004964:	1a9e      	subs	r6, r3, r2
 8004966:	2300      	movs	r3, #0
 8004968:	e72b      	b.n	80047c2 <_dtoa_r+0x71a>
 800496a:	9b08      	ldr	r3, [sp, #32]
 800496c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800496e:	9408      	str	r4, [sp, #32]
 8004970:	1ae3      	subs	r3, r4, r3
 8004972:	441a      	add	r2, r3
 8004974:	9e00      	ldr	r6, [sp, #0]
 8004976:	9b03      	ldr	r3, [sp, #12]
 8004978:	920d      	str	r2, [sp, #52]	@ 0x34
 800497a:	2400      	movs	r4, #0
 800497c:	e721      	b.n	80047c2 <_dtoa_r+0x71a>
 800497e:	9c08      	ldr	r4, [sp, #32]
 8004980:	9e00      	ldr	r6, [sp, #0]
 8004982:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8004984:	e728      	b.n	80047d8 <_dtoa_r+0x730>
 8004986:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800498a:	e751      	b.n	8004830 <_dtoa_r+0x788>
 800498c:	9a08      	ldr	r2, [sp, #32]
 800498e:	9902      	ldr	r1, [sp, #8]
 8004990:	e750      	b.n	8004834 <_dtoa_r+0x78c>
 8004992:	f8cd 8008 	str.w	r8, [sp, #8]
 8004996:	e751      	b.n	800483c <_dtoa_r+0x794>
 8004998:	2300      	movs	r3, #0
 800499a:	e779      	b.n	8004890 <_dtoa_r+0x7e8>
 800499c:	9b04      	ldr	r3, [sp, #16]
 800499e:	e777      	b.n	8004890 <_dtoa_r+0x7e8>
 80049a0:	2300      	movs	r3, #0
 80049a2:	9308      	str	r3, [sp, #32]
 80049a4:	e779      	b.n	800489a <_dtoa_r+0x7f2>
 80049a6:	d093      	beq.n	80048d0 <_dtoa_r+0x828>
 80049a8:	9a00      	ldr	r2, [sp, #0]
 80049aa:	331c      	adds	r3, #28
 80049ac:	441a      	add	r2, r3
 80049ae:	9200      	str	r2, [sp, #0]
 80049b0:	9a06      	ldr	r2, [sp, #24]
 80049b2:	441a      	add	r2, r3
 80049b4:	441e      	add	r6, r3
 80049b6:	9206      	str	r2, [sp, #24]
 80049b8:	e78a      	b.n	80048d0 <_dtoa_r+0x828>
 80049ba:	4603      	mov	r3, r0
 80049bc:	e7f4      	b.n	80049a8 <_dtoa_r+0x900>
 80049be:	9b03      	ldr	r3, [sp, #12]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	46b8      	mov	r8, r7
 80049c4:	dc20      	bgt.n	8004a08 <_dtoa_r+0x960>
 80049c6:	469b      	mov	fp, r3
 80049c8:	9b07      	ldr	r3, [sp, #28]
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	dd1e      	ble.n	8004a0c <_dtoa_r+0x964>
 80049ce:	f1bb 0f00 	cmp.w	fp, #0
 80049d2:	f47f adb1 	bne.w	8004538 <_dtoa_r+0x490>
 80049d6:	4621      	mov	r1, r4
 80049d8:	465b      	mov	r3, fp
 80049da:	2205      	movs	r2, #5
 80049dc:	4648      	mov	r0, r9
 80049de:	f000 fa95 	bl	8004f0c <__multadd>
 80049e2:	4601      	mov	r1, r0
 80049e4:	4604      	mov	r4, r0
 80049e6:	9802      	ldr	r0, [sp, #8]
 80049e8:	f000 fca0 	bl	800532c <__mcmp>
 80049ec:	2800      	cmp	r0, #0
 80049ee:	f77f ada3 	ble.w	8004538 <_dtoa_r+0x490>
 80049f2:	4656      	mov	r6, sl
 80049f4:	2331      	movs	r3, #49	@ 0x31
 80049f6:	f806 3b01 	strb.w	r3, [r6], #1
 80049fa:	f108 0801 	add.w	r8, r8, #1
 80049fe:	e59f      	b.n	8004540 <_dtoa_r+0x498>
 8004a00:	9c03      	ldr	r4, [sp, #12]
 8004a02:	46b8      	mov	r8, r7
 8004a04:	4625      	mov	r5, r4
 8004a06:	e7f4      	b.n	80049f2 <_dtoa_r+0x94a>
 8004a08:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8004a0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	f000 8101 	beq.w	8004c16 <_dtoa_r+0xb6e>
 8004a14:	2e00      	cmp	r6, #0
 8004a16:	dd05      	ble.n	8004a24 <_dtoa_r+0x97c>
 8004a18:	4629      	mov	r1, r5
 8004a1a:	4632      	mov	r2, r6
 8004a1c:	4648      	mov	r0, r9
 8004a1e:	f000 fc19 	bl	8005254 <__lshift>
 8004a22:	4605      	mov	r5, r0
 8004a24:	9b08      	ldr	r3, [sp, #32]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d05c      	beq.n	8004ae4 <_dtoa_r+0xa3c>
 8004a2a:	6869      	ldr	r1, [r5, #4]
 8004a2c:	4648      	mov	r0, r9
 8004a2e:	f000 fa0b 	bl	8004e48 <_Balloc>
 8004a32:	4606      	mov	r6, r0
 8004a34:	b928      	cbnz	r0, 8004a42 <_dtoa_r+0x99a>
 8004a36:	4b82      	ldr	r3, [pc, #520]	@ (8004c40 <_dtoa_r+0xb98>)
 8004a38:	4602      	mov	r2, r0
 8004a3a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004a3e:	f7ff bb4a 	b.w	80040d6 <_dtoa_r+0x2e>
 8004a42:	692a      	ldr	r2, [r5, #16]
 8004a44:	3202      	adds	r2, #2
 8004a46:	0092      	lsls	r2, r2, #2
 8004a48:	f105 010c 	add.w	r1, r5, #12
 8004a4c:	300c      	adds	r0, #12
 8004a4e:	f000 ffa3 	bl	8005998 <memcpy>
 8004a52:	2201      	movs	r2, #1
 8004a54:	4631      	mov	r1, r6
 8004a56:	4648      	mov	r0, r9
 8004a58:	f000 fbfc 	bl	8005254 <__lshift>
 8004a5c:	f10a 0301 	add.w	r3, sl, #1
 8004a60:	9300      	str	r3, [sp, #0]
 8004a62:	eb0a 030b 	add.w	r3, sl, fp
 8004a66:	9308      	str	r3, [sp, #32]
 8004a68:	9b04      	ldr	r3, [sp, #16]
 8004a6a:	f003 0301 	and.w	r3, r3, #1
 8004a6e:	462f      	mov	r7, r5
 8004a70:	9306      	str	r3, [sp, #24]
 8004a72:	4605      	mov	r5, r0
 8004a74:	9b00      	ldr	r3, [sp, #0]
 8004a76:	9802      	ldr	r0, [sp, #8]
 8004a78:	4621      	mov	r1, r4
 8004a7a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8004a7e:	f7ff fa8a 	bl	8003f96 <quorem>
 8004a82:	4603      	mov	r3, r0
 8004a84:	3330      	adds	r3, #48	@ 0x30
 8004a86:	9003      	str	r0, [sp, #12]
 8004a88:	4639      	mov	r1, r7
 8004a8a:	9802      	ldr	r0, [sp, #8]
 8004a8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a8e:	f000 fc4d 	bl	800532c <__mcmp>
 8004a92:	462a      	mov	r2, r5
 8004a94:	9004      	str	r0, [sp, #16]
 8004a96:	4621      	mov	r1, r4
 8004a98:	4648      	mov	r0, r9
 8004a9a:	f000 fc63 	bl	8005364 <__mdiff>
 8004a9e:	68c2      	ldr	r2, [r0, #12]
 8004aa0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004aa2:	4606      	mov	r6, r0
 8004aa4:	bb02      	cbnz	r2, 8004ae8 <_dtoa_r+0xa40>
 8004aa6:	4601      	mov	r1, r0
 8004aa8:	9802      	ldr	r0, [sp, #8]
 8004aaa:	f000 fc3f 	bl	800532c <__mcmp>
 8004aae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	4631      	mov	r1, r6
 8004ab4:	4648      	mov	r0, r9
 8004ab6:	920c      	str	r2, [sp, #48]	@ 0x30
 8004ab8:	9309      	str	r3, [sp, #36]	@ 0x24
 8004aba:	f000 fa05 	bl	8004ec8 <_Bfree>
 8004abe:	9b07      	ldr	r3, [sp, #28]
 8004ac0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004ac2:	9e00      	ldr	r6, [sp, #0]
 8004ac4:	ea42 0103 	orr.w	r1, r2, r3
 8004ac8:	9b06      	ldr	r3, [sp, #24]
 8004aca:	4319      	orrs	r1, r3
 8004acc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ace:	d10d      	bne.n	8004aec <_dtoa_r+0xa44>
 8004ad0:	2b39      	cmp	r3, #57	@ 0x39
 8004ad2:	d027      	beq.n	8004b24 <_dtoa_r+0xa7c>
 8004ad4:	9a04      	ldr	r2, [sp, #16]
 8004ad6:	2a00      	cmp	r2, #0
 8004ad8:	dd01      	ble.n	8004ade <_dtoa_r+0xa36>
 8004ada:	9b03      	ldr	r3, [sp, #12]
 8004adc:	3331      	adds	r3, #49	@ 0x31
 8004ade:	f88b 3000 	strb.w	r3, [fp]
 8004ae2:	e52e      	b.n	8004542 <_dtoa_r+0x49a>
 8004ae4:	4628      	mov	r0, r5
 8004ae6:	e7b9      	b.n	8004a5c <_dtoa_r+0x9b4>
 8004ae8:	2201      	movs	r2, #1
 8004aea:	e7e2      	b.n	8004ab2 <_dtoa_r+0xa0a>
 8004aec:	9904      	ldr	r1, [sp, #16]
 8004aee:	2900      	cmp	r1, #0
 8004af0:	db04      	blt.n	8004afc <_dtoa_r+0xa54>
 8004af2:	9807      	ldr	r0, [sp, #28]
 8004af4:	4301      	orrs	r1, r0
 8004af6:	9806      	ldr	r0, [sp, #24]
 8004af8:	4301      	orrs	r1, r0
 8004afa:	d120      	bne.n	8004b3e <_dtoa_r+0xa96>
 8004afc:	2a00      	cmp	r2, #0
 8004afe:	ddee      	ble.n	8004ade <_dtoa_r+0xa36>
 8004b00:	9902      	ldr	r1, [sp, #8]
 8004b02:	9300      	str	r3, [sp, #0]
 8004b04:	2201      	movs	r2, #1
 8004b06:	4648      	mov	r0, r9
 8004b08:	f000 fba4 	bl	8005254 <__lshift>
 8004b0c:	4621      	mov	r1, r4
 8004b0e:	9002      	str	r0, [sp, #8]
 8004b10:	f000 fc0c 	bl	800532c <__mcmp>
 8004b14:	2800      	cmp	r0, #0
 8004b16:	9b00      	ldr	r3, [sp, #0]
 8004b18:	dc02      	bgt.n	8004b20 <_dtoa_r+0xa78>
 8004b1a:	d1e0      	bne.n	8004ade <_dtoa_r+0xa36>
 8004b1c:	07da      	lsls	r2, r3, #31
 8004b1e:	d5de      	bpl.n	8004ade <_dtoa_r+0xa36>
 8004b20:	2b39      	cmp	r3, #57	@ 0x39
 8004b22:	d1da      	bne.n	8004ada <_dtoa_r+0xa32>
 8004b24:	2339      	movs	r3, #57	@ 0x39
 8004b26:	f88b 3000 	strb.w	r3, [fp]
 8004b2a:	4633      	mov	r3, r6
 8004b2c:	461e      	mov	r6, r3
 8004b2e:	3b01      	subs	r3, #1
 8004b30:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004b34:	2a39      	cmp	r2, #57	@ 0x39
 8004b36:	d04e      	beq.n	8004bd6 <_dtoa_r+0xb2e>
 8004b38:	3201      	adds	r2, #1
 8004b3a:	701a      	strb	r2, [r3, #0]
 8004b3c:	e501      	b.n	8004542 <_dtoa_r+0x49a>
 8004b3e:	2a00      	cmp	r2, #0
 8004b40:	dd03      	ble.n	8004b4a <_dtoa_r+0xaa2>
 8004b42:	2b39      	cmp	r3, #57	@ 0x39
 8004b44:	d0ee      	beq.n	8004b24 <_dtoa_r+0xa7c>
 8004b46:	3301      	adds	r3, #1
 8004b48:	e7c9      	b.n	8004ade <_dtoa_r+0xa36>
 8004b4a:	9a00      	ldr	r2, [sp, #0]
 8004b4c:	9908      	ldr	r1, [sp, #32]
 8004b4e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004b52:	428a      	cmp	r2, r1
 8004b54:	d028      	beq.n	8004ba8 <_dtoa_r+0xb00>
 8004b56:	9902      	ldr	r1, [sp, #8]
 8004b58:	2300      	movs	r3, #0
 8004b5a:	220a      	movs	r2, #10
 8004b5c:	4648      	mov	r0, r9
 8004b5e:	f000 f9d5 	bl	8004f0c <__multadd>
 8004b62:	42af      	cmp	r7, r5
 8004b64:	9002      	str	r0, [sp, #8]
 8004b66:	f04f 0300 	mov.w	r3, #0
 8004b6a:	f04f 020a 	mov.w	r2, #10
 8004b6e:	4639      	mov	r1, r7
 8004b70:	4648      	mov	r0, r9
 8004b72:	d107      	bne.n	8004b84 <_dtoa_r+0xadc>
 8004b74:	f000 f9ca 	bl	8004f0c <__multadd>
 8004b78:	4607      	mov	r7, r0
 8004b7a:	4605      	mov	r5, r0
 8004b7c:	9b00      	ldr	r3, [sp, #0]
 8004b7e:	3301      	adds	r3, #1
 8004b80:	9300      	str	r3, [sp, #0]
 8004b82:	e777      	b.n	8004a74 <_dtoa_r+0x9cc>
 8004b84:	f000 f9c2 	bl	8004f0c <__multadd>
 8004b88:	4629      	mov	r1, r5
 8004b8a:	4607      	mov	r7, r0
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	220a      	movs	r2, #10
 8004b90:	4648      	mov	r0, r9
 8004b92:	f000 f9bb 	bl	8004f0c <__multadd>
 8004b96:	4605      	mov	r5, r0
 8004b98:	e7f0      	b.n	8004b7c <_dtoa_r+0xad4>
 8004b9a:	f1bb 0f00 	cmp.w	fp, #0
 8004b9e:	bfcc      	ite	gt
 8004ba0:	465e      	movgt	r6, fp
 8004ba2:	2601      	movle	r6, #1
 8004ba4:	4456      	add	r6, sl
 8004ba6:	2700      	movs	r7, #0
 8004ba8:	9902      	ldr	r1, [sp, #8]
 8004baa:	9300      	str	r3, [sp, #0]
 8004bac:	2201      	movs	r2, #1
 8004bae:	4648      	mov	r0, r9
 8004bb0:	f000 fb50 	bl	8005254 <__lshift>
 8004bb4:	4621      	mov	r1, r4
 8004bb6:	9002      	str	r0, [sp, #8]
 8004bb8:	f000 fbb8 	bl	800532c <__mcmp>
 8004bbc:	2800      	cmp	r0, #0
 8004bbe:	dcb4      	bgt.n	8004b2a <_dtoa_r+0xa82>
 8004bc0:	d102      	bne.n	8004bc8 <_dtoa_r+0xb20>
 8004bc2:	9b00      	ldr	r3, [sp, #0]
 8004bc4:	07db      	lsls	r3, r3, #31
 8004bc6:	d4b0      	bmi.n	8004b2a <_dtoa_r+0xa82>
 8004bc8:	4633      	mov	r3, r6
 8004bca:	461e      	mov	r6, r3
 8004bcc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004bd0:	2a30      	cmp	r2, #48	@ 0x30
 8004bd2:	d0fa      	beq.n	8004bca <_dtoa_r+0xb22>
 8004bd4:	e4b5      	b.n	8004542 <_dtoa_r+0x49a>
 8004bd6:	459a      	cmp	sl, r3
 8004bd8:	d1a8      	bne.n	8004b2c <_dtoa_r+0xa84>
 8004bda:	2331      	movs	r3, #49	@ 0x31
 8004bdc:	f108 0801 	add.w	r8, r8, #1
 8004be0:	f88a 3000 	strb.w	r3, [sl]
 8004be4:	e4ad      	b.n	8004542 <_dtoa_r+0x49a>
 8004be6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004be8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8004c44 <_dtoa_r+0xb9c>
 8004bec:	b11b      	cbz	r3, 8004bf6 <_dtoa_r+0xb4e>
 8004bee:	f10a 0308 	add.w	r3, sl, #8
 8004bf2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8004bf4:	6013      	str	r3, [r2, #0]
 8004bf6:	4650      	mov	r0, sl
 8004bf8:	b017      	add	sp, #92	@ 0x5c
 8004bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bfe:	9b07      	ldr	r3, [sp, #28]
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	f77f ae2e 	ble.w	8004862 <_dtoa_r+0x7ba>
 8004c06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004c08:	9308      	str	r3, [sp, #32]
 8004c0a:	2001      	movs	r0, #1
 8004c0c:	e64d      	b.n	80048aa <_dtoa_r+0x802>
 8004c0e:	f1bb 0f00 	cmp.w	fp, #0
 8004c12:	f77f aed9 	ble.w	80049c8 <_dtoa_r+0x920>
 8004c16:	4656      	mov	r6, sl
 8004c18:	9802      	ldr	r0, [sp, #8]
 8004c1a:	4621      	mov	r1, r4
 8004c1c:	f7ff f9bb 	bl	8003f96 <quorem>
 8004c20:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8004c24:	f806 3b01 	strb.w	r3, [r6], #1
 8004c28:	eba6 020a 	sub.w	r2, r6, sl
 8004c2c:	4593      	cmp	fp, r2
 8004c2e:	ddb4      	ble.n	8004b9a <_dtoa_r+0xaf2>
 8004c30:	9902      	ldr	r1, [sp, #8]
 8004c32:	2300      	movs	r3, #0
 8004c34:	220a      	movs	r2, #10
 8004c36:	4648      	mov	r0, r9
 8004c38:	f000 f968 	bl	8004f0c <__multadd>
 8004c3c:	9002      	str	r0, [sp, #8]
 8004c3e:	e7eb      	b.n	8004c18 <_dtoa_r+0xb70>
 8004c40:	08006184 	.word	0x08006184
 8004c44:	08006108 	.word	0x08006108

08004c48 <_free_r>:
 8004c48:	b538      	push	{r3, r4, r5, lr}
 8004c4a:	4605      	mov	r5, r0
 8004c4c:	2900      	cmp	r1, #0
 8004c4e:	d041      	beq.n	8004cd4 <_free_r+0x8c>
 8004c50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c54:	1f0c      	subs	r4, r1, #4
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	bfb8      	it	lt
 8004c5a:	18e4      	addlt	r4, r4, r3
 8004c5c:	f000 f8e8 	bl	8004e30 <__malloc_lock>
 8004c60:	4a1d      	ldr	r2, [pc, #116]	@ (8004cd8 <_free_r+0x90>)
 8004c62:	6813      	ldr	r3, [r2, #0]
 8004c64:	b933      	cbnz	r3, 8004c74 <_free_r+0x2c>
 8004c66:	6063      	str	r3, [r4, #4]
 8004c68:	6014      	str	r4, [r2, #0]
 8004c6a:	4628      	mov	r0, r5
 8004c6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c70:	f000 b8e4 	b.w	8004e3c <__malloc_unlock>
 8004c74:	42a3      	cmp	r3, r4
 8004c76:	d908      	bls.n	8004c8a <_free_r+0x42>
 8004c78:	6820      	ldr	r0, [r4, #0]
 8004c7a:	1821      	adds	r1, r4, r0
 8004c7c:	428b      	cmp	r3, r1
 8004c7e:	bf01      	itttt	eq
 8004c80:	6819      	ldreq	r1, [r3, #0]
 8004c82:	685b      	ldreq	r3, [r3, #4]
 8004c84:	1809      	addeq	r1, r1, r0
 8004c86:	6021      	streq	r1, [r4, #0]
 8004c88:	e7ed      	b.n	8004c66 <_free_r+0x1e>
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	b10b      	cbz	r3, 8004c94 <_free_r+0x4c>
 8004c90:	42a3      	cmp	r3, r4
 8004c92:	d9fa      	bls.n	8004c8a <_free_r+0x42>
 8004c94:	6811      	ldr	r1, [r2, #0]
 8004c96:	1850      	adds	r0, r2, r1
 8004c98:	42a0      	cmp	r0, r4
 8004c9a:	d10b      	bne.n	8004cb4 <_free_r+0x6c>
 8004c9c:	6820      	ldr	r0, [r4, #0]
 8004c9e:	4401      	add	r1, r0
 8004ca0:	1850      	adds	r0, r2, r1
 8004ca2:	4283      	cmp	r3, r0
 8004ca4:	6011      	str	r1, [r2, #0]
 8004ca6:	d1e0      	bne.n	8004c6a <_free_r+0x22>
 8004ca8:	6818      	ldr	r0, [r3, #0]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	6053      	str	r3, [r2, #4]
 8004cae:	4408      	add	r0, r1
 8004cb0:	6010      	str	r0, [r2, #0]
 8004cb2:	e7da      	b.n	8004c6a <_free_r+0x22>
 8004cb4:	d902      	bls.n	8004cbc <_free_r+0x74>
 8004cb6:	230c      	movs	r3, #12
 8004cb8:	602b      	str	r3, [r5, #0]
 8004cba:	e7d6      	b.n	8004c6a <_free_r+0x22>
 8004cbc:	6820      	ldr	r0, [r4, #0]
 8004cbe:	1821      	adds	r1, r4, r0
 8004cc0:	428b      	cmp	r3, r1
 8004cc2:	bf04      	itt	eq
 8004cc4:	6819      	ldreq	r1, [r3, #0]
 8004cc6:	685b      	ldreq	r3, [r3, #4]
 8004cc8:	6063      	str	r3, [r4, #4]
 8004cca:	bf04      	itt	eq
 8004ccc:	1809      	addeq	r1, r1, r0
 8004cce:	6021      	streq	r1, [r4, #0]
 8004cd0:	6054      	str	r4, [r2, #4]
 8004cd2:	e7ca      	b.n	8004c6a <_free_r+0x22>
 8004cd4:	bd38      	pop	{r3, r4, r5, pc}
 8004cd6:	bf00      	nop
 8004cd8:	20000420 	.word	0x20000420

08004cdc <malloc>:
 8004cdc:	4b02      	ldr	r3, [pc, #8]	@ (8004ce8 <malloc+0xc>)
 8004cde:	4601      	mov	r1, r0
 8004ce0:	6818      	ldr	r0, [r3, #0]
 8004ce2:	f000 b825 	b.w	8004d30 <_malloc_r>
 8004ce6:	bf00      	nop
 8004ce8:	20000018 	.word	0x20000018

08004cec <sbrk_aligned>:
 8004cec:	b570      	push	{r4, r5, r6, lr}
 8004cee:	4e0f      	ldr	r6, [pc, #60]	@ (8004d2c <sbrk_aligned+0x40>)
 8004cf0:	460c      	mov	r4, r1
 8004cf2:	6831      	ldr	r1, [r6, #0]
 8004cf4:	4605      	mov	r5, r0
 8004cf6:	b911      	cbnz	r1, 8004cfe <sbrk_aligned+0x12>
 8004cf8:	f000 fe3e 	bl	8005978 <_sbrk_r>
 8004cfc:	6030      	str	r0, [r6, #0]
 8004cfe:	4621      	mov	r1, r4
 8004d00:	4628      	mov	r0, r5
 8004d02:	f000 fe39 	bl	8005978 <_sbrk_r>
 8004d06:	1c43      	adds	r3, r0, #1
 8004d08:	d103      	bne.n	8004d12 <sbrk_aligned+0x26>
 8004d0a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004d0e:	4620      	mov	r0, r4
 8004d10:	bd70      	pop	{r4, r5, r6, pc}
 8004d12:	1cc4      	adds	r4, r0, #3
 8004d14:	f024 0403 	bic.w	r4, r4, #3
 8004d18:	42a0      	cmp	r0, r4
 8004d1a:	d0f8      	beq.n	8004d0e <sbrk_aligned+0x22>
 8004d1c:	1a21      	subs	r1, r4, r0
 8004d1e:	4628      	mov	r0, r5
 8004d20:	f000 fe2a 	bl	8005978 <_sbrk_r>
 8004d24:	3001      	adds	r0, #1
 8004d26:	d1f2      	bne.n	8004d0e <sbrk_aligned+0x22>
 8004d28:	e7ef      	b.n	8004d0a <sbrk_aligned+0x1e>
 8004d2a:	bf00      	nop
 8004d2c:	2000041c 	.word	0x2000041c

08004d30 <_malloc_r>:
 8004d30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d34:	1ccd      	adds	r5, r1, #3
 8004d36:	f025 0503 	bic.w	r5, r5, #3
 8004d3a:	3508      	adds	r5, #8
 8004d3c:	2d0c      	cmp	r5, #12
 8004d3e:	bf38      	it	cc
 8004d40:	250c      	movcc	r5, #12
 8004d42:	2d00      	cmp	r5, #0
 8004d44:	4606      	mov	r6, r0
 8004d46:	db01      	blt.n	8004d4c <_malloc_r+0x1c>
 8004d48:	42a9      	cmp	r1, r5
 8004d4a:	d904      	bls.n	8004d56 <_malloc_r+0x26>
 8004d4c:	230c      	movs	r3, #12
 8004d4e:	6033      	str	r3, [r6, #0]
 8004d50:	2000      	movs	r0, #0
 8004d52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d56:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004e2c <_malloc_r+0xfc>
 8004d5a:	f000 f869 	bl	8004e30 <__malloc_lock>
 8004d5e:	f8d8 3000 	ldr.w	r3, [r8]
 8004d62:	461c      	mov	r4, r3
 8004d64:	bb44      	cbnz	r4, 8004db8 <_malloc_r+0x88>
 8004d66:	4629      	mov	r1, r5
 8004d68:	4630      	mov	r0, r6
 8004d6a:	f7ff ffbf 	bl	8004cec <sbrk_aligned>
 8004d6e:	1c43      	adds	r3, r0, #1
 8004d70:	4604      	mov	r4, r0
 8004d72:	d158      	bne.n	8004e26 <_malloc_r+0xf6>
 8004d74:	f8d8 4000 	ldr.w	r4, [r8]
 8004d78:	4627      	mov	r7, r4
 8004d7a:	2f00      	cmp	r7, #0
 8004d7c:	d143      	bne.n	8004e06 <_malloc_r+0xd6>
 8004d7e:	2c00      	cmp	r4, #0
 8004d80:	d04b      	beq.n	8004e1a <_malloc_r+0xea>
 8004d82:	6823      	ldr	r3, [r4, #0]
 8004d84:	4639      	mov	r1, r7
 8004d86:	4630      	mov	r0, r6
 8004d88:	eb04 0903 	add.w	r9, r4, r3
 8004d8c:	f000 fdf4 	bl	8005978 <_sbrk_r>
 8004d90:	4581      	cmp	r9, r0
 8004d92:	d142      	bne.n	8004e1a <_malloc_r+0xea>
 8004d94:	6821      	ldr	r1, [r4, #0]
 8004d96:	1a6d      	subs	r5, r5, r1
 8004d98:	4629      	mov	r1, r5
 8004d9a:	4630      	mov	r0, r6
 8004d9c:	f7ff ffa6 	bl	8004cec <sbrk_aligned>
 8004da0:	3001      	adds	r0, #1
 8004da2:	d03a      	beq.n	8004e1a <_malloc_r+0xea>
 8004da4:	6823      	ldr	r3, [r4, #0]
 8004da6:	442b      	add	r3, r5
 8004da8:	6023      	str	r3, [r4, #0]
 8004daa:	f8d8 3000 	ldr.w	r3, [r8]
 8004dae:	685a      	ldr	r2, [r3, #4]
 8004db0:	bb62      	cbnz	r2, 8004e0c <_malloc_r+0xdc>
 8004db2:	f8c8 7000 	str.w	r7, [r8]
 8004db6:	e00f      	b.n	8004dd8 <_malloc_r+0xa8>
 8004db8:	6822      	ldr	r2, [r4, #0]
 8004dba:	1b52      	subs	r2, r2, r5
 8004dbc:	d420      	bmi.n	8004e00 <_malloc_r+0xd0>
 8004dbe:	2a0b      	cmp	r2, #11
 8004dc0:	d917      	bls.n	8004df2 <_malloc_r+0xc2>
 8004dc2:	1961      	adds	r1, r4, r5
 8004dc4:	42a3      	cmp	r3, r4
 8004dc6:	6025      	str	r5, [r4, #0]
 8004dc8:	bf18      	it	ne
 8004dca:	6059      	strne	r1, [r3, #4]
 8004dcc:	6863      	ldr	r3, [r4, #4]
 8004dce:	bf08      	it	eq
 8004dd0:	f8c8 1000 	streq.w	r1, [r8]
 8004dd4:	5162      	str	r2, [r4, r5]
 8004dd6:	604b      	str	r3, [r1, #4]
 8004dd8:	4630      	mov	r0, r6
 8004dda:	f000 f82f 	bl	8004e3c <__malloc_unlock>
 8004dde:	f104 000b 	add.w	r0, r4, #11
 8004de2:	1d23      	adds	r3, r4, #4
 8004de4:	f020 0007 	bic.w	r0, r0, #7
 8004de8:	1ac2      	subs	r2, r0, r3
 8004dea:	bf1c      	itt	ne
 8004dec:	1a1b      	subne	r3, r3, r0
 8004dee:	50a3      	strne	r3, [r4, r2]
 8004df0:	e7af      	b.n	8004d52 <_malloc_r+0x22>
 8004df2:	6862      	ldr	r2, [r4, #4]
 8004df4:	42a3      	cmp	r3, r4
 8004df6:	bf0c      	ite	eq
 8004df8:	f8c8 2000 	streq.w	r2, [r8]
 8004dfc:	605a      	strne	r2, [r3, #4]
 8004dfe:	e7eb      	b.n	8004dd8 <_malloc_r+0xa8>
 8004e00:	4623      	mov	r3, r4
 8004e02:	6864      	ldr	r4, [r4, #4]
 8004e04:	e7ae      	b.n	8004d64 <_malloc_r+0x34>
 8004e06:	463c      	mov	r4, r7
 8004e08:	687f      	ldr	r7, [r7, #4]
 8004e0a:	e7b6      	b.n	8004d7a <_malloc_r+0x4a>
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	42a3      	cmp	r3, r4
 8004e12:	d1fb      	bne.n	8004e0c <_malloc_r+0xdc>
 8004e14:	2300      	movs	r3, #0
 8004e16:	6053      	str	r3, [r2, #4]
 8004e18:	e7de      	b.n	8004dd8 <_malloc_r+0xa8>
 8004e1a:	230c      	movs	r3, #12
 8004e1c:	6033      	str	r3, [r6, #0]
 8004e1e:	4630      	mov	r0, r6
 8004e20:	f000 f80c 	bl	8004e3c <__malloc_unlock>
 8004e24:	e794      	b.n	8004d50 <_malloc_r+0x20>
 8004e26:	6005      	str	r5, [r0, #0]
 8004e28:	e7d6      	b.n	8004dd8 <_malloc_r+0xa8>
 8004e2a:	bf00      	nop
 8004e2c:	20000420 	.word	0x20000420

08004e30 <__malloc_lock>:
 8004e30:	4801      	ldr	r0, [pc, #4]	@ (8004e38 <__malloc_lock+0x8>)
 8004e32:	f7ff b8ae 	b.w	8003f92 <__retarget_lock_acquire_recursive>
 8004e36:	bf00      	nop
 8004e38:	20000418 	.word	0x20000418

08004e3c <__malloc_unlock>:
 8004e3c:	4801      	ldr	r0, [pc, #4]	@ (8004e44 <__malloc_unlock+0x8>)
 8004e3e:	f7ff b8a9 	b.w	8003f94 <__retarget_lock_release_recursive>
 8004e42:	bf00      	nop
 8004e44:	20000418 	.word	0x20000418

08004e48 <_Balloc>:
 8004e48:	b570      	push	{r4, r5, r6, lr}
 8004e4a:	69c6      	ldr	r6, [r0, #28]
 8004e4c:	4604      	mov	r4, r0
 8004e4e:	460d      	mov	r5, r1
 8004e50:	b976      	cbnz	r6, 8004e70 <_Balloc+0x28>
 8004e52:	2010      	movs	r0, #16
 8004e54:	f7ff ff42 	bl	8004cdc <malloc>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	61e0      	str	r0, [r4, #28]
 8004e5c:	b920      	cbnz	r0, 8004e68 <_Balloc+0x20>
 8004e5e:	4b18      	ldr	r3, [pc, #96]	@ (8004ec0 <_Balloc+0x78>)
 8004e60:	4818      	ldr	r0, [pc, #96]	@ (8004ec4 <_Balloc+0x7c>)
 8004e62:	216b      	movs	r1, #107	@ 0x6b
 8004e64:	f000 fda6 	bl	80059b4 <__assert_func>
 8004e68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004e6c:	6006      	str	r6, [r0, #0]
 8004e6e:	60c6      	str	r6, [r0, #12]
 8004e70:	69e6      	ldr	r6, [r4, #28]
 8004e72:	68f3      	ldr	r3, [r6, #12]
 8004e74:	b183      	cbz	r3, 8004e98 <_Balloc+0x50>
 8004e76:	69e3      	ldr	r3, [r4, #28]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004e7e:	b9b8      	cbnz	r0, 8004eb0 <_Balloc+0x68>
 8004e80:	2101      	movs	r1, #1
 8004e82:	fa01 f605 	lsl.w	r6, r1, r5
 8004e86:	1d72      	adds	r2, r6, #5
 8004e88:	0092      	lsls	r2, r2, #2
 8004e8a:	4620      	mov	r0, r4
 8004e8c:	f000 fdb0 	bl	80059f0 <_calloc_r>
 8004e90:	b160      	cbz	r0, 8004eac <_Balloc+0x64>
 8004e92:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004e96:	e00e      	b.n	8004eb6 <_Balloc+0x6e>
 8004e98:	2221      	movs	r2, #33	@ 0x21
 8004e9a:	2104      	movs	r1, #4
 8004e9c:	4620      	mov	r0, r4
 8004e9e:	f000 fda7 	bl	80059f0 <_calloc_r>
 8004ea2:	69e3      	ldr	r3, [r4, #28]
 8004ea4:	60f0      	str	r0, [r6, #12]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d1e4      	bne.n	8004e76 <_Balloc+0x2e>
 8004eac:	2000      	movs	r0, #0
 8004eae:	bd70      	pop	{r4, r5, r6, pc}
 8004eb0:	6802      	ldr	r2, [r0, #0]
 8004eb2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004ebc:	e7f7      	b.n	8004eae <_Balloc+0x66>
 8004ebe:	bf00      	nop
 8004ec0:	08006115 	.word	0x08006115
 8004ec4:	08006195 	.word	0x08006195

08004ec8 <_Bfree>:
 8004ec8:	b570      	push	{r4, r5, r6, lr}
 8004eca:	69c6      	ldr	r6, [r0, #28]
 8004ecc:	4605      	mov	r5, r0
 8004ece:	460c      	mov	r4, r1
 8004ed0:	b976      	cbnz	r6, 8004ef0 <_Bfree+0x28>
 8004ed2:	2010      	movs	r0, #16
 8004ed4:	f7ff ff02 	bl	8004cdc <malloc>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	61e8      	str	r0, [r5, #28]
 8004edc:	b920      	cbnz	r0, 8004ee8 <_Bfree+0x20>
 8004ede:	4b09      	ldr	r3, [pc, #36]	@ (8004f04 <_Bfree+0x3c>)
 8004ee0:	4809      	ldr	r0, [pc, #36]	@ (8004f08 <_Bfree+0x40>)
 8004ee2:	218f      	movs	r1, #143	@ 0x8f
 8004ee4:	f000 fd66 	bl	80059b4 <__assert_func>
 8004ee8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004eec:	6006      	str	r6, [r0, #0]
 8004eee:	60c6      	str	r6, [r0, #12]
 8004ef0:	b13c      	cbz	r4, 8004f02 <_Bfree+0x3a>
 8004ef2:	69eb      	ldr	r3, [r5, #28]
 8004ef4:	6862      	ldr	r2, [r4, #4]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004efc:	6021      	str	r1, [r4, #0]
 8004efe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004f02:	bd70      	pop	{r4, r5, r6, pc}
 8004f04:	08006115 	.word	0x08006115
 8004f08:	08006195 	.word	0x08006195

08004f0c <__multadd>:
 8004f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f10:	690d      	ldr	r5, [r1, #16]
 8004f12:	4607      	mov	r7, r0
 8004f14:	460c      	mov	r4, r1
 8004f16:	461e      	mov	r6, r3
 8004f18:	f101 0c14 	add.w	ip, r1, #20
 8004f1c:	2000      	movs	r0, #0
 8004f1e:	f8dc 3000 	ldr.w	r3, [ip]
 8004f22:	b299      	uxth	r1, r3
 8004f24:	fb02 6101 	mla	r1, r2, r1, r6
 8004f28:	0c1e      	lsrs	r6, r3, #16
 8004f2a:	0c0b      	lsrs	r3, r1, #16
 8004f2c:	fb02 3306 	mla	r3, r2, r6, r3
 8004f30:	b289      	uxth	r1, r1
 8004f32:	3001      	adds	r0, #1
 8004f34:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004f38:	4285      	cmp	r5, r0
 8004f3a:	f84c 1b04 	str.w	r1, [ip], #4
 8004f3e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004f42:	dcec      	bgt.n	8004f1e <__multadd+0x12>
 8004f44:	b30e      	cbz	r6, 8004f8a <__multadd+0x7e>
 8004f46:	68a3      	ldr	r3, [r4, #8]
 8004f48:	42ab      	cmp	r3, r5
 8004f4a:	dc19      	bgt.n	8004f80 <__multadd+0x74>
 8004f4c:	6861      	ldr	r1, [r4, #4]
 8004f4e:	4638      	mov	r0, r7
 8004f50:	3101      	adds	r1, #1
 8004f52:	f7ff ff79 	bl	8004e48 <_Balloc>
 8004f56:	4680      	mov	r8, r0
 8004f58:	b928      	cbnz	r0, 8004f66 <__multadd+0x5a>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	4b0c      	ldr	r3, [pc, #48]	@ (8004f90 <__multadd+0x84>)
 8004f5e:	480d      	ldr	r0, [pc, #52]	@ (8004f94 <__multadd+0x88>)
 8004f60:	21ba      	movs	r1, #186	@ 0xba
 8004f62:	f000 fd27 	bl	80059b4 <__assert_func>
 8004f66:	6922      	ldr	r2, [r4, #16]
 8004f68:	3202      	adds	r2, #2
 8004f6a:	f104 010c 	add.w	r1, r4, #12
 8004f6e:	0092      	lsls	r2, r2, #2
 8004f70:	300c      	adds	r0, #12
 8004f72:	f000 fd11 	bl	8005998 <memcpy>
 8004f76:	4621      	mov	r1, r4
 8004f78:	4638      	mov	r0, r7
 8004f7a:	f7ff ffa5 	bl	8004ec8 <_Bfree>
 8004f7e:	4644      	mov	r4, r8
 8004f80:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004f84:	3501      	adds	r5, #1
 8004f86:	615e      	str	r6, [r3, #20]
 8004f88:	6125      	str	r5, [r4, #16]
 8004f8a:	4620      	mov	r0, r4
 8004f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f90:	08006184 	.word	0x08006184
 8004f94:	08006195 	.word	0x08006195

08004f98 <__hi0bits>:
 8004f98:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	bf36      	itet	cc
 8004fa0:	0403      	lslcc	r3, r0, #16
 8004fa2:	2000      	movcs	r0, #0
 8004fa4:	2010      	movcc	r0, #16
 8004fa6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004faa:	bf3c      	itt	cc
 8004fac:	021b      	lslcc	r3, r3, #8
 8004fae:	3008      	addcc	r0, #8
 8004fb0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004fb4:	bf3c      	itt	cc
 8004fb6:	011b      	lslcc	r3, r3, #4
 8004fb8:	3004      	addcc	r0, #4
 8004fba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fbe:	bf3c      	itt	cc
 8004fc0:	009b      	lslcc	r3, r3, #2
 8004fc2:	3002      	addcc	r0, #2
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	db05      	blt.n	8004fd4 <__hi0bits+0x3c>
 8004fc8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8004fcc:	f100 0001 	add.w	r0, r0, #1
 8004fd0:	bf08      	it	eq
 8004fd2:	2020      	moveq	r0, #32
 8004fd4:	4770      	bx	lr

08004fd6 <__lo0bits>:
 8004fd6:	6803      	ldr	r3, [r0, #0]
 8004fd8:	4602      	mov	r2, r0
 8004fda:	f013 0007 	ands.w	r0, r3, #7
 8004fde:	d00b      	beq.n	8004ff8 <__lo0bits+0x22>
 8004fe0:	07d9      	lsls	r1, r3, #31
 8004fe2:	d421      	bmi.n	8005028 <__lo0bits+0x52>
 8004fe4:	0798      	lsls	r0, r3, #30
 8004fe6:	bf49      	itett	mi
 8004fe8:	085b      	lsrmi	r3, r3, #1
 8004fea:	089b      	lsrpl	r3, r3, #2
 8004fec:	2001      	movmi	r0, #1
 8004fee:	6013      	strmi	r3, [r2, #0]
 8004ff0:	bf5c      	itt	pl
 8004ff2:	6013      	strpl	r3, [r2, #0]
 8004ff4:	2002      	movpl	r0, #2
 8004ff6:	4770      	bx	lr
 8004ff8:	b299      	uxth	r1, r3
 8004ffa:	b909      	cbnz	r1, 8005000 <__lo0bits+0x2a>
 8004ffc:	0c1b      	lsrs	r3, r3, #16
 8004ffe:	2010      	movs	r0, #16
 8005000:	b2d9      	uxtb	r1, r3
 8005002:	b909      	cbnz	r1, 8005008 <__lo0bits+0x32>
 8005004:	3008      	adds	r0, #8
 8005006:	0a1b      	lsrs	r3, r3, #8
 8005008:	0719      	lsls	r1, r3, #28
 800500a:	bf04      	itt	eq
 800500c:	091b      	lsreq	r3, r3, #4
 800500e:	3004      	addeq	r0, #4
 8005010:	0799      	lsls	r1, r3, #30
 8005012:	bf04      	itt	eq
 8005014:	089b      	lsreq	r3, r3, #2
 8005016:	3002      	addeq	r0, #2
 8005018:	07d9      	lsls	r1, r3, #31
 800501a:	d403      	bmi.n	8005024 <__lo0bits+0x4e>
 800501c:	085b      	lsrs	r3, r3, #1
 800501e:	f100 0001 	add.w	r0, r0, #1
 8005022:	d003      	beq.n	800502c <__lo0bits+0x56>
 8005024:	6013      	str	r3, [r2, #0]
 8005026:	4770      	bx	lr
 8005028:	2000      	movs	r0, #0
 800502a:	4770      	bx	lr
 800502c:	2020      	movs	r0, #32
 800502e:	4770      	bx	lr

08005030 <__i2b>:
 8005030:	b510      	push	{r4, lr}
 8005032:	460c      	mov	r4, r1
 8005034:	2101      	movs	r1, #1
 8005036:	f7ff ff07 	bl	8004e48 <_Balloc>
 800503a:	4602      	mov	r2, r0
 800503c:	b928      	cbnz	r0, 800504a <__i2b+0x1a>
 800503e:	4b05      	ldr	r3, [pc, #20]	@ (8005054 <__i2b+0x24>)
 8005040:	4805      	ldr	r0, [pc, #20]	@ (8005058 <__i2b+0x28>)
 8005042:	f240 1145 	movw	r1, #325	@ 0x145
 8005046:	f000 fcb5 	bl	80059b4 <__assert_func>
 800504a:	2301      	movs	r3, #1
 800504c:	6144      	str	r4, [r0, #20]
 800504e:	6103      	str	r3, [r0, #16]
 8005050:	bd10      	pop	{r4, pc}
 8005052:	bf00      	nop
 8005054:	08006184 	.word	0x08006184
 8005058:	08006195 	.word	0x08006195

0800505c <__multiply>:
 800505c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005060:	4617      	mov	r7, r2
 8005062:	690a      	ldr	r2, [r1, #16]
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	429a      	cmp	r2, r3
 8005068:	bfa8      	it	ge
 800506a:	463b      	movge	r3, r7
 800506c:	4689      	mov	r9, r1
 800506e:	bfa4      	itt	ge
 8005070:	460f      	movge	r7, r1
 8005072:	4699      	movge	r9, r3
 8005074:	693d      	ldr	r5, [r7, #16]
 8005076:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	6879      	ldr	r1, [r7, #4]
 800507e:	eb05 060a 	add.w	r6, r5, sl
 8005082:	42b3      	cmp	r3, r6
 8005084:	b085      	sub	sp, #20
 8005086:	bfb8      	it	lt
 8005088:	3101      	addlt	r1, #1
 800508a:	f7ff fedd 	bl	8004e48 <_Balloc>
 800508e:	b930      	cbnz	r0, 800509e <__multiply+0x42>
 8005090:	4602      	mov	r2, r0
 8005092:	4b41      	ldr	r3, [pc, #260]	@ (8005198 <__multiply+0x13c>)
 8005094:	4841      	ldr	r0, [pc, #260]	@ (800519c <__multiply+0x140>)
 8005096:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800509a:	f000 fc8b 	bl	80059b4 <__assert_func>
 800509e:	f100 0414 	add.w	r4, r0, #20
 80050a2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80050a6:	4623      	mov	r3, r4
 80050a8:	2200      	movs	r2, #0
 80050aa:	4573      	cmp	r3, lr
 80050ac:	d320      	bcc.n	80050f0 <__multiply+0x94>
 80050ae:	f107 0814 	add.w	r8, r7, #20
 80050b2:	f109 0114 	add.w	r1, r9, #20
 80050b6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80050ba:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80050be:	9302      	str	r3, [sp, #8]
 80050c0:	1beb      	subs	r3, r5, r7
 80050c2:	3b15      	subs	r3, #21
 80050c4:	f023 0303 	bic.w	r3, r3, #3
 80050c8:	3304      	adds	r3, #4
 80050ca:	3715      	adds	r7, #21
 80050cc:	42bd      	cmp	r5, r7
 80050ce:	bf38      	it	cc
 80050d0:	2304      	movcc	r3, #4
 80050d2:	9301      	str	r3, [sp, #4]
 80050d4:	9b02      	ldr	r3, [sp, #8]
 80050d6:	9103      	str	r1, [sp, #12]
 80050d8:	428b      	cmp	r3, r1
 80050da:	d80c      	bhi.n	80050f6 <__multiply+0x9a>
 80050dc:	2e00      	cmp	r6, #0
 80050de:	dd03      	ble.n	80050e8 <__multiply+0x8c>
 80050e0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d055      	beq.n	8005194 <__multiply+0x138>
 80050e8:	6106      	str	r6, [r0, #16]
 80050ea:	b005      	add	sp, #20
 80050ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050f0:	f843 2b04 	str.w	r2, [r3], #4
 80050f4:	e7d9      	b.n	80050aa <__multiply+0x4e>
 80050f6:	f8b1 a000 	ldrh.w	sl, [r1]
 80050fa:	f1ba 0f00 	cmp.w	sl, #0
 80050fe:	d01f      	beq.n	8005140 <__multiply+0xe4>
 8005100:	46c4      	mov	ip, r8
 8005102:	46a1      	mov	r9, r4
 8005104:	2700      	movs	r7, #0
 8005106:	f85c 2b04 	ldr.w	r2, [ip], #4
 800510a:	f8d9 3000 	ldr.w	r3, [r9]
 800510e:	fa1f fb82 	uxth.w	fp, r2
 8005112:	b29b      	uxth	r3, r3
 8005114:	fb0a 330b 	mla	r3, sl, fp, r3
 8005118:	443b      	add	r3, r7
 800511a:	f8d9 7000 	ldr.w	r7, [r9]
 800511e:	0c12      	lsrs	r2, r2, #16
 8005120:	0c3f      	lsrs	r7, r7, #16
 8005122:	fb0a 7202 	mla	r2, sl, r2, r7
 8005126:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800512a:	b29b      	uxth	r3, r3
 800512c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005130:	4565      	cmp	r5, ip
 8005132:	f849 3b04 	str.w	r3, [r9], #4
 8005136:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800513a:	d8e4      	bhi.n	8005106 <__multiply+0xaa>
 800513c:	9b01      	ldr	r3, [sp, #4]
 800513e:	50e7      	str	r7, [r4, r3]
 8005140:	9b03      	ldr	r3, [sp, #12]
 8005142:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005146:	3104      	adds	r1, #4
 8005148:	f1b9 0f00 	cmp.w	r9, #0
 800514c:	d020      	beq.n	8005190 <__multiply+0x134>
 800514e:	6823      	ldr	r3, [r4, #0]
 8005150:	4647      	mov	r7, r8
 8005152:	46a4      	mov	ip, r4
 8005154:	f04f 0a00 	mov.w	sl, #0
 8005158:	f8b7 b000 	ldrh.w	fp, [r7]
 800515c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8005160:	fb09 220b 	mla	r2, r9, fp, r2
 8005164:	4452      	add	r2, sl
 8005166:	b29b      	uxth	r3, r3
 8005168:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800516c:	f84c 3b04 	str.w	r3, [ip], #4
 8005170:	f857 3b04 	ldr.w	r3, [r7], #4
 8005174:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005178:	f8bc 3000 	ldrh.w	r3, [ip]
 800517c:	fb09 330a 	mla	r3, r9, sl, r3
 8005180:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8005184:	42bd      	cmp	r5, r7
 8005186:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800518a:	d8e5      	bhi.n	8005158 <__multiply+0xfc>
 800518c:	9a01      	ldr	r2, [sp, #4]
 800518e:	50a3      	str	r3, [r4, r2]
 8005190:	3404      	adds	r4, #4
 8005192:	e79f      	b.n	80050d4 <__multiply+0x78>
 8005194:	3e01      	subs	r6, #1
 8005196:	e7a1      	b.n	80050dc <__multiply+0x80>
 8005198:	08006184 	.word	0x08006184
 800519c:	08006195 	.word	0x08006195

080051a0 <__pow5mult>:
 80051a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051a4:	4615      	mov	r5, r2
 80051a6:	f012 0203 	ands.w	r2, r2, #3
 80051aa:	4607      	mov	r7, r0
 80051ac:	460e      	mov	r6, r1
 80051ae:	d007      	beq.n	80051c0 <__pow5mult+0x20>
 80051b0:	4c25      	ldr	r4, [pc, #148]	@ (8005248 <__pow5mult+0xa8>)
 80051b2:	3a01      	subs	r2, #1
 80051b4:	2300      	movs	r3, #0
 80051b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80051ba:	f7ff fea7 	bl	8004f0c <__multadd>
 80051be:	4606      	mov	r6, r0
 80051c0:	10ad      	asrs	r5, r5, #2
 80051c2:	d03d      	beq.n	8005240 <__pow5mult+0xa0>
 80051c4:	69fc      	ldr	r4, [r7, #28]
 80051c6:	b97c      	cbnz	r4, 80051e8 <__pow5mult+0x48>
 80051c8:	2010      	movs	r0, #16
 80051ca:	f7ff fd87 	bl	8004cdc <malloc>
 80051ce:	4602      	mov	r2, r0
 80051d0:	61f8      	str	r0, [r7, #28]
 80051d2:	b928      	cbnz	r0, 80051e0 <__pow5mult+0x40>
 80051d4:	4b1d      	ldr	r3, [pc, #116]	@ (800524c <__pow5mult+0xac>)
 80051d6:	481e      	ldr	r0, [pc, #120]	@ (8005250 <__pow5mult+0xb0>)
 80051d8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80051dc:	f000 fbea 	bl	80059b4 <__assert_func>
 80051e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80051e4:	6004      	str	r4, [r0, #0]
 80051e6:	60c4      	str	r4, [r0, #12]
 80051e8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80051ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80051f0:	b94c      	cbnz	r4, 8005206 <__pow5mult+0x66>
 80051f2:	f240 2171 	movw	r1, #625	@ 0x271
 80051f6:	4638      	mov	r0, r7
 80051f8:	f7ff ff1a 	bl	8005030 <__i2b>
 80051fc:	2300      	movs	r3, #0
 80051fe:	f8c8 0008 	str.w	r0, [r8, #8]
 8005202:	4604      	mov	r4, r0
 8005204:	6003      	str	r3, [r0, #0]
 8005206:	f04f 0900 	mov.w	r9, #0
 800520a:	07eb      	lsls	r3, r5, #31
 800520c:	d50a      	bpl.n	8005224 <__pow5mult+0x84>
 800520e:	4631      	mov	r1, r6
 8005210:	4622      	mov	r2, r4
 8005212:	4638      	mov	r0, r7
 8005214:	f7ff ff22 	bl	800505c <__multiply>
 8005218:	4631      	mov	r1, r6
 800521a:	4680      	mov	r8, r0
 800521c:	4638      	mov	r0, r7
 800521e:	f7ff fe53 	bl	8004ec8 <_Bfree>
 8005222:	4646      	mov	r6, r8
 8005224:	106d      	asrs	r5, r5, #1
 8005226:	d00b      	beq.n	8005240 <__pow5mult+0xa0>
 8005228:	6820      	ldr	r0, [r4, #0]
 800522a:	b938      	cbnz	r0, 800523c <__pow5mult+0x9c>
 800522c:	4622      	mov	r2, r4
 800522e:	4621      	mov	r1, r4
 8005230:	4638      	mov	r0, r7
 8005232:	f7ff ff13 	bl	800505c <__multiply>
 8005236:	6020      	str	r0, [r4, #0]
 8005238:	f8c0 9000 	str.w	r9, [r0]
 800523c:	4604      	mov	r4, r0
 800523e:	e7e4      	b.n	800520a <__pow5mult+0x6a>
 8005240:	4630      	mov	r0, r6
 8005242:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005246:	bf00      	nop
 8005248:	08006248 	.word	0x08006248
 800524c:	08006115 	.word	0x08006115
 8005250:	08006195 	.word	0x08006195

08005254 <__lshift>:
 8005254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005258:	460c      	mov	r4, r1
 800525a:	6849      	ldr	r1, [r1, #4]
 800525c:	6923      	ldr	r3, [r4, #16]
 800525e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005262:	68a3      	ldr	r3, [r4, #8]
 8005264:	4607      	mov	r7, r0
 8005266:	4691      	mov	r9, r2
 8005268:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800526c:	f108 0601 	add.w	r6, r8, #1
 8005270:	42b3      	cmp	r3, r6
 8005272:	db0b      	blt.n	800528c <__lshift+0x38>
 8005274:	4638      	mov	r0, r7
 8005276:	f7ff fde7 	bl	8004e48 <_Balloc>
 800527a:	4605      	mov	r5, r0
 800527c:	b948      	cbnz	r0, 8005292 <__lshift+0x3e>
 800527e:	4602      	mov	r2, r0
 8005280:	4b28      	ldr	r3, [pc, #160]	@ (8005324 <__lshift+0xd0>)
 8005282:	4829      	ldr	r0, [pc, #164]	@ (8005328 <__lshift+0xd4>)
 8005284:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005288:	f000 fb94 	bl	80059b4 <__assert_func>
 800528c:	3101      	adds	r1, #1
 800528e:	005b      	lsls	r3, r3, #1
 8005290:	e7ee      	b.n	8005270 <__lshift+0x1c>
 8005292:	2300      	movs	r3, #0
 8005294:	f100 0114 	add.w	r1, r0, #20
 8005298:	f100 0210 	add.w	r2, r0, #16
 800529c:	4618      	mov	r0, r3
 800529e:	4553      	cmp	r3, sl
 80052a0:	db33      	blt.n	800530a <__lshift+0xb6>
 80052a2:	6920      	ldr	r0, [r4, #16]
 80052a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80052a8:	f104 0314 	add.w	r3, r4, #20
 80052ac:	f019 091f 	ands.w	r9, r9, #31
 80052b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80052b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80052b8:	d02b      	beq.n	8005312 <__lshift+0xbe>
 80052ba:	f1c9 0e20 	rsb	lr, r9, #32
 80052be:	468a      	mov	sl, r1
 80052c0:	2200      	movs	r2, #0
 80052c2:	6818      	ldr	r0, [r3, #0]
 80052c4:	fa00 f009 	lsl.w	r0, r0, r9
 80052c8:	4310      	orrs	r0, r2
 80052ca:	f84a 0b04 	str.w	r0, [sl], #4
 80052ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80052d2:	459c      	cmp	ip, r3
 80052d4:	fa22 f20e 	lsr.w	r2, r2, lr
 80052d8:	d8f3      	bhi.n	80052c2 <__lshift+0x6e>
 80052da:	ebac 0304 	sub.w	r3, ip, r4
 80052de:	3b15      	subs	r3, #21
 80052e0:	f023 0303 	bic.w	r3, r3, #3
 80052e4:	3304      	adds	r3, #4
 80052e6:	f104 0015 	add.w	r0, r4, #21
 80052ea:	4560      	cmp	r0, ip
 80052ec:	bf88      	it	hi
 80052ee:	2304      	movhi	r3, #4
 80052f0:	50ca      	str	r2, [r1, r3]
 80052f2:	b10a      	cbz	r2, 80052f8 <__lshift+0xa4>
 80052f4:	f108 0602 	add.w	r6, r8, #2
 80052f8:	3e01      	subs	r6, #1
 80052fa:	4638      	mov	r0, r7
 80052fc:	612e      	str	r6, [r5, #16]
 80052fe:	4621      	mov	r1, r4
 8005300:	f7ff fde2 	bl	8004ec8 <_Bfree>
 8005304:	4628      	mov	r0, r5
 8005306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800530a:	f842 0f04 	str.w	r0, [r2, #4]!
 800530e:	3301      	adds	r3, #1
 8005310:	e7c5      	b.n	800529e <__lshift+0x4a>
 8005312:	3904      	subs	r1, #4
 8005314:	f853 2b04 	ldr.w	r2, [r3], #4
 8005318:	f841 2f04 	str.w	r2, [r1, #4]!
 800531c:	459c      	cmp	ip, r3
 800531e:	d8f9      	bhi.n	8005314 <__lshift+0xc0>
 8005320:	e7ea      	b.n	80052f8 <__lshift+0xa4>
 8005322:	bf00      	nop
 8005324:	08006184 	.word	0x08006184
 8005328:	08006195 	.word	0x08006195

0800532c <__mcmp>:
 800532c:	690a      	ldr	r2, [r1, #16]
 800532e:	4603      	mov	r3, r0
 8005330:	6900      	ldr	r0, [r0, #16]
 8005332:	1a80      	subs	r0, r0, r2
 8005334:	b530      	push	{r4, r5, lr}
 8005336:	d10e      	bne.n	8005356 <__mcmp+0x2a>
 8005338:	3314      	adds	r3, #20
 800533a:	3114      	adds	r1, #20
 800533c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005340:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005344:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005348:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800534c:	4295      	cmp	r5, r2
 800534e:	d003      	beq.n	8005358 <__mcmp+0x2c>
 8005350:	d205      	bcs.n	800535e <__mcmp+0x32>
 8005352:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005356:	bd30      	pop	{r4, r5, pc}
 8005358:	42a3      	cmp	r3, r4
 800535a:	d3f3      	bcc.n	8005344 <__mcmp+0x18>
 800535c:	e7fb      	b.n	8005356 <__mcmp+0x2a>
 800535e:	2001      	movs	r0, #1
 8005360:	e7f9      	b.n	8005356 <__mcmp+0x2a>
	...

08005364 <__mdiff>:
 8005364:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005368:	4689      	mov	r9, r1
 800536a:	4606      	mov	r6, r0
 800536c:	4611      	mov	r1, r2
 800536e:	4648      	mov	r0, r9
 8005370:	4614      	mov	r4, r2
 8005372:	f7ff ffdb 	bl	800532c <__mcmp>
 8005376:	1e05      	subs	r5, r0, #0
 8005378:	d112      	bne.n	80053a0 <__mdiff+0x3c>
 800537a:	4629      	mov	r1, r5
 800537c:	4630      	mov	r0, r6
 800537e:	f7ff fd63 	bl	8004e48 <_Balloc>
 8005382:	4602      	mov	r2, r0
 8005384:	b928      	cbnz	r0, 8005392 <__mdiff+0x2e>
 8005386:	4b3f      	ldr	r3, [pc, #252]	@ (8005484 <__mdiff+0x120>)
 8005388:	f240 2137 	movw	r1, #567	@ 0x237
 800538c:	483e      	ldr	r0, [pc, #248]	@ (8005488 <__mdiff+0x124>)
 800538e:	f000 fb11 	bl	80059b4 <__assert_func>
 8005392:	2301      	movs	r3, #1
 8005394:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005398:	4610      	mov	r0, r2
 800539a:	b003      	add	sp, #12
 800539c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053a0:	bfbc      	itt	lt
 80053a2:	464b      	movlt	r3, r9
 80053a4:	46a1      	movlt	r9, r4
 80053a6:	4630      	mov	r0, r6
 80053a8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80053ac:	bfba      	itte	lt
 80053ae:	461c      	movlt	r4, r3
 80053b0:	2501      	movlt	r5, #1
 80053b2:	2500      	movge	r5, #0
 80053b4:	f7ff fd48 	bl	8004e48 <_Balloc>
 80053b8:	4602      	mov	r2, r0
 80053ba:	b918      	cbnz	r0, 80053c4 <__mdiff+0x60>
 80053bc:	4b31      	ldr	r3, [pc, #196]	@ (8005484 <__mdiff+0x120>)
 80053be:	f240 2145 	movw	r1, #581	@ 0x245
 80053c2:	e7e3      	b.n	800538c <__mdiff+0x28>
 80053c4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80053c8:	6926      	ldr	r6, [r4, #16]
 80053ca:	60c5      	str	r5, [r0, #12]
 80053cc:	f109 0310 	add.w	r3, r9, #16
 80053d0:	f109 0514 	add.w	r5, r9, #20
 80053d4:	f104 0e14 	add.w	lr, r4, #20
 80053d8:	f100 0b14 	add.w	fp, r0, #20
 80053dc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80053e0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80053e4:	9301      	str	r3, [sp, #4]
 80053e6:	46d9      	mov	r9, fp
 80053e8:	f04f 0c00 	mov.w	ip, #0
 80053ec:	9b01      	ldr	r3, [sp, #4]
 80053ee:	f85e 0b04 	ldr.w	r0, [lr], #4
 80053f2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80053f6:	9301      	str	r3, [sp, #4]
 80053f8:	fa1f f38a 	uxth.w	r3, sl
 80053fc:	4619      	mov	r1, r3
 80053fe:	b283      	uxth	r3, r0
 8005400:	1acb      	subs	r3, r1, r3
 8005402:	0c00      	lsrs	r0, r0, #16
 8005404:	4463      	add	r3, ip
 8005406:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800540a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800540e:	b29b      	uxth	r3, r3
 8005410:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005414:	4576      	cmp	r6, lr
 8005416:	f849 3b04 	str.w	r3, [r9], #4
 800541a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800541e:	d8e5      	bhi.n	80053ec <__mdiff+0x88>
 8005420:	1b33      	subs	r3, r6, r4
 8005422:	3b15      	subs	r3, #21
 8005424:	f023 0303 	bic.w	r3, r3, #3
 8005428:	3415      	adds	r4, #21
 800542a:	3304      	adds	r3, #4
 800542c:	42a6      	cmp	r6, r4
 800542e:	bf38      	it	cc
 8005430:	2304      	movcc	r3, #4
 8005432:	441d      	add	r5, r3
 8005434:	445b      	add	r3, fp
 8005436:	461e      	mov	r6, r3
 8005438:	462c      	mov	r4, r5
 800543a:	4544      	cmp	r4, r8
 800543c:	d30e      	bcc.n	800545c <__mdiff+0xf8>
 800543e:	f108 0103 	add.w	r1, r8, #3
 8005442:	1b49      	subs	r1, r1, r5
 8005444:	f021 0103 	bic.w	r1, r1, #3
 8005448:	3d03      	subs	r5, #3
 800544a:	45a8      	cmp	r8, r5
 800544c:	bf38      	it	cc
 800544e:	2100      	movcc	r1, #0
 8005450:	440b      	add	r3, r1
 8005452:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005456:	b191      	cbz	r1, 800547e <__mdiff+0x11a>
 8005458:	6117      	str	r7, [r2, #16]
 800545a:	e79d      	b.n	8005398 <__mdiff+0x34>
 800545c:	f854 1b04 	ldr.w	r1, [r4], #4
 8005460:	46e6      	mov	lr, ip
 8005462:	0c08      	lsrs	r0, r1, #16
 8005464:	fa1c fc81 	uxtah	ip, ip, r1
 8005468:	4471      	add	r1, lr
 800546a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800546e:	b289      	uxth	r1, r1
 8005470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005474:	f846 1b04 	str.w	r1, [r6], #4
 8005478:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800547c:	e7dd      	b.n	800543a <__mdiff+0xd6>
 800547e:	3f01      	subs	r7, #1
 8005480:	e7e7      	b.n	8005452 <__mdiff+0xee>
 8005482:	bf00      	nop
 8005484:	08006184 	.word	0x08006184
 8005488:	08006195 	.word	0x08006195

0800548c <__d2b>:
 800548c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005490:	460f      	mov	r7, r1
 8005492:	2101      	movs	r1, #1
 8005494:	ec59 8b10 	vmov	r8, r9, d0
 8005498:	4616      	mov	r6, r2
 800549a:	f7ff fcd5 	bl	8004e48 <_Balloc>
 800549e:	4604      	mov	r4, r0
 80054a0:	b930      	cbnz	r0, 80054b0 <__d2b+0x24>
 80054a2:	4602      	mov	r2, r0
 80054a4:	4b23      	ldr	r3, [pc, #140]	@ (8005534 <__d2b+0xa8>)
 80054a6:	4824      	ldr	r0, [pc, #144]	@ (8005538 <__d2b+0xac>)
 80054a8:	f240 310f 	movw	r1, #783	@ 0x30f
 80054ac:	f000 fa82 	bl	80059b4 <__assert_func>
 80054b0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80054b4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80054b8:	b10d      	cbz	r5, 80054be <__d2b+0x32>
 80054ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80054be:	9301      	str	r3, [sp, #4]
 80054c0:	f1b8 0300 	subs.w	r3, r8, #0
 80054c4:	d023      	beq.n	800550e <__d2b+0x82>
 80054c6:	4668      	mov	r0, sp
 80054c8:	9300      	str	r3, [sp, #0]
 80054ca:	f7ff fd84 	bl	8004fd6 <__lo0bits>
 80054ce:	e9dd 1200 	ldrd	r1, r2, [sp]
 80054d2:	b1d0      	cbz	r0, 800550a <__d2b+0x7e>
 80054d4:	f1c0 0320 	rsb	r3, r0, #32
 80054d8:	fa02 f303 	lsl.w	r3, r2, r3
 80054dc:	430b      	orrs	r3, r1
 80054de:	40c2      	lsrs	r2, r0
 80054e0:	6163      	str	r3, [r4, #20]
 80054e2:	9201      	str	r2, [sp, #4]
 80054e4:	9b01      	ldr	r3, [sp, #4]
 80054e6:	61a3      	str	r3, [r4, #24]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	bf0c      	ite	eq
 80054ec:	2201      	moveq	r2, #1
 80054ee:	2202      	movne	r2, #2
 80054f0:	6122      	str	r2, [r4, #16]
 80054f2:	b1a5      	cbz	r5, 800551e <__d2b+0x92>
 80054f4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80054f8:	4405      	add	r5, r0
 80054fa:	603d      	str	r5, [r7, #0]
 80054fc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005500:	6030      	str	r0, [r6, #0]
 8005502:	4620      	mov	r0, r4
 8005504:	b003      	add	sp, #12
 8005506:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800550a:	6161      	str	r1, [r4, #20]
 800550c:	e7ea      	b.n	80054e4 <__d2b+0x58>
 800550e:	a801      	add	r0, sp, #4
 8005510:	f7ff fd61 	bl	8004fd6 <__lo0bits>
 8005514:	9b01      	ldr	r3, [sp, #4]
 8005516:	6163      	str	r3, [r4, #20]
 8005518:	3020      	adds	r0, #32
 800551a:	2201      	movs	r2, #1
 800551c:	e7e8      	b.n	80054f0 <__d2b+0x64>
 800551e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005522:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005526:	6038      	str	r0, [r7, #0]
 8005528:	6918      	ldr	r0, [r3, #16]
 800552a:	f7ff fd35 	bl	8004f98 <__hi0bits>
 800552e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005532:	e7e5      	b.n	8005500 <__d2b+0x74>
 8005534:	08006184 	.word	0x08006184
 8005538:	08006195 	.word	0x08006195

0800553c <__ssputs_r>:
 800553c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005540:	688e      	ldr	r6, [r1, #8]
 8005542:	461f      	mov	r7, r3
 8005544:	42be      	cmp	r6, r7
 8005546:	680b      	ldr	r3, [r1, #0]
 8005548:	4682      	mov	sl, r0
 800554a:	460c      	mov	r4, r1
 800554c:	4690      	mov	r8, r2
 800554e:	d82d      	bhi.n	80055ac <__ssputs_r+0x70>
 8005550:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005554:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005558:	d026      	beq.n	80055a8 <__ssputs_r+0x6c>
 800555a:	6965      	ldr	r5, [r4, #20]
 800555c:	6909      	ldr	r1, [r1, #16]
 800555e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005562:	eba3 0901 	sub.w	r9, r3, r1
 8005566:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800556a:	1c7b      	adds	r3, r7, #1
 800556c:	444b      	add	r3, r9
 800556e:	106d      	asrs	r5, r5, #1
 8005570:	429d      	cmp	r5, r3
 8005572:	bf38      	it	cc
 8005574:	461d      	movcc	r5, r3
 8005576:	0553      	lsls	r3, r2, #21
 8005578:	d527      	bpl.n	80055ca <__ssputs_r+0x8e>
 800557a:	4629      	mov	r1, r5
 800557c:	f7ff fbd8 	bl	8004d30 <_malloc_r>
 8005580:	4606      	mov	r6, r0
 8005582:	b360      	cbz	r0, 80055de <__ssputs_r+0xa2>
 8005584:	6921      	ldr	r1, [r4, #16]
 8005586:	464a      	mov	r2, r9
 8005588:	f000 fa06 	bl	8005998 <memcpy>
 800558c:	89a3      	ldrh	r3, [r4, #12]
 800558e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005592:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005596:	81a3      	strh	r3, [r4, #12]
 8005598:	6126      	str	r6, [r4, #16]
 800559a:	6165      	str	r5, [r4, #20]
 800559c:	444e      	add	r6, r9
 800559e:	eba5 0509 	sub.w	r5, r5, r9
 80055a2:	6026      	str	r6, [r4, #0]
 80055a4:	60a5      	str	r5, [r4, #8]
 80055a6:	463e      	mov	r6, r7
 80055a8:	42be      	cmp	r6, r7
 80055aa:	d900      	bls.n	80055ae <__ssputs_r+0x72>
 80055ac:	463e      	mov	r6, r7
 80055ae:	6820      	ldr	r0, [r4, #0]
 80055b0:	4632      	mov	r2, r6
 80055b2:	4641      	mov	r1, r8
 80055b4:	f000 f9c6 	bl	8005944 <memmove>
 80055b8:	68a3      	ldr	r3, [r4, #8]
 80055ba:	1b9b      	subs	r3, r3, r6
 80055bc:	60a3      	str	r3, [r4, #8]
 80055be:	6823      	ldr	r3, [r4, #0]
 80055c0:	4433      	add	r3, r6
 80055c2:	6023      	str	r3, [r4, #0]
 80055c4:	2000      	movs	r0, #0
 80055c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055ca:	462a      	mov	r2, r5
 80055cc:	f000 fa36 	bl	8005a3c <_realloc_r>
 80055d0:	4606      	mov	r6, r0
 80055d2:	2800      	cmp	r0, #0
 80055d4:	d1e0      	bne.n	8005598 <__ssputs_r+0x5c>
 80055d6:	6921      	ldr	r1, [r4, #16]
 80055d8:	4650      	mov	r0, sl
 80055da:	f7ff fb35 	bl	8004c48 <_free_r>
 80055de:	230c      	movs	r3, #12
 80055e0:	f8ca 3000 	str.w	r3, [sl]
 80055e4:	89a3      	ldrh	r3, [r4, #12]
 80055e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80055ea:	81a3      	strh	r3, [r4, #12]
 80055ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80055f0:	e7e9      	b.n	80055c6 <__ssputs_r+0x8a>
	...

080055f4 <_svfiprintf_r>:
 80055f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055f8:	4698      	mov	r8, r3
 80055fa:	898b      	ldrh	r3, [r1, #12]
 80055fc:	061b      	lsls	r3, r3, #24
 80055fe:	b09d      	sub	sp, #116	@ 0x74
 8005600:	4607      	mov	r7, r0
 8005602:	460d      	mov	r5, r1
 8005604:	4614      	mov	r4, r2
 8005606:	d510      	bpl.n	800562a <_svfiprintf_r+0x36>
 8005608:	690b      	ldr	r3, [r1, #16]
 800560a:	b973      	cbnz	r3, 800562a <_svfiprintf_r+0x36>
 800560c:	2140      	movs	r1, #64	@ 0x40
 800560e:	f7ff fb8f 	bl	8004d30 <_malloc_r>
 8005612:	6028      	str	r0, [r5, #0]
 8005614:	6128      	str	r0, [r5, #16]
 8005616:	b930      	cbnz	r0, 8005626 <_svfiprintf_r+0x32>
 8005618:	230c      	movs	r3, #12
 800561a:	603b      	str	r3, [r7, #0]
 800561c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005620:	b01d      	add	sp, #116	@ 0x74
 8005622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005626:	2340      	movs	r3, #64	@ 0x40
 8005628:	616b      	str	r3, [r5, #20]
 800562a:	2300      	movs	r3, #0
 800562c:	9309      	str	r3, [sp, #36]	@ 0x24
 800562e:	2320      	movs	r3, #32
 8005630:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005634:	f8cd 800c 	str.w	r8, [sp, #12]
 8005638:	2330      	movs	r3, #48	@ 0x30
 800563a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80057d8 <_svfiprintf_r+0x1e4>
 800563e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005642:	f04f 0901 	mov.w	r9, #1
 8005646:	4623      	mov	r3, r4
 8005648:	469a      	mov	sl, r3
 800564a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800564e:	b10a      	cbz	r2, 8005654 <_svfiprintf_r+0x60>
 8005650:	2a25      	cmp	r2, #37	@ 0x25
 8005652:	d1f9      	bne.n	8005648 <_svfiprintf_r+0x54>
 8005654:	ebba 0b04 	subs.w	fp, sl, r4
 8005658:	d00b      	beq.n	8005672 <_svfiprintf_r+0x7e>
 800565a:	465b      	mov	r3, fp
 800565c:	4622      	mov	r2, r4
 800565e:	4629      	mov	r1, r5
 8005660:	4638      	mov	r0, r7
 8005662:	f7ff ff6b 	bl	800553c <__ssputs_r>
 8005666:	3001      	adds	r0, #1
 8005668:	f000 80a7 	beq.w	80057ba <_svfiprintf_r+0x1c6>
 800566c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800566e:	445a      	add	r2, fp
 8005670:	9209      	str	r2, [sp, #36]	@ 0x24
 8005672:	f89a 3000 	ldrb.w	r3, [sl]
 8005676:	2b00      	cmp	r3, #0
 8005678:	f000 809f 	beq.w	80057ba <_svfiprintf_r+0x1c6>
 800567c:	2300      	movs	r3, #0
 800567e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005682:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005686:	f10a 0a01 	add.w	sl, sl, #1
 800568a:	9304      	str	r3, [sp, #16]
 800568c:	9307      	str	r3, [sp, #28]
 800568e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005692:	931a      	str	r3, [sp, #104]	@ 0x68
 8005694:	4654      	mov	r4, sl
 8005696:	2205      	movs	r2, #5
 8005698:	f814 1b01 	ldrb.w	r1, [r4], #1
 800569c:	484e      	ldr	r0, [pc, #312]	@ (80057d8 <_svfiprintf_r+0x1e4>)
 800569e:	f7fa fd9f 	bl	80001e0 <memchr>
 80056a2:	9a04      	ldr	r2, [sp, #16]
 80056a4:	b9d8      	cbnz	r0, 80056de <_svfiprintf_r+0xea>
 80056a6:	06d0      	lsls	r0, r2, #27
 80056a8:	bf44      	itt	mi
 80056aa:	2320      	movmi	r3, #32
 80056ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80056b0:	0711      	lsls	r1, r2, #28
 80056b2:	bf44      	itt	mi
 80056b4:	232b      	movmi	r3, #43	@ 0x2b
 80056b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80056ba:	f89a 3000 	ldrb.w	r3, [sl]
 80056be:	2b2a      	cmp	r3, #42	@ 0x2a
 80056c0:	d015      	beq.n	80056ee <_svfiprintf_r+0xfa>
 80056c2:	9a07      	ldr	r2, [sp, #28]
 80056c4:	4654      	mov	r4, sl
 80056c6:	2000      	movs	r0, #0
 80056c8:	f04f 0c0a 	mov.w	ip, #10
 80056cc:	4621      	mov	r1, r4
 80056ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056d2:	3b30      	subs	r3, #48	@ 0x30
 80056d4:	2b09      	cmp	r3, #9
 80056d6:	d94b      	bls.n	8005770 <_svfiprintf_r+0x17c>
 80056d8:	b1b0      	cbz	r0, 8005708 <_svfiprintf_r+0x114>
 80056da:	9207      	str	r2, [sp, #28]
 80056dc:	e014      	b.n	8005708 <_svfiprintf_r+0x114>
 80056de:	eba0 0308 	sub.w	r3, r0, r8
 80056e2:	fa09 f303 	lsl.w	r3, r9, r3
 80056e6:	4313      	orrs	r3, r2
 80056e8:	9304      	str	r3, [sp, #16]
 80056ea:	46a2      	mov	sl, r4
 80056ec:	e7d2      	b.n	8005694 <_svfiprintf_r+0xa0>
 80056ee:	9b03      	ldr	r3, [sp, #12]
 80056f0:	1d19      	adds	r1, r3, #4
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	9103      	str	r1, [sp, #12]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	bfbb      	ittet	lt
 80056fa:	425b      	neglt	r3, r3
 80056fc:	f042 0202 	orrlt.w	r2, r2, #2
 8005700:	9307      	strge	r3, [sp, #28]
 8005702:	9307      	strlt	r3, [sp, #28]
 8005704:	bfb8      	it	lt
 8005706:	9204      	strlt	r2, [sp, #16]
 8005708:	7823      	ldrb	r3, [r4, #0]
 800570a:	2b2e      	cmp	r3, #46	@ 0x2e
 800570c:	d10a      	bne.n	8005724 <_svfiprintf_r+0x130>
 800570e:	7863      	ldrb	r3, [r4, #1]
 8005710:	2b2a      	cmp	r3, #42	@ 0x2a
 8005712:	d132      	bne.n	800577a <_svfiprintf_r+0x186>
 8005714:	9b03      	ldr	r3, [sp, #12]
 8005716:	1d1a      	adds	r2, r3, #4
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	9203      	str	r2, [sp, #12]
 800571c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005720:	3402      	adds	r4, #2
 8005722:	9305      	str	r3, [sp, #20]
 8005724:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80057e8 <_svfiprintf_r+0x1f4>
 8005728:	7821      	ldrb	r1, [r4, #0]
 800572a:	2203      	movs	r2, #3
 800572c:	4650      	mov	r0, sl
 800572e:	f7fa fd57 	bl	80001e0 <memchr>
 8005732:	b138      	cbz	r0, 8005744 <_svfiprintf_r+0x150>
 8005734:	9b04      	ldr	r3, [sp, #16]
 8005736:	eba0 000a 	sub.w	r0, r0, sl
 800573a:	2240      	movs	r2, #64	@ 0x40
 800573c:	4082      	lsls	r2, r0
 800573e:	4313      	orrs	r3, r2
 8005740:	3401      	adds	r4, #1
 8005742:	9304      	str	r3, [sp, #16]
 8005744:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005748:	4824      	ldr	r0, [pc, #144]	@ (80057dc <_svfiprintf_r+0x1e8>)
 800574a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800574e:	2206      	movs	r2, #6
 8005750:	f7fa fd46 	bl	80001e0 <memchr>
 8005754:	2800      	cmp	r0, #0
 8005756:	d036      	beq.n	80057c6 <_svfiprintf_r+0x1d2>
 8005758:	4b21      	ldr	r3, [pc, #132]	@ (80057e0 <_svfiprintf_r+0x1ec>)
 800575a:	bb1b      	cbnz	r3, 80057a4 <_svfiprintf_r+0x1b0>
 800575c:	9b03      	ldr	r3, [sp, #12]
 800575e:	3307      	adds	r3, #7
 8005760:	f023 0307 	bic.w	r3, r3, #7
 8005764:	3308      	adds	r3, #8
 8005766:	9303      	str	r3, [sp, #12]
 8005768:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800576a:	4433      	add	r3, r6
 800576c:	9309      	str	r3, [sp, #36]	@ 0x24
 800576e:	e76a      	b.n	8005646 <_svfiprintf_r+0x52>
 8005770:	fb0c 3202 	mla	r2, ip, r2, r3
 8005774:	460c      	mov	r4, r1
 8005776:	2001      	movs	r0, #1
 8005778:	e7a8      	b.n	80056cc <_svfiprintf_r+0xd8>
 800577a:	2300      	movs	r3, #0
 800577c:	3401      	adds	r4, #1
 800577e:	9305      	str	r3, [sp, #20]
 8005780:	4619      	mov	r1, r3
 8005782:	f04f 0c0a 	mov.w	ip, #10
 8005786:	4620      	mov	r0, r4
 8005788:	f810 2b01 	ldrb.w	r2, [r0], #1
 800578c:	3a30      	subs	r2, #48	@ 0x30
 800578e:	2a09      	cmp	r2, #9
 8005790:	d903      	bls.n	800579a <_svfiprintf_r+0x1a6>
 8005792:	2b00      	cmp	r3, #0
 8005794:	d0c6      	beq.n	8005724 <_svfiprintf_r+0x130>
 8005796:	9105      	str	r1, [sp, #20]
 8005798:	e7c4      	b.n	8005724 <_svfiprintf_r+0x130>
 800579a:	fb0c 2101 	mla	r1, ip, r1, r2
 800579e:	4604      	mov	r4, r0
 80057a0:	2301      	movs	r3, #1
 80057a2:	e7f0      	b.n	8005786 <_svfiprintf_r+0x192>
 80057a4:	ab03      	add	r3, sp, #12
 80057a6:	9300      	str	r3, [sp, #0]
 80057a8:	462a      	mov	r2, r5
 80057aa:	4b0e      	ldr	r3, [pc, #56]	@ (80057e4 <_svfiprintf_r+0x1f0>)
 80057ac:	a904      	add	r1, sp, #16
 80057ae:	4638      	mov	r0, r7
 80057b0:	f7fd fe94 	bl	80034dc <_printf_float>
 80057b4:	1c42      	adds	r2, r0, #1
 80057b6:	4606      	mov	r6, r0
 80057b8:	d1d6      	bne.n	8005768 <_svfiprintf_r+0x174>
 80057ba:	89ab      	ldrh	r3, [r5, #12]
 80057bc:	065b      	lsls	r3, r3, #25
 80057be:	f53f af2d 	bmi.w	800561c <_svfiprintf_r+0x28>
 80057c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80057c4:	e72c      	b.n	8005620 <_svfiprintf_r+0x2c>
 80057c6:	ab03      	add	r3, sp, #12
 80057c8:	9300      	str	r3, [sp, #0]
 80057ca:	462a      	mov	r2, r5
 80057cc:	4b05      	ldr	r3, [pc, #20]	@ (80057e4 <_svfiprintf_r+0x1f0>)
 80057ce:	a904      	add	r1, sp, #16
 80057d0:	4638      	mov	r0, r7
 80057d2:	f7fe f91b 	bl	8003a0c <_printf_i>
 80057d6:	e7ed      	b.n	80057b4 <_svfiprintf_r+0x1c0>
 80057d8:	080061ee 	.word	0x080061ee
 80057dc:	080061f8 	.word	0x080061f8
 80057e0:	080034dd 	.word	0x080034dd
 80057e4:	0800553d 	.word	0x0800553d
 80057e8:	080061f4 	.word	0x080061f4

080057ec <__sflush_r>:
 80057ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80057f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057f4:	0716      	lsls	r6, r2, #28
 80057f6:	4605      	mov	r5, r0
 80057f8:	460c      	mov	r4, r1
 80057fa:	d454      	bmi.n	80058a6 <__sflush_r+0xba>
 80057fc:	684b      	ldr	r3, [r1, #4]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	dc02      	bgt.n	8005808 <__sflush_r+0x1c>
 8005802:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005804:	2b00      	cmp	r3, #0
 8005806:	dd48      	ble.n	800589a <__sflush_r+0xae>
 8005808:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800580a:	2e00      	cmp	r6, #0
 800580c:	d045      	beq.n	800589a <__sflush_r+0xae>
 800580e:	2300      	movs	r3, #0
 8005810:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005814:	682f      	ldr	r7, [r5, #0]
 8005816:	6a21      	ldr	r1, [r4, #32]
 8005818:	602b      	str	r3, [r5, #0]
 800581a:	d030      	beq.n	800587e <__sflush_r+0x92>
 800581c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800581e:	89a3      	ldrh	r3, [r4, #12]
 8005820:	0759      	lsls	r1, r3, #29
 8005822:	d505      	bpl.n	8005830 <__sflush_r+0x44>
 8005824:	6863      	ldr	r3, [r4, #4]
 8005826:	1ad2      	subs	r2, r2, r3
 8005828:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800582a:	b10b      	cbz	r3, 8005830 <__sflush_r+0x44>
 800582c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800582e:	1ad2      	subs	r2, r2, r3
 8005830:	2300      	movs	r3, #0
 8005832:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005834:	6a21      	ldr	r1, [r4, #32]
 8005836:	4628      	mov	r0, r5
 8005838:	47b0      	blx	r6
 800583a:	1c43      	adds	r3, r0, #1
 800583c:	89a3      	ldrh	r3, [r4, #12]
 800583e:	d106      	bne.n	800584e <__sflush_r+0x62>
 8005840:	6829      	ldr	r1, [r5, #0]
 8005842:	291d      	cmp	r1, #29
 8005844:	d82b      	bhi.n	800589e <__sflush_r+0xb2>
 8005846:	4a2a      	ldr	r2, [pc, #168]	@ (80058f0 <__sflush_r+0x104>)
 8005848:	40ca      	lsrs	r2, r1
 800584a:	07d6      	lsls	r6, r2, #31
 800584c:	d527      	bpl.n	800589e <__sflush_r+0xb2>
 800584e:	2200      	movs	r2, #0
 8005850:	6062      	str	r2, [r4, #4]
 8005852:	04d9      	lsls	r1, r3, #19
 8005854:	6922      	ldr	r2, [r4, #16]
 8005856:	6022      	str	r2, [r4, #0]
 8005858:	d504      	bpl.n	8005864 <__sflush_r+0x78>
 800585a:	1c42      	adds	r2, r0, #1
 800585c:	d101      	bne.n	8005862 <__sflush_r+0x76>
 800585e:	682b      	ldr	r3, [r5, #0]
 8005860:	b903      	cbnz	r3, 8005864 <__sflush_r+0x78>
 8005862:	6560      	str	r0, [r4, #84]	@ 0x54
 8005864:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005866:	602f      	str	r7, [r5, #0]
 8005868:	b1b9      	cbz	r1, 800589a <__sflush_r+0xae>
 800586a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800586e:	4299      	cmp	r1, r3
 8005870:	d002      	beq.n	8005878 <__sflush_r+0x8c>
 8005872:	4628      	mov	r0, r5
 8005874:	f7ff f9e8 	bl	8004c48 <_free_r>
 8005878:	2300      	movs	r3, #0
 800587a:	6363      	str	r3, [r4, #52]	@ 0x34
 800587c:	e00d      	b.n	800589a <__sflush_r+0xae>
 800587e:	2301      	movs	r3, #1
 8005880:	4628      	mov	r0, r5
 8005882:	47b0      	blx	r6
 8005884:	4602      	mov	r2, r0
 8005886:	1c50      	adds	r0, r2, #1
 8005888:	d1c9      	bne.n	800581e <__sflush_r+0x32>
 800588a:	682b      	ldr	r3, [r5, #0]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d0c6      	beq.n	800581e <__sflush_r+0x32>
 8005890:	2b1d      	cmp	r3, #29
 8005892:	d001      	beq.n	8005898 <__sflush_r+0xac>
 8005894:	2b16      	cmp	r3, #22
 8005896:	d11e      	bne.n	80058d6 <__sflush_r+0xea>
 8005898:	602f      	str	r7, [r5, #0]
 800589a:	2000      	movs	r0, #0
 800589c:	e022      	b.n	80058e4 <__sflush_r+0xf8>
 800589e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80058a2:	b21b      	sxth	r3, r3
 80058a4:	e01b      	b.n	80058de <__sflush_r+0xf2>
 80058a6:	690f      	ldr	r7, [r1, #16]
 80058a8:	2f00      	cmp	r7, #0
 80058aa:	d0f6      	beq.n	800589a <__sflush_r+0xae>
 80058ac:	0793      	lsls	r3, r2, #30
 80058ae:	680e      	ldr	r6, [r1, #0]
 80058b0:	bf08      	it	eq
 80058b2:	694b      	ldreq	r3, [r1, #20]
 80058b4:	600f      	str	r7, [r1, #0]
 80058b6:	bf18      	it	ne
 80058b8:	2300      	movne	r3, #0
 80058ba:	eba6 0807 	sub.w	r8, r6, r7
 80058be:	608b      	str	r3, [r1, #8]
 80058c0:	f1b8 0f00 	cmp.w	r8, #0
 80058c4:	dde9      	ble.n	800589a <__sflush_r+0xae>
 80058c6:	6a21      	ldr	r1, [r4, #32]
 80058c8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80058ca:	4643      	mov	r3, r8
 80058cc:	463a      	mov	r2, r7
 80058ce:	4628      	mov	r0, r5
 80058d0:	47b0      	blx	r6
 80058d2:	2800      	cmp	r0, #0
 80058d4:	dc08      	bgt.n	80058e8 <__sflush_r+0xfc>
 80058d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80058de:	81a3      	strh	r3, [r4, #12]
 80058e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80058e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058e8:	4407      	add	r7, r0
 80058ea:	eba8 0800 	sub.w	r8, r8, r0
 80058ee:	e7e7      	b.n	80058c0 <__sflush_r+0xd4>
 80058f0:	20400001 	.word	0x20400001

080058f4 <_fflush_r>:
 80058f4:	b538      	push	{r3, r4, r5, lr}
 80058f6:	690b      	ldr	r3, [r1, #16]
 80058f8:	4605      	mov	r5, r0
 80058fa:	460c      	mov	r4, r1
 80058fc:	b913      	cbnz	r3, 8005904 <_fflush_r+0x10>
 80058fe:	2500      	movs	r5, #0
 8005900:	4628      	mov	r0, r5
 8005902:	bd38      	pop	{r3, r4, r5, pc}
 8005904:	b118      	cbz	r0, 800590e <_fflush_r+0x1a>
 8005906:	6a03      	ldr	r3, [r0, #32]
 8005908:	b90b      	cbnz	r3, 800590e <_fflush_r+0x1a>
 800590a:	f7fe fa29 	bl	8003d60 <__sinit>
 800590e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d0f3      	beq.n	80058fe <_fflush_r+0xa>
 8005916:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005918:	07d0      	lsls	r0, r2, #31
 800591a:	d404      	bmi.n	8005926 <_fflush_r+0x32>
 800591c:	0599      	lsls	r1, r3, #22
 800591e:	d402      	bmi.n	8005926 <_fflush_r+0x32>
 8005920:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005922:	f7fe fb36 	bl	8003f92 <__retarget_lock_acquire_recursive>
 8005926:	4628      	mov	r0, r5
 8005928:	4621      	mov	r1, r4
 800592a:	f7ff ff5f 	bl	80057ec <__sflush_r>
 800592e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005930:	07da      	lsls	r2, r3, #31
 8005932:	4605      	mov	r5, r0
 8005934:	d4e4      	bmi.n	8005900 <_fflush_r+0xc>
 8005936:	89a3      	ldrh	r3, [r4, #12]
 8005938:	059b      	lsls	r3, r3, #22
 800593a:	d4e1      	bmi.n	8005900 <_fflush_r+0xc>
 800593c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800593e:	f7fe fb29 	bl	8003f94 <__retarget_lock_release_recursive>
 8005942:	e7dd      	b.n	8005900 <_fflush_r+0xc>

08005944 <memmove>:
 8005944:	4288      	cmp	r0, r1
 8005946:	b510      	push	{r4, lr}
 8005948:	eb01 0402 	add.w	r4, r1, r2
 800594c:	d902      	bls.n	8005954 <memmove+0x10>
 800594e:	4284      	cmp	r4, r0
 8005950:	4623      	mov	r3, r4
 8005952:	d807      	bhi.n	8005964 <memmove+0x20>
 8005954:	1e43      	subs	r3, r0, #1
 8005956:	42a1      	cmp	r1, r4
 8005958:	d008      	beq.n	800596c <memmove+0x28>
 800595a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800595e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005962:	e7f8      	b.n	8005956 <memmove+0x12>
 8005964:	4402      	add	r2, r0
 8005966:	4601      	mov	r1, r0
 8005968:	428a      	cmp	r2, r1
 800596a:	d100      	bne.n	800596e <memmove+0x2a>
 800596c:	bd10      	pop	{r4, pc}
 800596e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005972:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005976:	e7f7      	b.n	8005968 <memmove+0x24>

08005978 <_sbrk_r>:
 8005978:	b538      	push	{r3, r4, r5, lr}
 800597a:	4d06      	ldr	r5, [pc, #24]	@ (8005994 <_sbrk_r+0x1c>)
 800597c:	2300      	movs	r3, #0
 800597e:	4604      	mov	r4, r0
 8005980:	4608      	mov	r0, r1
 8005982:	602b      	str	r3, [r5, #0]
 8005984:	f7fb fd5e 	bl	8001444 <_sbrk>
 8005988:	1c43      	adds	r3, r0, #1
 800598a:	d102      	bne.n	8005992 <_sbrk_r+0x1a>
 800598c:	682b      	ldr	r3, [r5, #0]
 800598e:	b103      	cbz	r3, 8005992 <_sbrk_r+0x1a>
 8005990:	6023      	str	r3, [r4, #0]
 8005992:	bd38      	pop	{r3, r4, r5, pc}
 8005994:	20000414 	.word	0x20000414

08005998 <memcpy>:
 8005998:	440a      	add	r2, r1
 800599a:	4291      	cmp	r1, r2
 800599c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80059a0:	d100      	bne.n	80059a4 <memcpy+0xc>
 80059a2:	4770      	bx	lr
 80059a4:	b510      	push	{r4, lr}
 80059a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80059ae:	4291      	cmp	r1, r2
 80059b0:	d1f9      	bne.n	80059a6 <memcpy+0xe>
 80059b2:	bd10      	pop	{r4, pc}

080059b4 <__assert_func>:
 80059b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80059b6:	4614      	mov	r4, r2
 80059b8:	461a      	mov	r2, r3
 80059ba:	4b09      	ldr	r3, [pc, #36]	@ (80059e0 <__assert_func+0x2c>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4605      	mov	r5, r0
 80059c0:	68d8      	ldr	r0, [r3, #12]
 80059c2:	b14c      	cbz	r4, 80059d8 <__assert_func+0x24>
 80059c4:	4b07      	ldr	r3, [pc, #28]	@ (80059e4 <__assert_func+0x30>)
 80059c6:	9100      	str	r1, [sp, #0]
 80059c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80059cc:	4906      	ldr	r1, [pc, #24]	@ (80059e8 <__assert_func+0x34>)
 80059ce:	462b      	mov	r3, r5
 80059d0:	f000 f870 	bl	8005ab4 <fiprintf>
 80059d4:	f000 f880 	bl	8005ad8 <abort>
 80059d8:	4b04      	ldr	r3, [pc, #16]	@ (80059ec <__assert_func+0x38>)
 80059da:	461c      	mov	r4, r3
 80059dc:	e7f3      	b.n	80059c6 <__assert_func+0x12>
 80059de:	bf00      	nop
 80059e0:	20000018 	.word	0x20000018
 80059e4:	08006209 	.word	0x08006209
 80059e8:	08006216 	.word	0x08006216
 80059ec:	08006244 	.word	0x08006244

080059f0 <_calloc_r>:
 80059f0:	b570      	push	{r4, r5, r6, lr}
 80059f2:	fba1 5402 	umull	r5, r4, r1, r2
 80059f6:	b934      	cbnz	r4, 8005a06 <_calloc_r+0x16>
 80059f8:	4629      	mov	r1, r5
 80059fa:	f7ff f999 	bl	8004d30 <_malloc_r>
 80059fe:	4606      	mov	r6, r0
 8005a00:	b928      	cbnz	r0, 8005a0e <_calloc_r+0x1e>
 8005a02:	4630      	mov	r0, r6
 8005a04:	bd70      	pop	{r4, r5, r6, pc}
 8005a06:	220c      	movs	r2, #12
 8005a08:	6002      	str	r2, [r0, #0]
 8005a0a:	2600      	movs	r6, #0
 8005a0c:	e7f9      	b.n	8005a02 <_calloc_r+0x12>
 8005a0e:	462a      	mov	r2, r5
 8005a10:	4621      	mov	r1, r4
 8005a12:	f7fe fa40 	bl	8003e96 <memset>
 8005a16:	e7f4      	b.n	8005a02 <_calloc_r+0x12>

08005a18 <__ascii_mbtowc>:
 8005a18:	b082      	sub	sp, #8
 8005a1a:	b901      	cbnz	r1, 8005a1e <__ascii_mbtowc+0x6>
 8005a1c:	a901      	add	r1, sp, #4
 8005a1e:	b142      	cbz	r2, 8005a32 <__ascii_mbtowc+0x1a>
 8005a20:	b14b      	cbz	r3, 8005a36 <__ascii_mbtowc+0x1e>
 8005a22:	7813      	ldrb	r3, [r2, #0]
 8005a24:	600b      	str	r3, [r1, #0]
 8005a26:	7812      	ldrb	r2, [r2, #0]
 8005a28:	1e10      	subs	r0, r2, #0
 8005a2a:	bf18      	it	ne
 8005a2c:	2001      	movne	r0, #1
 8005a2e:	b002      	add	sp, #8
 8005a30:	4770      	bx	lr
 8005a32:	4610      	mov	r0, r2
 8005a34:	e7fb      	b.n	8005a2e <__ascii_mbtowc+0x16>
 8005a36:	f06f 0001 	mvn.w	r0, #1
 8005a3a:	e7f8      	b.n	8005a2e <__ascii_mbtowc+0x16>

08005a3c <_realloc_r>:
 8005a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a40:	4607      	mov	r7, r0
 8005a42:	4614      	mov	r4, r2
 8005a44:	460d      	mov	r5, r1
 8005a46:	b921      	cbnz	r1, 8005a52 <_realloc_r+0x16>
 8005a48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a4c:	4611      	mov	r1, r2
 8005a4e:	f7ff b96f 	b.w	8004d30 <_malloc_r>
 8005a52:	b92a      	cbnz	r2, 8005a60 <_realloc_r+0x24>
 8005a54:	f7ff f8f8 	bl	8004c48 <_free_r>
 8005a58:	4625      	mov	r5, r4
 8005a5a:	4628      	mov	r0, r5
 8005a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a60:	f000 f841 	bl	8005ae6 <_malloc_usable_size_r>
 8005a64:	4284      	cmp	r4, r0
 8005a66:	4606      	mov	r6, r0
 8005a68:	d802      	bhi.n	8005a70 <_realloc_r+0x34>
 8005a6a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005a6e:	d8f4      	bhi.n	8005a5a <_realloc_r+0x1e>
 8005a70:	4621      	mov	r1, r4
 8005a72:	4638      	mov	r0, r7
 8005a74:	f7ff f95c 	bl	8004d30 <_malloc_r>
 8005a78:	4680      	mov	r8, r0
 8005a7a:	b908      	cbnz	r0, 8005a80 <_realloc_r+0x44>
 8005a7c:	4645      	mov	r5, r8
 8005a7e:	e7ec      	b.n	8005a5a <_realloc_r+0x1e>
 8005a80:	42b4      	cmp	r4, r6
 8005a82:	4622      	mov	r2, r4
 8005a84:	4629      	mov	r1, r5
 8005a86:	bf28      	it	cs
 8005a88:	4632      	movcs	r2, r6
 8005a8a:	f7ff ff85 	bl	8005998 <memcpy>
 8005a8e:	4629      	mov	r1, r5
 8005a90:	4638      	mov	r0, r7
 8005a92:	f7ff f8d9 	bl	8004c48 <_free_r>
 8005a96:	e7f1      	b.n	8005a7c <_realloc_r+0x40>

08005a98 <__ascii_wctomb>:
 8005a98:	4603      	mov	r3, r0
 8005a9a:	4608      	mov	r0, r1
 8005a9c:	b141      	cbz	r1, 8005ab0 <__ascii_wctomb+0x18>
 8005a9e:	2aff      	cmp	r2, #255	@ 0xff
 8005aa0:	d904      	bls.n	8005aac <__ascii_wctomb+0x14>
 8005aa2:	228a      	movs	r2, #138	@ 0x8a
 8005aa4:	601a      	str	r2, [r3, #0]
 8005aa6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005aaa:	4770      	bx	lr
 8005aac:	700a      	strb	r2, [r1, #0]
 8005aae:	2001      	movs	r0, #1
 8005ab0:	4770      	bx	lr
	...

08005ab4 <fiprintf>:
 8005ab4:	b40e      	push	{r1, r2, r3}
 8005ab6:	b503      	push	{r0, r1, lr}
 8005ab8:	4601      	mov	r1, r0
 8005aba:	ab03      	add	r3, sp, #12
 8005abc:	4805      	ldr	r0, [pc, #20]	@ (8005ad4 <fiprintf+0x20>)
 8005abe:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ac2:	6800      	ldr	r0, [r0, #0]
 8005ac4:	9301      	str	r3, [sp, #4]
 8005ac6:	f000 f83f 	bl	8005b48 <_vfiprintf_r>
 8005aca:	b002      	add	sp, #8
 8005acc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ad0:	b003      	add	sp, #12
 8005ad2:	4770      	bx	lr
 8005ad4:	20000018 	.word	0x20000018

08005ad8 <abort>:
 8005ad8:	b508      	push	{r3, lr}
 8005ada:	2006      	movs	r0, #6
 8005adc:	f000 fa08 	bl	8005ef0 <raise>
 8005ae0:	2001      	movs	r0, #1
 8005ae2:	f7fb fc37 	bl	8001354 <_exit>

08005ae6 <_malloc_usable_size_r>:
 8005ae6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005aea:	1f18      	subs	r0, r3, #4
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	bfbc      	itt	lt
 8005af0:	580b      	ldrlt	r3, [r1, r0]
 8005af2:	18c0      	addlt	r0, r0, r3
 8005af4:	4770      	bx	lr

08005af6 <__sfputc_r>:
 8005af6:	6893      	ldr	r3, [r2, #8]
 8005af8:	3b01      	subs	r3, #1
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	b410      	push	{r4}
 8005afe:	6093      	str	r3, [r2, #8]
 8005b00:	da08      	bge.n	8005b14 <__sfputc_r+0x1e>
 8005b02:	6994      	ldr	r4, [r2, #24]
 8005b04:	42a3      	cmp	r3, r4
 8005b06:	db01      	blt.n	8005b0c <__sfputc_r+0x16>
 8005b08:	290a      	cmp	r1, #10
 8005b0a:	d103      	bne.n	8005b14 <__sfputc_r+0x1e>
 8005b0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b10:	f000 b932 	b.w	8005d78 <__swbuf_r>
 8005b14:	6813      	ldr	r3, [r2, #0]
 8005b16:	1c58      	adds	r0, r3, #1
 8005b18:	6010      	str	r0, [r2, #0]
 8005b1a:	7019      	strb	r1, [r3, #0]
 8005b1c:	4608      	mov	r0, r1
 8005b1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <__sfputs_r>:
 8005b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b26:	4606      	mov	r6, r0
 8005b28:	460f      	mov	r7, r1
 8005b2a:	4614      	mov	r4, r2
 8005b2c:	18d5      	adds	r5, r2, r3
 8005b2e:	42ac      	cmp	r4, r5
 8005b30:	d101      	bne.n	8005b36 <__sfputs_r+0x12>
 8005b32:	2000      	movs	r0, #0
 8005b34:	e007      	b.n	8005b46 <__sfputs_r+0x22>
 8005b36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b3a:	463a      	mov	r2, r7
 8005b3c:	4630      	mov	r0, r6
 8005b3e:	f7ff ffda 	bl	8005af6 <__sfputc_r>
 8005b42:	1c43      	adds	r3, r0, #1
 8005b44:	d1f3      	bne.n	8005b2e <__sfputs_r+0xa>
 8005b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005b48 <_vfiprintf_r>:
 8005b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b4c:	460d      	mov	r5, r1
 8005b4e:	b09d      	sub	sp, #116	@ 0x74
 8005b50:	4614      	mov	r4, r2
 8005b52:	4698      	mov	r8, r3
 8005b54:	4606      	mov	r6, r0
 8005b56:	b118      	cbz	r0, 8005b60 <_vfiprintf_r+0x18>
 8005b58:	6a03      	ldr	r3, [r0, #32]
 8005b5a:	b90b      	cbnz	r3, 8005b60 <_vfiprintf_r+0x18>
 8005b5c:	f7fe f900 	bl	8003d60 <__sinit>
 8005b60:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005b62:	07d9      	lsls	r1, r3, #31
 8005b64:	d405      	bmi.n	8005b72 <_vfiprintf_r+0x2a>
 8005b66:	89ab      	ldrh	r3, [r5, #12]
 8005b68:	059a      	lsls	r2, r3, #22
 8005b6a:	d402      	bmi.n	8005b72 <_vfiprintf_r+0x2a>
 8005b6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005b6e:	f7fe fa10 	bl	8003f92 <__retarget_lock_acquire_recursive>
 8005b72:	89ab      	ldrh	r3, [r5, #12]
 8005b74:	071b      	lsls	r3, r3, #28
 8005b76:	d501      	bpl.n	8005b7c <_vfiprintf_r+0x34>
 8005b78:	692b      	ldr	r3, [r5, #16]
 8005b7a:	b99b      	cbnz	r3, 8005ba4 <_vfiprintf_r+0x5c>
 8005b7c:	4629      	mov	r1, r5
 8005b7e:	4630      	mov	r0, r6
 8005b80:	f000 f938 	bl	8005df4 <__swsetup_r>
 8005b84:	b170      	cbz	r0, 8005ba4 <_vfiprintf_r+0x5c>
 8005b86:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005b88:	07dc      	lsls	r4, r3, #31
 8005b8a:	d504      	bpl.n	8005b96 <_vfiprintf_r+0x4e>
 8005b8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005b90:	b01d      	add	sp, #116	@ 0x74
 8005b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b96:	89ab      	ldrh	r3, [r5, #12]
 8005b98:	0598      	lsls	r0, r3, #22
 8005b9a:	d4f7      	bmi.n	8005b8c <_vfiprintf_r+0x44>
 8005b9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005b9e:	f7fe f9f9 	bl	8003f94 <__retarget_lock_release_recursive>
 8005ba2:	e7f3      	b.n	8005b8c <_vfiprintf_r+0x44>
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ba8:	2320      	movs	r3, #32
 8005baa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005bae:	f8cd 800c 	str.w	r8, [sp, #12]
 8005bb2:	2330      	movs	r3, #48	@ 0x30
 8005bb4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005d64 <_vfiprintf_r+0x21c>
 8005bb8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005bbc:	f04f 0901 	mov.w	r9, #1
 8005bc0:	4623      	mov	r3, r4
 8005bc2:	469a      	mov	sl, r3
 8005bc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005bc8:	b10a      	cbz	r2, 8005bce <_vfiprintf_r+0x86>
 8005bca:	2a25      	cmp	r2, #37	@ 0x25
 8005bcc:	d1f9      	bne.n	8005bc2 <_vfiprintf_r+0x7a>
 8005bce:	ebba 0b04 	subs.w	fp, sl, r4
 8005bd2:	d00b      	beq.n	8005bec <_vfiprintf_r+0xa4>
 8005bd4:	465b      	mov	r3, fp
 8005bd6:	4622      	mov	r2, r4
 8005bd8:	4629      	mov	r1, r5
 8005bda:	4630      	mov	r0, r6
 8005bdc:	f7ff ffa2 	bl	8005b24 <__sfputs_r>
 8005be0:	3001      	adds	r0, #1
 8005be2:	f000 80a7 	beq.w	8005d34 <_vfiprintf_r+0x1ec>
 8005be6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005be8:	445a      	add	r2, fp
 8005bea:	9209      	str	r2, [sp, #36]	@ 0x24
 8005bec:	f89a 3000 	ldrb.w	r3, [sl]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	f000 809f 	beq.w	8005d34 <_vfiprintf_r+0x1ec>
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005bfc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c00:	f10a 0a01 	add.w	sl, sl, #1
 8005c04:	9304      	str	r3, [sp, #16]
 8005c06:	9307      	str	r3, [sp, #28]
 8005c08:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005c0c:	931a      	str	r3, [sp, #104]	@ 0x68
 8005c0e:	4654      	mov	r4, sl
 8005c10:	2205      	movs	r2, #5
 8005c12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c16:	4853      	ldr	r0, [pc, #332]	@ (8005d64 <_vfiprintf_r+0x21c>)
 8005c18:	f7fa fae2 	bl	80001e0 <memchr>
 8005c1c:	9a04      	ldr	r2, [sp, #16]
 8005c1e:	b9d8      	cbnz	r0, 8005c58 <_vfiprintf_r+0x110>
 8005c20:	06d1      	lsls	r1, r2, #27
 8005c22:	bf44      	itt	mi
 8005c24:	2320      	movmi	r3, #32
 8005c26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005c2a:	0713      	lsls	r3, r2, #28
 8005c2c:	bf44      	itt	mi
 8005c2e:	232b      	movmi	r3, #43	@ 0x2b
 8005c30:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005c34:	f89a 3000 	ldrb.w	r3, [sl]
 8005c38:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c3a:	d015      	beq.n	8005c68 <_vfiprintf_r+0x120>
 8005c3c:	9a07      	ldr	r2, [sp, #28]
 8005c3e:	4654      	mov	r4, sl
 8005c40:	2000      	movs	r0, #0
 8005c42:	f04f 0c0a 	mov.w	ip, #10
 8005c46:	4621      	mov	r1, r4
 8005c48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c4c:	3b30      	subs	r3, #48	@ 0x30
 8005c4e:	2b09      	cmp	r3, #9
 8005c50:	d94b      	bls.n	8005cea <_vfiprintf_r+0x1a2>
 8005c52:	b1b0      	cbz	r0, 8005c82 <_vfiprintf_r+0x13a>
 8005c54:	9207      	str	r2, [sp, #28]
 8005c56:	e014      	b.n	8005c82 <_vfiprintf_r+0x13a>
 8005c58:	eba0 0308 	sub.w	r3, r0, r8
 8005c5c:	fa09 f303 	lsl.w	r3, r9, r3
 8005c60:	4313      	orrs	r3, r2
 8005c62:	9304      	str	r3, [sp, #16]
 8005c64:	46a2      	mov	sl, r4
 8005c66:	e7d2      	b.n	8005c0e <_vfiprintf_r+0xc6>
 8005c68:	9b03      	ldr	r3, [sp, #12]
 8005c6a:	1d19      	adds	r1, r3, #4
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	9103      	str	r1, [sp, #12]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	bfbb      	ittet	lt
 8005c74:	425b      	neglt	r3, r3
 8005c76:	f042 0202 	orrlt.w	r2, r2, #2
 8005c7a:	9307      	strge	r3, [sp, #28]
 8005c7c:	9307      	strlt	r3, [sp, #28]
 8005c7e:	bfb8      	it	lt
 8005c80:	9204      	strlt	r2, [sp, #16]
 8005c82:	7823      	ldrb	r3, [r4, #0]
 8005c84:	2b2e      	cmp	r3, #46	@ 0x2e
 8005c86:	d10a      	bne.n	8005c9e <_vfiprintf_r+0x156>
 8005c88:	7863      	ldrb	r3, [r4, #1]
 8005c8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c8c:	d132      	bne.n	8005cf4 <_vfiprintf_r+0x1ac>
 8005c8e:	9b03      	ldr	r3, [sp, #12]
 8005c90:	1d1a      	adds	r2, r3, #4
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	9203      	str	r2, [sp, #12]
 8005c96:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005c9a:	3402      	adds	r4, #2
 8005c9c:	9305      	str	r3, [sp, #20]
 8005c9e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005d74 <_vfiprintf_r+0x22c>
 8005ca2:	7821      	ldrb	r1, [r4, #0]
 8005ca4:	2203      	movs	r2, #3
 8005ca6:	4650      	mov	r0, sl
 8005ca8:	f7fa fa9a 	bl	80001e0 <memchr>
 8005cac:	b138      	cbz	r0, 8005cbe <_vfiprintf_r+0x176>
 8005cae:	9b04      	ldr	r3, [sp, #16]
 8005cb0:	eba0 000a 	sub.w	r0, r0, sl
 8005cb4:	2240      	movs	r2, #64	@ 0x40
 8005cb6:	4082      	lsls	r2, r0
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	3401      	adds	r4, #1
 8005cbc:	9304      	str	r3, [sp, #16]
 8005cbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cc2:	4829      	ldr	r0, [pc, #164]	@ (8005d68 <_vfiprintf_r+0x220>)
 8005cc4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005cc8:	2206      	movs	r2, #6
 8005cca:	f7fa fa89 	bl	80001e0 <memchr>
 8005cce:	2800      	cmp	r0, #0
 8005cd0:	d03f      	beq.n	8005d52 <_vfiprintf_r+0x20a>
 8005cd2:	4b26      	ldr	r3, [pc, #152]	@ (8005d6c <_vfiprintf_r+0x224>)
 8005cd4:	bb1b      	cbnz	r3, 8005d1e <_vfiprintf_r+0x1d6>
 8005cd6:	9b03      	ldr	r3, [sp, #12]
 8005cd8:	3307      	adds	r3, #7
 8005cda:	f023 0307 	bic.w	r3, r3, #7
 8005cde:	3308      	adds	r3, #8
 8005ce0:	9303      	str	r3, [sp, #12]
 8005ce2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ce4:	443b      	add	r3, r7
 8005ce6:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ce8:	e76a      	b.n	8005bc0 <_vfiprintf_r+0x78>
 8005cea:	fb0c 3202 	mla	r2, ip, r2, r3
 8005cee:	460c      	mov	r4, r1
 8005cf0:	2001      	movs	r0, #1
 8005cf2:	e7a8      	b.n	8005c46 <_vfiprintf_r+0xfe>
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	3401      	adds	r4, #1
 8005cf8:	9305      	str	r3, [sp, #20]
 8005cfa:	4619      	mov	r1, r3
 8005cfc:	f04f 0c0a 	mov.w	ip, #10
 8005d00:	4620      	mov	r0, r4
 8005d02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d06:	3a30      	subs	r2, #48	@ 0x30
 8005d08:	2a09      	cmp	r2, #9
 8005d0a:	d903      	bls.n	8005d14 <_vfiprintf_r+0x1cc>
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d0c6      	beq.n	8005c9e <_vfiprintf_r+0x156>
 8005d10:	9105      	str	r1, [sp, #20]
 8005d12:	e7c4      	b.n	8005c9e <_vfiprintf_r+0x156>
 8005d14:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d18:	4604      	mov	r4, r0
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e7f0      	b.n	8005d00 <_vfiprintf_r+0x1b8>
 8005d1e:	ab03      	add	r3, sp, #12
 8005d20:	9300      	str	r3, [sp, #0]
 8005d22:	462a      	mov	r2, r5
 8005d24:	4b12      	ldr	r3, [pc, #72]	@ (8005d70 <_vfiprintf_r+0x228>)
 8005d26:	a904      	add	r1, sp, #16
 8005d28:	4630      	mov	r0, r6
 8005d2a:	f7fd fbd7 	bl	80034dc <_printf_float>
 8005d2e:	4607      	mov	r7, r0
 8005d30:	1c78      	adds	r0, r7, #1
 8005d32:	d1d6      	bne.n	8005ce2 <_vfiprintf_r+0x19a>
 8005d34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005d36:	07d9      	lsls	r1, r3, #31
 8005d38:	d405      	bmi.n	8005d46 <_vfiprintf_r+0x1fe>
 8005d3a:	89ab      	ldrh	r3, [r5, #12]
 8005d3c:	059a      	lsls	r2, r3, #22
 8005d3e:	d402      	bmi.n	8005d46 <_vfiprintf_r+0x1fe>
 8005d40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005d42:	f7fe f927 	bl	8003f94 <__retarget_lock_release_recursive>
 8005d46:	89ab      	ldrh	r3, [r5, #12]
 8005d48:	065b      	lsls	r3, r3, #25
 8005d4a:	f53f af1f 	bmi.w	8005b8c <_vfiprintf_r+0x44>
 8005d4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005d50:	e71e      	b.n	8005b90 <_vfiprintf_r+0x48>
 8005d52:	ab03      	add	r3, sp, #12
 8005d54:	9300      	str	r3, [sp, #0]
 8005d56:	462a      	mov	r2, r5
 8005d58:	4b05      	ldr	r3, [pc, #20]	@ (8005d70 <_vfiprintf_r+0x228>)
 8005d5a:	a904      	add	r1, sp, #16
 8005d5c:	4630      	mov	r0, r6
 8005d5e:	f7fd fe55 	bl	8003a0c <_printf_i>
 8005d62:	e7e4      	b.n	8005d2e <_vfiprintf_r+0x1e6>
 8005d64:	080061ee 	.word	0x080061ee
 8005d68:	080061f8 	.word	0x080061f8
 8005d6c:	080034dd 	.word	0x080034dd
 8005d70:	08005b25 	.word	0x08005b25
 8005d74:	080061f4 	.word	0x080061f4

08005d78 <__swbuf_r>:
 8005d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d7a:	460e      	mov	r6, r1
 8005d7c:	4614      	mov	r4, r2
 8005d7e:	4605      	mov	r5, r0
 8005d80:	b118      	cbz	r0, 8005d8a <__swbuf_r+0x12>
 8005d82:	6a03      	ldr	r3, [r0, #32]
 8005d84:	b90b      	cbnz	r3, 8005d8a <__swbuf_r+0x12>
 8005d86:	f7fd ffeb 	bl	8003d60 <__sinit>
 8005d8a:	69a3      	ldr	r3, [r4, #24]
 8005d8c:	60a3      	str	r3, [r4, #8]
 8005d8e:	89a3      	ldrh	r3, [r4, #12]
 8005d90:	071a      	lsls	r2, r3, #28
 8005d92:	d501      	bpl.n	8005d98 <__swbuf_r+0x20>
 8005d94:	6923      	ldr	r3, [r4, #16]
 8005d96:	b943      	cbnz	r3, 8005daa <__swbuf_r+0x32>
 8005d98:	4621      	mov	r1, r4
 8005d9a:	4628      	mov	r0, r5
 8005d9c:	f000 f82a 	bl	8005df4 <__swsetup_r>
 8005da0:	b118      	cbz	r0, 8005daa <__swbuf_r+0x32>
 8005da2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8005da6:	4638      	mov	r0, r7
 8005da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005daa:	6823      	ldr	r3, [r4, #0]
 8005dac:	6922      	ldr	r2, [r4, #16]
 8005dae:	1a98      	subs	r0, r3, r2
 8005db0:	6963      	ldr	r3, [r4, #20]
 8005db2:	b2f6      	uxtb	r6, r6
 8005db4:	4283      	cmp	r3, r0
 8005db6:	4637      	mov	r7, r6
 8005db8:	dc05      	bgt.n	8005dc6 <__swbuf_r+0x4e>
 8005dba:	4621      	mov	r1, r4
 8005dbc:	4628      	mov	r0, r5
 8005dbe:	f7ff fd99 	bl	80058f4 <_fflush_r>
 8005dc2:	2800      	cmp	r0, #0
 8005dc4:	d1ed      	bne.n	8005da2 <__swbuf_r+0x2a>
 8005dc6:	68a3      	ldr	r3, [r4, #8]
 8005dc8:	3b01      	subs	r3, #1
 8005dca:	60a3      	str	r3, [r4, #8]
 8005dcc:	6823      	ldr	r3, [r4, #0]
 8005dce:	1c5a      	adds	r2, r3, #1
 8005dd0:	6022      	str	r2, [r4, #0]
 8005dd2:	701e      	strb	r6, [r3, #0]
 8005dd4:	6962      	ldr	r2, [r4, #20]
 8005dd6:	1c43      	adds	r3, r0, #1
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d004      	beq.n	8005de6 <__swbuf_r+0x6e>
 8005ddc:	89a3      	ldrh	r3, [r4, #12]
 8005dde:	07db      	lsls	r3, r3, #31
 8005de0:	d5e1      	bpl.n	8005da6 <__swbuf_r+0x2e>
 8005de2:	2e0a      	cmp	r6, #10
 8005de4:	d1df      	bne.n	8005da6 <__swbuf_r+0x2e>
 8005de6:	4621      	mov	r1, r4
 8005de8:	4628      	mov	r0, r5
 8005dea:	f7ff fd83 	bl	80058f4 <_fflush_r>
 8005dee:	2800      	cmp	r0, #0
 8005df0:	d0d9      	beq.n	8005da6 <__swbuf_r+0x2e>
 8005df2:	e7d6      	b.n	8005da2 <__swbuf_r+0x2a>

08005df4 <__swsetup_r>:
 8005df4:	b538      	push	{r3, r4, r5, lr}
 8005df6:	4b29      	ldr	r3, [pc, #164]	@ (8005e9c <__swsetup_r+0xa8>)
 8005df8:	4605      	mov	r5, r0
 8005dfa:	6818      	ldr	r0, [r3, #0]
 8005dfc:	460c      	mov	r4, r1
 8005dfe:	b118      	cbz	r0, 8005e08 <__swsetup_r+0x14>
 8005e00:	6a03      	ldr	r3, [r0, #32]
 8005e02:	b90b      	cbnz	r3, 8005e08 <__swsetup_r+0x14>
 8005e04:	f7fd ffac 	bl	8003d60 <__sinit>
 8005e08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e0c:	0719      	lsls	r1, r3, #28
 8005e0e:	d422      	bmi.n	8005e56 <__swsetup_r+0x62>
 8005e10:	06da      	lsls	r2, r3, #27
 8005e12:	d407      	bmi.n	8005e24 <__swsetup_r+0x30>
 8005e14:	2209      	movs	r2, #9
 8005e16:	602a      	str	r2, [r5, #0]
 8005e18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e1c:	81a3      	strh	r3, [r4, #12]
 8005e1e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005e22:	e033      	b.n	8005e8c <__swsetup_r+0x98>
 8005e24:	0758      	lsls	r0, r3, #29
 8005e26:	d512      	bpl.n	8005e4e <__swsetup_r+0x5a>
 8005e28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005e2a:	b141      	cbz	r1, 8005e3e <__swsetup_r+0x4a>
 8005e2c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005e30:	4299      	cmp	r1, r3
 8005e32:	d002      	beq.n	8005e3a <__swsetup_r+0x46>
 8005e34:	4628      	mov	r0, r5
 8005e36:	f7fe ff07 	bl	8004c48 <_free_r>
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	6363      	str	r3, [r4, #52]	@ 0x34
 8005e3e:	89a3      	ldrh	r3, [r4, #12]
 8005e40:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005e44:	81a3      	strh	r3, [r4, #12]
 8005e46:	2300      	movs	r3, #0
 8005e48:	6063      	str	r3, [r4, #4]
 8005e4a:	6923      	ldr	r3, [r4, #16]
 8005e4c:	6023      	str	r3, [r4, #0]
 8005e4e:	89a3      	ldrh	r3, [r4, #12]
 8005e50:	f043 0308 	orr.w	r3, r3, #8
 8005e54:	81a3      	strh	r3, [r4, #12]
 8005e56:	6923      	ldr	r3, [r4, #16]
 8005e58:	b94b      	cbnz	r3, 8005e6e <__swsetup_r+0x7a>
 8005e5a:	89a3      	ldrh	r3, [r4, #12]
 8005e5c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005e60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e64:	d003      	beq.n	8005e6e <__swsetup_r+0x7a>
 8005e66:	4621      	mov	r1, r4
 8005e68:	4628      	mov	r0, r5
 8005e6a:	f000 f883 	bl	8005f74 <__smakebuf_r>
 8005e6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e72:	f013 0201 	ands.w	r2, r3, #1
 8005e76:	d00a      	beq.n	8005e8e <__swsetup_r+0x9a>
 8005e78:	2200      	movs	r2, #0
 8005e7a:	60a2      	str	r2, [r4, #8]
 8005e7c:	6962      	ldr	r2, [r4, #20]
 8005e7e:	4252      	negs	r2, r2
 8005e80:	61a2      	str	r2, [r4, #24]
 8005e82:	6922      	ldr	r2, [r4, #16]
 8005e84:	b942      	cbnz	r2, 8005e98 <__swsetup_r+0xa4>
 8005e86:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005e8a:	d1c5      	bne.n	8005e18 <__swsetup_r+0x24>
 8005e8c:	bd38      	pop	{r3, r4, r5, pc}
 8005e8e:	0799      	lsls	r1, r3, #30
 8005e90:	bf58      	it	pl
 8005e92:	6962      	ldrpl	r2, [r4, #20]
 8005e94:	60a2      	str	r2, [r4, #8]
 8005e96:	e7f4      	b.n	8005e82 <__swsetup_r+0x8e>
 8005e98:	2000      	movs	r0, #0
 8005e9a:	e7f7      	b.n	8005e8c <__swsetup_r+0x98>
 8005e9c:	20000018 	.word	0x20000018

08005ea0 <_raise_r>:
 8005ea0:	291f      	cmp	r1, #31
 8005ea2:	b538      	push	{r3, r4, r5, lr}
 8005ea4:	4605      	mov	r5, r0
 8005ea6:	460c      	mov	r4, r1
 8005ea8:	d904      	bls.n	8005eb4 <_raise_r+0x14>
 8005eaa:	2316      	movs	r3, #22
 8005eac:	6003      	str	r3, [r0, #0]
 8005eae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005eb2:	bd38      	pop	{r3, r4, r5, pc}
 8005eb4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005eb6:	b112      	cbz	r2, 8005ebe <_raise_r+0x1e>
 8005eb8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005ebc:	b94b      	cbnz	r3, 8005ed2 <_raise_r+0x32>
 8005ebe:	4628      	mov	r0, r5
 8005ec0:	f000 f830 	bl	8005f24 <_getpid_r>
 8005ec4:	4622      	mov	r2, r4
 8005ec6:	4601      	mov	r1, r0
 8005ec8:	4628      	mov	r0, r5
 8005eca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ece:	f000 b817 	b.w	8005f00 <_kill_r>
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d00a      	beq.n	8005eec <_raise_r+0x4c>
 8005ed6:	1c59      	adds	r1, r3, #1
 8005ed8:	d103      	bne.n	8005ee2 <_raise_r+0x42>
 8005eda:	2316      	movs	r3, #22
 8005edc:	6003      	str	r3, [r0, #0]
 8005ede:	2001      	movs	r0, #1
 8005ee0:	e7e7      	b.n	8005eb2 <_raise_r+0x12>
 8005ee2:	2100      	movs	r1, #0
 8005ee4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005ee8:	4620      	mov	r0, r4
 8005eea:	4798      	blx	r3
 8005eec:	2000      	movs	r0, #0
 8005eee:	e7e0      	b.n	8005eb2 <_raise_r+0x12>

08005ef0 <raise>:
 8005ef0:	4b02      	ldr	r3, [pc, #8]	@ (8005efc <raise+0xc>)
 8005ef2:	4601      	mov	r1, r0
 8005ef4:	6818      	ldr	r0, [r3, #0]
 8005ef6:	f7ff bfd3 	b.w	8005ea0 <_raise_r>
 8005efa:	bf00      	nop
 8005efc:	20000018 	.word	0x20000018

08005f00 <_kill_r>:
 8005f00:	b538      	push	{r3, r4, r5, lr}
 8005f02:	4d07      	ldr	r5, [pc, #28]	@ (8005f20 <_kill_r+0x20>)
 8005f04:	2300      	movs	r3, #0
 8005f06:	4604      	mov	r4, r0
 8005f08:	4608      	mov	r0, r1
 8005f0a:	4611      	mov	r1, r2
 8005f0c:	602b      	str	r3, [r5, #0]
 8005f0e:	f7fb fa11 	bl	8001334 <_kill>
 8005f12:	1c43      	adds	r3, r0, #1
 8005f14:	d102      	bne.n	8005f1c <_kill_r+0x1c>
 8005f16:	682b      	ldr	r3, [r5, #0]
 8005f18:	b103      	cbz	r3, 8005f1c <_kill_r+0x1c>
 8005f1a:	6023      	str	r3, [r4, #0]
 8005f1c:	bd38      	pop	{r3, r4, r5, pc}
 8005f1e:	bf00      	nop
 8005f20:	20000414 	.word	0x20000414

08005f24 <_getpid_r>:
 8005f24:	f7fb b9fe 	b.w	8001324 <_getpid>

08005f28 <__swhatbuf_r>:
 8005f28:	b570      	push	{r4, r5, r6, lr}
 8005f2a:	460c      	mov	r4, r1
 8005f2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f30:	2900      	cmp	r1, #0
 8005f32:	b096      	sub	sp, #88	@ 0x58
 8005f34:	4615      	mov	r5, r2
 8005f36:	461e      	mov	r6, r3
 8005f38:	da0d      	bge.n	8005f56 <__swhatbuf_r+0x2e>
 8005f3a:	89a3      	ldrh	r3, [r4, #12]
 8005f3c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005f40:	f04f 0100 	mov.w	r1, #0
 8005f44:	bf14      	ite	ne
 8005f46:	2340      	movne	r3, #64	@ 0x40
 8005f48:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005f4c:	2000      	movs	r0, #0
 8005f4e:	6031      	str	r1, [r6, #0]
 8005f50:	602b      	str	r3, [r5, #0]
 8005f52:	b016      	add	sp, #88	@ 0x58
 8005f54:	bd70      	pop	{r4, r5, r6, pc}
 8005f56:	466a      	mov	r2, sp
 8005f58:	f000 f848 	bl	8005fec <_fstat_r>
 8005f5c:	2800      	cmp	r0, #0
 8005f5e:	dbec      	blt.n	8005f3a <__swhatbuf_r+0x12>
 8005f60:	9901      	ldr	r1, [sp, #4]
 8005f62:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005f66:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005f6a:	4259      	negs	r1, r3
 8005f6c:	4159      	adcs	r1, r3
 8005f6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005f72:	e7eb      	b.n	8005f4c <__swhatbuf_r+0x24>

08005f74 <__smakebuf_r>:
 8005f74:	898b      	ldrh	r3, [r1, #12]
 8005f76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f78:	079d      	lsls	r5, r3, #30
 8005f7a:	4606      	mov	r6, r0
 8005f7c:	460c      	mov	r4, r1
 8005f7e:	d507      	bpl.n	8005f90 <__smakebuf_r+0x1c>
 8005f80:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005f84:	6023      	str	r3, [r4, #0]
 8005f86:	6123      	str	r3, [r4, #16]
 8005f88:	2301      	movs	r3, #1
 8005f8a:	6163      	str	r3, [r4, #20]
 8005f8c:	b003      	add	sp, #12
 8005f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f90:	ab01      	add	r3, sp, #4
 8005f92:	466a      	mov	r2, sp
 8005f94:	f7ff ffc8 	bl	8005f28 <__swhatbuf_r>
 8005f98:	9f00      	ldr	r7, [sp, #0]
 8005f9a:	4605      	mov	r5, r0
 8005f9c:	4639      	mov	r1, r7
 8005f9e:	4630      	mov	r0, r6
 8005fa0:	f7fe fec6 	bl	8004d30 <_malloc_r>
 8005fa4:	b948      	cbnz	r0, 8005fba <__smakebuf_r+0x46>
 8005fa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005faa:	059a      	lsls	r2, r3, #22
 8005fac:	d4ee      	bmi.n	8005f8c <__smakebuf_r+0x18>
 8005fae:	f023 0303 	bic.w	r3, r3, #3
 8005fb2:	f043 0302 	orr.w	r3, r3, #2
 8005fb6:	81a3      	strh	r3, [r4, #12]
 8005fb8:	e7e2      	b.n	8005f80 <__smakebuf_r+0xc>
 8005fba:	89a3      	ldrh	r3, [r4, #12]
 8005fbc:	6020      	str	r0, [r4, #0]
 8005fbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fc2:	81a3      	strh	r3, [r4, #12]
 8005fc4:	9b01      	ldr	r3, [sp, #4]
 8005fc6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005fca:	b15b      	cbz	r3, 8005fe4 <__smakebuf_r+0x70>
 8005fcc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005fd0:	4630      	mov	r0, r6
 8005fd2:	f000 f81d 	bl	8006010 <_isatty_r>
 8005fd6:	b128      	cbz	r0, 8005fe4 <__smakebuf_r+0x70>
 8005fd8:	89a3      	ldrh	r3, [r4, #12]
 8005fda:	f023 0303 	bic.w	r3, r3, #3
 8005fde:	f043 0301 	orr.w	r3, r3, #1
 8005fe2:	81a3      	strh	r3, [r4, #12]
 8005fe4:	89a3      	ldrh	r3, [r4, #12]
 8005fe6:	431d      	orrs	r5, r3
 8005fe8:	81a5      	strh	r5, [r4, #12]
 8005fea:	e7cf      	b.n	8005f8c <__smakebuf_r+0x18>

08005fec <_fstat_r>:
 8005fec:	b538      	push	{r3, r4, r5, lr}
 8005fee:	4d07      	ldr	r5, [pc, #28]	@ (800600c <_fstat_r+0x20>)
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	4604      	mov	r4, r0
 8005ff4:	4608      	mov	r0, r1
 8005ff6:	4611      	mov	r1, r2
 8005ff8:	602b      	str	r3, [r5, #0]
 8005ffa:	f7fb f9fb 	bl	80013f4 <_fstat>
 8005ffe:	1c43      	adds	r3, r0, #1
 8006000:	d102      	bne.n	8006008 <_fstat_r+0x1c>
 8006002:	682b      	ldr	r3, [r5, #0]
 8006004:	b103      	cbz	r3, 8006008 <_fstat_r+0x1c>
 8006006:	6023      	str	r3, [r4, #0]
 8006008:	bd38      	pop	{r3, r4, r5, pc}
 800600a:	bf00      	nop
 800600c:	20000414 	.word	0x20000414

08006010 <_isatty_r>:
 8006010:	b538      	push	{r3, r4, r5, lr}
 8006012:	4d06      	ldr	r5, [pc, #24]	@ (800602c <_isatty_r+0x1c>)
 8006014:	2300      	movs	r3, #0
 8006016:	4604      	mov	r4, r0
 8006018:	4608      	mov	r0, r1
 800601a:	602b      	str	r3, [r5, #0]
 800601c:	f7fb f9fa 	bl	8001414 <_isatty>
 8006020:	1c43      	adds	r3, r0, #1
 8006022:	d102      	bne.n	800602a <_isatty_r+0x1a>
 8006024:	682b      	ldr	r3, [r5, #0]
 8006026:	b103      	cbz	r3, 800602a <_isatty_r+0x1a>
 8006028:	6023      	str	r3, [r4, #0]
 800602a:	bd38      	pop	{r3, r4, r5, pc}
 800602c:	20000414 	.word	0x20000414

08006030 <_init>:
 8006030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006032:	bf00      	nop
 8006034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006036:	bc08      	pop	{r3}
 8006038:	469e      	mov	lr, r3
 800603a:	4770      	bx	lr

0800603c <_fini>:
 800603c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800603e:	bf00      	nop
 8006040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006042:	bc08      	pop	{r3}
 8006044:	469e      	mov	lr, r3
 8006046:	4770      	bx	lr
